{
    "demos/models.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 16, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * 3 * 3, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * 5 * 5, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "64 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "64 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_66": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_69": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_72": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_76": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_79": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_82": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_86": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_89": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_92": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_96": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_100": {
                "kernel_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demos/utils.py": {
        "torch": {
            "max_39": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_42": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta[~corrects]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attack.py": {
        "torch": {
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_275": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_256": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_263": {
                "variable": {
                    "value": "(_, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[counter][l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "self._kth_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_272": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "image_list_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "label_list_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_188": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l2_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_197": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "pre_list_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "(image_list_cat, label_list_cat, pre_list_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "(image_list_cat, label_list_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_194": {
                "input": {
                    "value": "delta[~right_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_279": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/apgd.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.steps, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.steps + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.steps + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "criterion_indiv",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_176": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "randn_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_223": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_126": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_255": {
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_90": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_156": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_117": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_148": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_149": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_147": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_148": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_149": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_170": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_153": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_156": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/apgdt.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.steps, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.steps + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.steps + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_171": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_223": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_224": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_217": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "enable_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_144": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_90": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_152": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_113": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_144": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_145": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_143": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_144": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_145": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_166": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_149": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_152": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/bim.py": {
        "torch": {
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_71": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori_images - self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(b > ori_images + self.eps).float() * (ori_images + self.eps) + (b <= ori_images + self.eps).float() * b",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_66": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(c, max=1).detach()",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/cw.py": {
        "torch": {
            "MSELoss_65": {
                "variable": {
                    "value": "MSELoss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_66": {
                "variable": {
                    "value": "Flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_126": {
                "variable": {
                    "value": "(i, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - one_hot_labels) * outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_127": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_labels.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "len(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "(1 + x) / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_130": {
                "input": {
                    "value": "i - j",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.kappa",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "input": {
                    "value": "j - i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.kappa",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_124": {
                "n": {
                    "value": "len(outputs[0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/deepfool.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_72": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_90": {
                "variable": {
                    "value": "(_, hat_L)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(f_prime) / torch.norm(nn.Flatten()(w_prime), p=2, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward_indiv(adv_images[idx], labels[idx])",
                            "Call"
                        ],
                        [
                            "image + (1 + self.overshoot) * delta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_image, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "x_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "input": {
                    "value": "*y.shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "shape": {
                    "value": "*x.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "abs_88": {
                "input": {
                    "value": "f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_k - f_0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_89": {
                "input": {
                    "value": "nn.Flatten()(w_prime)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_92": {
                "input": {
                    "value": "f_prime[hat_L]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_93": {
                "input": {
                    "value": "w_prime[hat_L]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/difgsm.py": {
        "torch": {
            "randint_56": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "img_resize",
                            "variable"
                        ]
                    ]
                },
                "high": {
                    "value": "img_resize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(img_size * self.resize_rate)",
                            "Call"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_57": {
                "variable": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[rnd, rnd]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "pad_top",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "h_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_62": {
                "variable": {
                    "value": "pad_left",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "w_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=[rnd, rnd], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_left.item(), pad_right.item(), pad_top.item(), pad_bottom.item()]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_67": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_86": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_100": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_103": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "grad + momentum * self.decay",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/eotpgd.py": {
        "torch": {
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_58": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_80": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_57": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_74": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/fab.py": {
        "torch": {
            "argsort_563": {
                "variable": {
                    "value": "indp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a - t * (2 * a - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_572": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_578": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_579": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "w.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_600": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_615": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_615": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1000000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sort_618": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w).clamp(min=-1000000000000.0, max=1000000000000.0)",
                            "Call"
                        ],
                        [
                            "(1 / w).abs().clamp_max(1000000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_619": {
                "variable": {
                    "value": "rs2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-w5 * rs[:, 0:1], torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_634": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_635": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "w.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_671": {
                "variable": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w).clamp(min=-1000000000000.0, max=1000000000000.0)",
                            "Call"
                        ],
                        [
                            "(1 / w).abs().clamp_max(1000000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_672": {
                "variable": {
                    "value": "indr_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argsort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "indr[c2].gather(1, lb2.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_676": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_676": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argsort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "indr[c2].gather(1, lb2.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_677": {
                "variable": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_678": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_682": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_683": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[y.shape[-1], *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(im)",
                            "Call"
                        ],
                        [
                            "self.model(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_103": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_344": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_584": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_591": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_ - b2 > 0",
                            "Compare"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_592": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_ - b2 > 0",
                            "Compare"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_597": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_640": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_643": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_644": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_688": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_691": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_692": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_698": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_698": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_699": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_699": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_573": {
                "input": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ws * d.gather(1, indp2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_625": {
                "input": {
                    "value": "w3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(w ** 2).gather(1, indr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_347": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_497": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_601": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp_min((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], min=0).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp_min((b[c2] - sb[c2, lb]) / -s[c2, lb], min=0).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_601": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_108": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_254": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_258": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_438": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_442": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_628": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_182": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_365": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_513": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_193": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_258": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_376": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_442": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_538": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_106": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_107": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_173": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_254": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_261": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_356": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_414": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_438": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_445": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_174": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_174": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_357": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_357": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_425": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_426": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_183": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_183": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_366": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_366": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_194": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_194": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_377": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_377": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_175": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_358": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_184": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_367": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_195": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_378": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/ffgsm.py": {
        "torch": {
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_47": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + torch.randn_like(images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_46": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_59": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + torch.randn_like(images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/fgsm.py": {
        "torch": {
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.eps * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/gn.py": {
        "torch": {
            "clamp_35": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.std * torch.randn_like(images)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_34": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/jitter.py": {
        "torch": {
            "MSELoss_54": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_61": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_67": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_70": {
                "variable": {
                    "value": "norm_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_84": {
                "variable": {
                    "value": "norm_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_96": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_78": {
                "variable": {
                    "value": "target_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_target_label(images, labels)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "logits.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_81": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "logits.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_like_60": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_71": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(hat_z, target_Y).mean(dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "loss(hat_z, Y).mean(dim=1)",
                            "Call"
                        ],
                        [
                            "cost.mean()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_74": {
                "input": {
                    "value": "hat_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=1)(self.scale * logits / norm_z)",
                            "Call"
                        ],
                        [
                            "hat_z + self.std * torch.randn_like(hat_z)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/mifgsm.py": {
        "torch": {
            "zeros_like_50": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_67": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "grad + momentum * self.decay",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/multiattack.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "fails",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_56": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_61": {
                "variable": {
                    "value": "succeeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fails",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(batch_size).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(fails, corrects)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "wrongs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~corrects",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "masked_select_62": {
                "variable": {
                    "value": "succeeds_of_fails",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(fails.shape[0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "wrongs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~corrects",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "masked_select_66": {
                "variable": {
                    "value": "fails",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fails",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(batch_size).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(fails, corrects)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "corrects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre == labels[fails]",
                            "Compare"
                        ]
                    ]
                }
            },
            "arange_62": {
                "start": {
                    "value": "fails.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/nifgsm.py": {
        "torch": {
            "zeros_like_48": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_70": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_71": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_65": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.decay * momentum + grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/onepixel.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images)",
                            "Call"
                        ],
                        [
                            "self._perturb(image, delta)",
                            "Call"
                        ],
                        [
                            "torch.cat([adv_image] * num_delta, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adv_image] * num_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_116": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.inf_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/pgd.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_74": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_56": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_70": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/pgdl2.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_57": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_images + delta, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_flat.norm(p=2, dim=1).view(adv_images.size(0), 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_82": {
                "variable": {
                    "value": "delta_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_84": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.eps / delta_norms",
                            "BinOp"
                        ],
                        [
                            "torch.min(factor, torch.ones_like(delta_norms))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_75": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_images + delta, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_77": {
                "input": {
                    "value": "grad.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_84": {
                "input": {
                    "value": "delta_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(delta.view(batch_size, -1), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/pixle.py": {
        "torch": {
            "cat_164": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_235": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(image.to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "destinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_pixel_mapping(image, x, x_offset, y, y_offset, destination_image=best_image)",
                            "Call"
                        ],
                        [
                            "self.get_pixel_mapping(image, x, x_offset, y, y_offset, destination_image=best_image)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "solution[4:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_301": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "destination_image - pixel",
                            "BinOp"
                        ],
                        [
                            "diff[0].abs().mean(0).view(-1)",
                            "Call"
                        ],
                        [
                            "1 / (1 + diff)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/rfgsm.py": {
        "torch": {
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.alpha * torch.randn_like(images).sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_66": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_48": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + self.alpha * torch.randn_like(images).sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/sinifgsm.py": {
        "torch": {
            "zeros_like_51": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "adv_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(self.m)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_70": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "torch.abs(adv_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_75": {
                "input": {
                    "value": "adv_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(images).detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "adv_grad / self.m",
                            "BinOp"
                        ],
                        [
                            "adv_grad + torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/sparsefool.py": {
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(adv_images).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_104": {
                "variable": {
                    "value": "f_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plane_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_vec.clone().detach().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_0.view(-1) - plane_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_116": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_0.clone().detach()",
                            "Call"
                        ],
                        [
                            "x_i + r_i",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x_i, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_124": {
                "variable": {
                    "value": "f_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plane_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_vec.clone().detach().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_i.view(-1) - plane_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_65": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_image)[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(adv_image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_76": {
                "variable": {
                    "value": "(_, pre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_image)[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(adv_image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "adv_images[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_images[idx]",
                            "Subscript"
                        ],
                        [
                            "self.deepfool(adv_image, label, return_target_labels=True)",
                            "Call"
                        ],
                        [
                            "image + self.lam * (adv_image - image)",
                            "BinOp"
                        ],
                        [
                            "self._linear_solver(image, grad, adv_image)",
                            "Call"
                        ],
                        [
                            "image + (1 + self.overshoot) * (adv_image - image)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_112": {
                "input": {
                    "value": "plane_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_vec.clone().detach().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_i.view(-1) - plane_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_82": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[pre] - fs[label]",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_images[idx]",
                            "Subscript"
                        ],
                        [
                            "self.deepfool(adv_image, label, return_target_labels=True)",
                            "Call"
                        ],
                        [
                            "image + self.lam * (adv_image - image)",
                            "BinOp"
                        ],
                        [
                            "self._linear_solver(image, grad, adv_image)",
                            "Call"
                        ],
                        [
                            "image + (1 + self.overshoot) * (adv_image - image)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "input": {
                    "value": "coord_vec.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_119": {
                "input": {
                    "value": "pert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_k.abs() / coord_vec.abs().max()",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/square.py": {
        "torch": {
            "cross_entropy_77": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "self._get_target_label(x, y)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "self._get_target_label(x, None)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_111": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.rand(shape).to(self.device) - 1",
                            "BinOp"
                        ],
                        [
                            "low + (high - low) * torch.rand(shape).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "x.abs().view(x.shape[0], -1).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_416": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_417": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_153": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_195": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.eps * self.random_choice([x.shape[0], c, 1, w])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_198": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_110": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_114": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_224": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_new, x_curr - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_226": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_240": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_266": {
                "variable": {
                    "value": "delta_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_279": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.normalize(delta_init) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_282": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_307": {
                "variable": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_314": {
                "variable": {
                    "value": "new_deltas_mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_318": {
                "variable": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x_curr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_321": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x_curr.shape[0], c, s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr + self.normalize(delta_curr) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_352": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_224": {
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_329": {
                "input": {
                    "value": "(self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_331": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_330": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/tifgsm.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "self.stacked_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.kernel_generation()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_143": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "img_resize",
                            "variable"
                        ]
                    ]
                },
                "high": {
                    "value": "img_resize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(img_size * self.resize_rate)",
                            "Call"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-nsig, nsig, kernlen)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[rnd, rnd]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_147": {
                "variable": {
                    "value": "pad_top",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "h_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_149": {
                "variable": {
                    "value": "pad_left",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "w_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_152": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=[rnd, rnd], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_left.item(), pad_right.item(), pad_top.item(), pad_bottom.item()]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(grad, stacked_kernel, stride=1, padding='same', groups=3)",
                            "Call"
                        ],
                        [
                            "grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "grad + momentum * self.decay",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "stacked_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stacked_kernel.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_75": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_89": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_93": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(grad, stacked_kernel, stride=1, padding='same', groups=3)",
                            "Call"
                        ],
                        [
                            "grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "grad + momentum * self.decay",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchattacks/attacks/tpgd.py": {
        "torch": {
            "clamp_45": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + 0.001 * torch.randn_like(images)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_44": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_54": {
                "input": {
                    "value": "logit_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(adv_images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "input": {
                    "value": "logit_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(images).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_58": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss(F.log_softmax(logit_adv, dim=1), F.softmax(logit_ori, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images + 0.001 * torch.randn_like(images)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/upgd.py": {
        "torch": {
            "zeros_like_57": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_64": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "(i, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - one_hot_labels) * outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_130": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_labels.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_134": {
                "variable": {
                    "value": "(i, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - one_hot_labels) * outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_135": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "self.model(images)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot_labels.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_like_63": {
                "input": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_82": {
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_131": {
                "input": {
                    "value": "i - j",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_136": {
                "input": {
                    "value": "j - i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(adv_images)",
                            "Call"
                        ],
                        [
                            "grad / torch.mean(torch.abs(grad), dim=(1, 2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "grad + momentum * self.decay",
                            "BinOp"
                        ],
                        [
                            "grad + torch.autograd.grad(cost, adv_images, retain_graph=False, create_graph=False)[0] / self.eot_iter",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_77": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss(adv_images, labels, target_labels)",
                            "Call"
                        ],
                        [
                            "self.get_loss(adv_images, labels)",
                            "Call"
                        ],
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "-(outputs[np.arange(outputs.shape[0]), labels] - outputs[np.arange(outputs.shape[0]), target_labels]) / (outputs_sorted[:, -1] - 0.5 * outputs_sorted[:, -3] - 0.5 * outputs_sorted[:, -4] + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "-(outputs[np.arange(outputs.shape[0]), labels] - outputs_sorted[:, -2] * ind - outputs_sorted[:, -1] * (1.0 - ind)) / (outputs_sorted[:, -1] - outputs_sorted[:, -3] + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "-torch.clamp(i - j, min=0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.clamp(j - i, min=0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images + torch.empty_like(adv_images).uniform_(-self.eps, self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_images, min=0, max=1).detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_128": {
                "n": {
                    "value": "len(outputs[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_133": {
                "n": {
                    "value": "len(outputs[0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/vmifgsm.py": {
        "torch": {
            "zeros_like_55": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "GV_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_74": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "torch.abs(adv_grad + v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "adv_grad + v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_85": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_94": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "neighbor_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_images.detach() + torch.randn_like(images).uniform_(-self.eps * self.beta, self.eps * self.beta)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchattacks/attacks/vnifgsm.py": {
        "torch": {
            "zeros_like_55": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "GV_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_images - images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "variable": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_75": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach()",
                            "Call"
                        ],
                        [
                            "adv_images.detach() + self.alpha * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(images + delta, min=0, max=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "torch.abs(adv_grad + v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "adv_grad + v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_86": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.clone().detach().to(self.device)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_95": {
                "outputs": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "-loss(outputs, target_labels)",
                            "UnaryOp"
                        ],
                        [
                            "loss(outputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "neighbor_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_images.detach() + torch.randn_like(images).uniform_(-self.eps * self.beta, self.eps * self.beta)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}