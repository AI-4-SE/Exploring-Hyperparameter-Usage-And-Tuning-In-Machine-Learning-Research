{
    "agc.py": {
        "tensorflow": {
            "where_41": {
                "variable": {
                    "value": "new_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "grad_norm < max_norm",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "clipped_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads * (max_norm / tf.math.maximum(grad_norm, 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_16": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "[0, 1, 2]",
                            "List"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "maximum_38": {
                "x": {
                    "value": "p_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unitwise_norm(params)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_40": {
                "x": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unitwise_norm(grads)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/mini_vgg.py": {
        "tensorflow": {}
    },
    "models/resnet.py": {
        "tensorflow": {
            "Conv2D_27": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "num_filters * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_83": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Model_121": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.layers.Dense(num_classes, activation='softmax', kernel_initializer='he_normal')(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_108": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_114": {
                "pool_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_116": {
                "units": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_40": {
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNormalization_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_45": {
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Activation_109": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}