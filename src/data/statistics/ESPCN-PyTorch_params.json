{
    "config.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "Stream_203": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_215": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "imgproc.py": {
        "torch": {
            "abs_94": {
                "variable": {
                    "value": "absx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(1, out_length, out_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "out_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_129": {
                "variable": {
                    "value": "left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u - kernel_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "weights_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scale * cubic(distance_to_center * scale)",
                            "BinOp"
                        ],
                        [
                            "cubic(distance_to_center)",
                            "Call"
                        ],
                        [
                            "weights / weights_sum.expand(out_length, p)",
                            "BinOp"
                        ],
                        [
                            "weights.narrow(1, 1, p - 2)",
                            "Call"
                        ],
                        [
                            "weights.narrow(1, 0, p - 2)",
                            "Call"
                        ],
                        [
                            "weights.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "weights_zero_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_212": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_217": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_234": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_239": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_139": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "p - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.ceil(kernel_width) + 2",
                            "BinOp"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.feature_maps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, (5, 5), (1, 1), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.sub_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 1 * upscale_factor ** 2, (3, 3), (1, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * upscale_factor ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PixelShuffle_41": {
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SummaryWriter_81": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join('samples', 'logs', config.exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradScaler_84": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TrainValidImageDataset(config.train_image_dir, config.image_size, config.upscale_factor, 'Train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TrainValidImageDataset(config.valid_image_dir, config.image_size, config.upscale_factor, 'Valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TestImageDataset(config.test_lr_image_dir, config.test_hr_image_dir, config.upscale_factor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "variable": {
                    "value": "psnr_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_155": {
                "variable": {
                    "value": "pixel_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.model_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.model_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.model_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "config.model_nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_171": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "define_optimizer(model)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=config.model_lr, momentum=config.model_momentum, weight_decay=config.model_weight_decay, nesterov=config.model_nesterov)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.lr_scheduler_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.lr_scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'best_psnr': best_psnr, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(samples_dir, f'epoch_{epoch + 1}.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_218": {
                "input": {
                    "value": "1.0 / psnr_criterion(sr, hr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_266": {
                "input": {
                    "value": "1.0 / psnr_criterion(sr, hr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "validate.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_82": {
                "input": {
                    "value": "1.0 / torch.mean((sr_y_tensor - hr_y_tensor) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_82": {
                "input": {
                    "value": "(sr_y_tensor - hr_y_tensor) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}