{
    "easydl/__init__.py": {
        "tensorflow": {}
    },
    "current/data.py": {
        "torch": {
            "WeightedRandomSampler_114": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[class_weight[x] for x in source_train_ds.labels]",
                            "ListComp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(source_train_ds.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "source_train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "source_train_dl2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform2, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "source_train_dl3",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform3, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "source_train_dl4",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform4, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "source_train_dl5",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform5, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "source_test_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=test_transform, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "target_train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=target_file, path_prefix=dataset.prefixes[args.data.dataset.target], transform=train_transform, filter=lambda x: x in target_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "target_test_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=target_file, path_prefix=dataset.prefixes[args.data.dataset.target], transform=test_transform, filter=lambda x: x in target_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "current/main.py": {
        "torch": {
            "SGD_240": {
                "params": {
                    "value": "feature_extractor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_243": {
                "params": {
                    "value": "classifier.bottleneck.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_249": {
                "params": {
                    "value": "fc_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': classifier.fc.parameters()}, {'params': classifier.fc2.parameters()}, {'params': classifier.fc3.parameters()}, {'params': classifier.fc4.parameters()}, {'params': classifier.fc5.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.train.lr * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_252": {
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "easydl/common/datasets.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "easydl/common/gpuutils.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "world_size * N_per_process",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_available_GPUs(world_size * N_per_process)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_60": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(world_size * N_per_process, dtype=torch.int).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(device_ids, dtype=torch.int).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "easydl/pytorch/utils.py": {
        "torch": {
            "Softmax_44": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, leaky]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.matrix * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_221": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), *self.shape_without_batchsize)",
                            "Call"
                        ],
                        [
                            "x.resize(x.size(0), 1, x.size(1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.matrix * x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_259": {
                "input": {
                    "value": "predict_prob + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_260": {
                "input": {
                    "value": "instance_level_weight * entropy * class_level_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "new/datasets.py": {
        "torch": {
            "DataLoader_177": {
                "variable": {
                    "value": "esem_loader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageList(root=args.root, num_class=len(filter_class), data_list_file=args.source, filter_class=filter_class, transform=train_transform1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "esem_loader2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageList(root=args.root, num_class=len(filter_class), data_list_file=args.source, filter_class=filter_class, transform=train_transform2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "esem_loader3",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageList(root=args.root, num_class=len(filter_class), data_list_file=args.source, filter_class=filter_class, transform=train_transform3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "esem_loader4",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageList(root=args.root, num_class=len(filter_class), data_list_file=args.source, filter_class=filter_class, transform=train_transform4)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "esem_loader5",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageList(root=args.root, num_class=len(filter_class), data_list_file=args.source, filter_class=filter_class, transform=train_transform5)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "new/lib.py": {
        "torch": {
            "unsqueeze_180": {
                "variable": {
                    "value": "y_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_181": {
                "variable": {
                    "value": "y_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "y_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "y_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "variable": {
                    "value": "y_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_5, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_1, y_2, y_3, y_4, y_5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_186": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((y_1, y_2, y_3, y_4, y_5), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_187": {
                "variable": {
                    "value": "consistency",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.std(c, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "entropy1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_1 * torch.log(y_1 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "entropy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_2 * torch.log(y_2 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "entropy3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_3 * torch.log(y_3 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_195": {
                "variable": {
                    "value": "entropy4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_4 * torch.log(y_4 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_196": {
                "variable": {
                    "value": "entropy5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_5 * torch.log(y_5 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_204": {
                "variable": {
                    "value": "entropy1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_1 * torch.log(y_1 + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_211": {
                "variable": {
                    "value": "(conf_1, indice_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_212": {
                "variable": {
                    "value": "(conf_2, indice_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_213": {
                "variable": {
                    "value": "(conf_3, indice_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_214": {
                "variable": {
                    "value": "(conf_4, indice_4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_4, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_215": {
                "variable": {
                    "value": "(conf_5, indice_5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y_5, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_192": {
                "input": {
                    "value": "y_1 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_193": {
                "input": {
                    "value": "y_2 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_194": {
                "input": {
                    "value": "y_3 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_195": {
                "input": {
                    "value": "y_4 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_196": {
                "input": {
                    "value": "y_5 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_204": {
                "input": {
                    "value": "y_1 + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "new/main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_source_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_source_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(root=args.root, data_list_file=args.source, filter_class=source_classes, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_target_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_target_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(root=args.root, data_list_file=args.target, filter_class=target_classes, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(root=args.root, data_list_file=args.target, filter_class=target_classes, transform=val_tranform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.get_parameters() + domain_discri.get_parameters()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_93": {
                "variable": {
                    "value": "optimizer_esem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "esem.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "variable": {
                    "value": "optimizer_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "esem.get_parameters() + classifier.get_parameters()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(source_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_190": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s.detach(), index)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s.to(device)",
                            "Call"
                        ],
                        [
                            "labels_s.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_236": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s.detach(), index)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s.to(device)",
                            "Call"
                        ],
                        [
                            "labels_s.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_401": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s1, index=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s1.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_408": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s2, index=2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s2.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_415": {
                "variable": {
                    "value": "loss3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s3, index=3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s3.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_422": {
                "variable": {
                    "value": "loss4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s4, index=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s4.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_429": {
                "variable": {
                    "value": "loss5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "esem(f_s5, index=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_s5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_s5.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[source_class_weight[i] for i in labels_s]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_269": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(output, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "all_confidece",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_confidece))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_confidece))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_283": {
                "data": {
                    "value": "all_consistency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_consistency))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_consistency))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_284": {
                "data": {
                    "value": "all_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_entropy))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_entropy))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_353": {
                "data": {
                    "value": "all_confidece",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_confidece))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_confidece))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_354": {
                "data": {
                    "value": "all_consistency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_consistency))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_consistency))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_355": {
                "data": {
                    "value": "all_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_entropy))",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "norm(torch.tensor(all_entropy))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_269": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output, -1) / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_330": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output, -1) / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "new/model.py": {
        "torch": {
            "flatten_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self._out_features)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.layer1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.layer2(x)))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_76": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_153": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "d_label_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(f_s.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "d_label_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(f_t.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "source_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_s * self.bce(d_s, d_label_s).view(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "target_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_t * self.bce(d_t, d_label_t).view(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(backbone.out_features, bottleneck_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_176": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._features_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "(f_s, f_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "backbone.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_217": {
                "num_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_255": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_257": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_259": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_261": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_263": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "source_only/data.py": {
        "torch": {
            "WeightedRandomSampler_115": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[class_weight[x] for x in source_train_ds.labels]",
                            "ListComp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(source_train_ds.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "source_train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "source_train_dl2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform2, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "source_train_dl3",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform3, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "source_train_dl4",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform4, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "source_train_dl5",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_train_ds5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=train_transform5, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(source_weights, len(source_train_ds.labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "source_test_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=source_file, path_prefix=dataset.prefixes[args.data.dataset.source], transform=test_transform, filter=lambda x: x in source_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "target_train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=target_file, path_prefix=dataset.prefixes[args.data.dataset.target], transform=train_transform, filter=lambda x: x in target_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.data.dataloader.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "target_test_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileListDataset(list_path=target_file, path_prefix=dataset.prefixes[args.data.dataset.target], transform=test_transform, filter=lambda x: x in target_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.data.dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "source_only/main.py": {
        "torch": {
            "SGD_160": {
                "params": {
                    "value": "feature_extractor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_163": {
                "params": {
                    "value": "classifier.bottleneck.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "params": {
                    "value": "fc_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': classifier.fc.parameters()}, {'params': classifier.fc2.parameters()}, {'params': classifier.fc3.parameters()}, {'params': classifier.fc4.parameters()}, {'params': classifier.fc5.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.train.lr * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_172": {
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}