{
    "mnist/Mnist.py": {
        "sklearn": {
            "StandardScaler_95": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_264": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_304": {
                "variable": {
                    "value": "best_clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / best_Lambda / len(Xtr)",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "best_Gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gamma",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "Gamma",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "10 ** LogGamma[1]",
                            "BinOp"
                        ],
                        [
                            "10.0 ** LogGamma[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "confusion_matrix_308": {
                "variable": {
                    "value": "C_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Ytest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', test_size)",
                            "Call"
                        ],
                        [
                            "get_train_test_data(train_size=m, test_size=int(m / 3))",
                            "Call"
                        ],
                        [
                            "get_train_test_data(train_size=m, test_size=int(m / 3))",
                            "Call"
                        ],
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', -1)",
                            "Call"
                        ],
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', -1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ypred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(Xtesttil)",
                            "Call"
                        ],
                        [
                            "clf.predict(Xtesttil)",
                            "Call"
                        ],
                        [
                            "best_clf.predict(Xtest)",
                            "Call"
                        ],
                        [
                            "best_clf.predict(Xtest)",
                            "Call"
                        ]
                    ]
                }
            },
            "StandardScaler_347": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_406": {
                "variable": {
                    "value": "C_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Ytest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', test_size)",
                            "Call"
                        ],
                        [
                            "get_train_test_data(train_size=m, test_size=int(m / 3))",
                            "Call"
                        ],
                        [
                            "get_train_test_data(train_size=m, test_size=int(m / 3))",
                            "Call"
                        ],
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', -1)",
                            "Call"
                        ],
                        [
                            "read_MNIST_data('data/t10k-labels.idx1-ubyte', -1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Ypred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(Xtesttil)",
                            "Call"
                        ],
                        [
                            "clf.predict(Xtesttil)",
                            "Call"
                        ],
                        [
                            "best_clf.predict(Xtest)",
                            "Call"
                        ],
                        [
                            "best_clf.predict(Xtest)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGDClassifier_130": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** LogLambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** LogLambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGDClassifier_203": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** LogLambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** LogLambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/archives/AppOptSample.py": {
        "sklearn": {
            "SVC_98": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** logclist[idx]",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rff.gamma_est(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGDClassifier_138": {
                "variable": {
                    "value": "rfsvm",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10 ** 6 / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGDClassifier_169": {
                "variable": {
                    "value": "rfsvm_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/archives/HyperRfsvmTest.py": {
        "sklearn": {
            "train_test_split_22": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/archives/LearningRate.py": {
        "sklearn": {
            "SGDClassifier_110": {
                "variable": {
                    "value": "rfsvm",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10 ** 6 / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGDClassifier_143": {
                "variable": {
                    "value": "rfsvm_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/archives/RegRFSVMCompare.py": {
        "sklearn": {
            "train_test_split_28": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_38": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** logclist[idx]",
                            "BinOp"
                        ],
                        [
                            "10 ** logclist[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rff.gamma_est(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_52": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rff.gamma_est(X_train)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGDClassifier_58": {
                "variable": {
                    "value": "clfl1",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1 / C / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGDClassifier_63": {
                "variable": {
                    "value": "clfl2",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1 / C / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "syndata/AppOptSample.py": {
        "sklearn": {
            "SVC_98": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** logclist[idx]",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rff.gamma_est(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGDClassifier_138": {
                "variable": {
                    "value": "rfsvm",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10 ** 6 / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGDClassifier_169": {
                "variable": {
                    "value": "rfsvm_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "syndata/GenData.py": {
        "sklearn": {
            "train_test_split_17": {
                "variable": {
                    "value": "(X_train_p, X_test, Y_train_p, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_para['testsize']",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "syndata/LearningRate.py": {
        "sklearn": {
            "SGDClassifier_111": {
                "variable": {
                    "value": "rfsvm",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10 ** 6 / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGDClassifier_144": {
                "variable": {
                    "value": "rfsvm_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ],
                        [
                            "10 ** loglambda[jdx]",
                            "BinOp"
                        ]
                    ]
                },
                "tol": {
                    "value": "10 ** (-5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/ResultPlot.py": {
        "tensorflow": {}
    },
    "mnist/archives/tfRFLR_estimator_api.py": {
        "tensorflow": {
            "random_normal_initializer_13": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "tf.sqrt(Gamma.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_components']",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=tf.sqrt(Gamma.astype(np.float32)))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_21": {
                "variable": {
                    "value": "cos_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=features, units=N, use_bias=False, kernel_initializer=initializer, name='Gaussian')",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_22": {
                "variable": {
                    "value": "sin_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=features, units=N, use_bias=False, kernel_initializer=initializer, name='Gaussian')",
                            "Call"
                        ]
                    ]
                }
            },
            "div_23": {
                "variable": {
                    "value": "RF_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([cos_layer, sin_layer], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(N * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_26": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "RF_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.concat([cos_layer, sin_layer], axis=1), tf.sqrt(N * 1.0))",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=Lambda)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_classes']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_29": {
                "variable": {
                    "value": "out_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "hinge_loss_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_49": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices=tf.cast(labels, tf.uint8), depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inverse_time_decay_57": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "EstimatorSpec_76": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.hinge_loss(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': tf.metrics.accuracy(labels=labels, predictions=predictions['classes'])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "numpy_input_fn_94": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': X.astype(np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_106": {
                "variable": {
                    "value": "pred_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': X.astype(np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_117": {
                "variable": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': X.astype(np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_23": {
                "values": {
                    "value": "[cos_layer, sin_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_23": {
                "x": {
                    "value": "N * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_34": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "EstimatorSpec_40": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classes': tf.argmax(input=logits, axis=1), 'probabilities': tf.nn.softmax(logits, name='softmax_tensor')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_70": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.hinge_loss(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss=loss, global_step=tf.train.get_global_step(), var_list=out_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_74": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'classes': tf.argmax(input=logits, axis=1), 'probabilities': tf.nn.softmax(logits, name='softmax_tensor')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "sqrt_14": {
                "x": {
                    "value": "Gamma.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mnist/rff.py": {
        "tensorflow": {
            "Graph_149": {
                "variable": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_150": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "global_step_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "global_step_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "probab",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=1, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_228": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_239": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_251": {
                "variable": {
                    "value": "(logits, probab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "key": {
                    "value": "Probab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_289": {
                "variable": {
                    "value": "in_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_291": {
                "variable": {
                    "value": "out_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_193": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "tf.sqrt(Gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_196": {
                "variable": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, d], name='features')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "Call"
                        ],
                        [
                            "self._N",
                            "Attribute"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=tf.sqrt(Gamma))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_201": {
                "variable": {
                    "value": "cos_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x, units=N, use_bias=False, kernel_initializer=initializer, name='Gaussian')",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_202": {
                "variable": {
                    "value": "sin_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x, units=N, use_bias=False, kernel_initializer=initializer, name='Gaussian')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_203": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cos_layer, sin_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_204": {
                "variable": {
                    "value": "RF_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([cos_layer, sin_layer], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(N * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_220": {
                "name": {
                    "value": "Probab",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=1, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_221": {
                "name": {
                    "value": "outer weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._graph.get_tensor_by_name('Logits/kernel:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_225": {
                "name": {
                    "value": "Probab",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "probab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_237": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.hinge_loss(labels=y, logits=logits) + regularizer",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.reduce_mean(loss_log), regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_240": {
                "name": {
                    "value": "Summary",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.merge_all()",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Summary')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_298": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_309": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_321": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_332": {
                "variable": {
                    "value": "self._train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tmp",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_192": {
                "name": {
                    "value": "RF_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_205": {
                "name": {
                    "value": "inner weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._graph.get_tensor_by_name('Gaussian/kernel:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_210": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "RF_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(concated, tf.sqrt(N * 1.0))",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=Lambda)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_217": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "RF_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(concated, tf.sqrt(N * 1.0))",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=Lambda)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self._classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_233": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=[None], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self._classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_234": {
                "variable": {
                    "value": "loss_log",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices=y, depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=1, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_236": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(loss_log)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.get_regularization_loss(scope='Logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_293": {
                "key": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "key": {
                    "value": "Summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_204": {
                "x": {
                    "value": "N * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hinge_loss_230": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=[None], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=1, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_194": {
                "x": {
                    "value": "Gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gamma",
                            "Call"
                        ],
                        [
                            "self._Gamma",
                            "Attribute"
                        ],
                        [
                            "Gamma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_236": {
                "input_tensor": {
                    "value": "loss_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_266": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=1, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=RF_layer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=Lambda), units=n_classes, name='Logits')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('Probab')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/test.py": {
        "tensorflow": {}
    }
}