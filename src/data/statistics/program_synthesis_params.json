{
    "program_synthesis/common/tools/reporter.py": {
        "tensorflow": {
            "FileWriter_22": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_25": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/dataset/dataset.py": {
        "torch": {}
    },
    "program_synthesis/algolisp/eval.py": {
        "torch": {
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/models/base.py": {
        "torch": {
            "arange_37": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "t_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_199": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.optimizer_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_204": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/models/modules/encoders.py": {
        "torch": {
            "Embedding_48": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_49": {
                "variable": {
                    "value": "self.input_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_51": {
                "variable": {
                    "value": "self.output_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.io_count * self.num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "aggregated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aggregated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.mean(t, dim=0) for t in all_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(aggregated_inputs, dim=0).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "inp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregated_inputs, out_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "proj_inputs * self.num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "remove_none([text_enc, io_enc])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_80": {
                "input": {
                    "value": "self.mixer(inp_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "num_directions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if self.bidirectional else 1",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_74": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/models/prepare_spec.py": {
        "torch": {
            "pack_padded_sequence_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy_to_tensor(lists_to_numpy(lists_sorted, stoi, 0), cuda, volatile)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths(lists_sorted)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/models/seq2code_model.py": {
        "torch": {}
    },
    "program_synthesis/algolisp/models/seq2seq_model.py": {
        "torch": {
            "stack_72": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "enc_to_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.empty_candidate_code_hidden] * batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_73": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memory_to_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(code_memory[0])] * batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "code_memory[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/algolisp/train.py": {
        "torch": {
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/models/beam_search.py": {
        "torch": {
            "log_softmax_90": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn.view(batch_size, -1, attn.size(1)) for attn in attn_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "seq_beam_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq_indices, beam_indices.view(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "seq_beam_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_seq_indices, beam_indices.view(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/attention.py": {
        "torch": {
            "Dropout_63": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_64": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(context, query_proj).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(repeat, feature_dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_heads * value_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, bsz, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.query_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "values_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "query_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_ins[i](input_).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(context, query_proj).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wc, input_, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn.unsqueeze(1), context).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([wc, input_, query], 1)",
                            "Call"
                        ],
                        [
                            "self.linear_outs[i](wc)",
                            "Call"
                        ],
                        [
                            "torch.tanh(wc)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_93": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.repeat(self.repeat, 1, 1).view(self.repeat, -1, dim2)",
                            "Call"
                        ],
                        [
                            "x.view(1, -1, dim2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_mem_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "num_mem_units + 2 * num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_138": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(outputs, bsz, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/decoders.py": {
        "torch": {
            "softmax_16": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_17": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits.squeeze(0), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size + args.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(1, batch_size, self.num_units), volatile=True)",
                            "Call"
                        ],
                        [
                            "hidden.cuda()",
                            "Call"
                        ],
                        [
                            "hidden.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "hidden.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(hidden, self.args.decoder_dropout)",
                            "Call"
                        ],
                        [
                            "[hidden for _ in range(self.args.num_decoder_layers)]",
                            "ListComp"
                        ],
                        [
                            "BeamSearchState([hidden for _ in range(self.args.num_decoder_layers)])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(embed, self.args.decoder_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(preds, self.args.decoder_dropout)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_166": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(preds, self.args.decoder_dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, prev_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * args.num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, context.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory, newmem.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_129": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + args.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.uproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mem_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros(attn_mask.size(0), 1).type(torch.ByteTensor)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_148": {
                "input": {
                    "value": "memory[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expected.size(0)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "hidden.size(1)",
                            "Call"
                        ],
                        [
                            "hidden.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expected.size(0)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "hidden.size(1)",
                            "Call"
                        ],
                        [
                            "hidden.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_106": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_units",
                            "variable"
                        ],
                        [
                            "input_size or args.num_units",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "*size": {
                    "value": "enc.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "enc.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "*size": {
                    "value": "attn_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/embedding.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(position_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * i / embedding_size) for i in range(embedding_size)] for pos in range(from_length, to_length)], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "program_synthesis/common/modules/encoders.py": {
        "torch": {
            "GRU_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.encoder_dropout if args.num_encoder_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "args.encoder_bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_13": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/layer_norm.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_23": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/seq2seq.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.input_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.output_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/slicing_joining.py": {
        "torch": {
            "index_select_180": {
                "variable": {
                    "value": "ordered_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "_array_to_tensor(forward_indices, cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_181": {
                "variable": {
                    "value": "packed_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ordered_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sequences, dim=0, index=_array_to_tensor(forward_indices, cuda))",
                            "Call"
                        ],
                        [
                            "[sequences[i] for i in forward_indices]",
                            "ListComp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted(seq_lengths, key=lambda x: -x)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_106": {
                "input": {
                    "value": "pad_sequence(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "[v.size(0) for v in sequences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cumsum_143": {
                "variable": {
                    "value": "split_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(split_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_183": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "_array_to_tensor(reverse_indices, cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_203": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "_array_to_tensor(reverse_indices, cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/slicing_joining_test.py": {
        "torch": {
            "GRU_47": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "total_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 if bidirectional else 1) * num_layers",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/modules/transformer.py": {
        "torch": {
            "from_numpy_82": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask).clone()",
                            "Call"
                        ],
                        [
                            "subsequent_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_82": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_134": {
                "variable": {
                    "value": "dec_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(dec_input)",
                            "Call"
                        ],
                        [
                            "F.dropout(dec_embed, self.dropout_p)",
                            "Call"
                        ],
                        [
                            "self.embed.sample(dec_input.unsqueeze(1), position)",
                            "Call"
                        ],
                        [
                            "F.dropout(dec_embed, self.dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "decoder_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(dec_embed, encoder_result, attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(decoder_result, self.dropout_p)",
                            "Call"
                        ],
                        [
                            "F.dropout(decoder_result, self.dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_result)",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_result)",
                            "Call"
                        ],
                        [
                            "[[] for _ in range(bsz)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "variable": {
                    "value": "dec_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(dec_input)",
                            "Call"
                        ],
                        [
                            "F.dropout(dec_embed, self.dropout_p)",
                            "Call"
                        ],
                        [
                            "self.embed.sample(dec_input.unsqueeze(1), position)",
                            "Call"
                        ],
                        [
                            "F.dropout(dec_embed, self.dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "decoder_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(dec_embed, encoder_result, attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(decoder_result, self.dropout_p)",
                            "Call"
                        ],
                        [
                            "F.dropout(decoder_result, self.dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_result)",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_result)",
                            "Call"
                        ],
                        [
                            "[[] for _ in range(bsz)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_196": {
                "input": {
                    "value": "encoder_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(enc_embed)",
                            "Call"
                        ],
                        [
                            "self.encode(enc_input)",
                            "Call"
                        ],
                        [
                            "self.encode(enc_input)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "query_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_state[idx], query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "tensors": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit",
                            "variable"
                        ],
                        [
                            "unit",
                            "variable"
                        ],
                        [
                            "unit",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_units",
                            "variable"
                        ],
                        [
                            "num_units",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/common/tools/saver.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "path + '-{:08d}'.format(step)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_170": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "path + '-{:08d}'.format(step)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "{'model': state_dict, 'optimizer': optimizer.state_dict(), 'step': step}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}-{}'.format(path, step_padded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "path + '-{:08d}'.format(step)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "path + '-{:08d}'.format(step)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "program_synthesis/conala/train.py": {
        "torch": {
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/arguments.py": {
        "torch": {
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/dataset/dataset.py": {
        "torch": {}
    },
    "program_synthesis/karel/dataset/edit_data_loader.py": {
        "torch": {
            "RandomSampler_73": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "karel_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_77": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "karel_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_130": {
                "data_source": {
                    "value": "karel_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/eval.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/eval2.py": {
        "torch": {
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/infer.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/base.py": {
        "torch": {
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/karel_agent.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "self.dataset_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "input_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t[0] for t in tasks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "output_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t[1] for t in tasks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.action_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.action_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[task_state, current_code_enc.state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_109": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.prepare_states([ex.state for ex in batch])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/karel_edit_model.py": {
        "torch": {}
    },
    "program_synthesis/karel/models/modules/karel.py": {
        "torch": {
            "Embedding_110": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_111": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256 + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_embed, io_embed_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embed, io_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_194": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_219": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "512 + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.trace_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 + 512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_359": {
                "variable": {
                    "value": "self.initial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ],
                        [
                            "in_channels + self.event_emb_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(time, 3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((time - 1) / 2, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.BatchNorm3d(c), nn.ReLU(), nn.Conv3d(in_channels=c, out_channels=c, kernel_size=k, padding=p), nn.BatchNorm3d(c), nn.ReLU(), nn.Conv3d(in_channels=c, out_channels=c, kernel_size=k, padding=p)) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_431": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_438": {
                "variable": {
                    "value": "self.initial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_452": {
                "variable": {
                    "value": "self.grid_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "variable": {
                    "value": "self.success_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.action_code_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_456": {
                "variable": {
                    "value": "self.cond_code_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256 / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_459": {
                "variable": {
                    "value": "self.cond_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_521": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_522": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256 + 512 + (512 if self.has_memory else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_537": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + (512 if self.has_memory else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size + self.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_641": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_841": {
                "variable": {
                    "value": "self.op_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 + 2 * vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_842": {
                "variable": {
                    "value": "self.last_token_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_843": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "512 + 512 + (512 if self.use_code_memory or self.use_code_attn else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_848": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + (512 if self.use_code_attn else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 + 2 * vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_534": {
                "variable": {
                    "value": "self.context_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_546": {
                "variable": {
                    "value": "self.state_h_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(512 * self.num_state_inputs, 256) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_549": {
                "variable": {
                    "value": "self.state_c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(512 * self.num_state_inputs, 256) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_873": {
                "variable": {
                    "value": "self.state_h_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(512, 256) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_875": {
                "variable": {
                    "value": "self.state_c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(512, 256) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_958": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(decoder_output)",
                            "Call"
                        ],
                        [
                            "self.out(decoder_output)",
                            "Call"
                        ],
                        [
                            "self.out(emb_for_logits)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.out(dec_output)",
                            "Call"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.out(dec_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "512 + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(selected_code_memory, selected_trace_memory)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "code_memory.mem.ps.data.shape[0] * code_update_info.max_trace_refs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if self._cuda else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.event_emb_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.event_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_720": {
                "*size": {
                    "value": "*context_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_1190": {
                "variable": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_362": {
                "*args": {
                    "value": "nn.BatchNorm3d(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_400": {
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.initial_conv(grids)",
                            "Call"
                        ],
                        [
                            "enc + block(enc)",
                            "BinOp"
                        ],
                        [
                            "enc.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc(enc.contiguous().view(enc.shape[0], enc.shape[1], -1))",
                            "Call"
                        ],
                        [
                            "self.initial_conv(inp)",
                            "Call"
                        ],
                        [
                            "enc + block(enc)",
                            "BinOp"
                        ],
                        [
                            "self.grid_fc(enc.view(enc.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_441": {
                "*args": {
                    "value": "nn.BatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_972": {
                "tensors": {
                    "value": "[d, io_embed_flat[dec_data.io_embed_indices]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1169": {
                "*size": {
                    "value": "*context_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm3d_363": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_365": {
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(time, 3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((time - 1) / 2, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "BatchNorm3d_367": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_369": {
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(time, 3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((time - 1) / 2, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "BatchNorm2d_442": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_446": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_547": {
                "in_features": {
                    "value": "512 * self.num_state_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_549": {
                "in_features": {
                    "value": "512 * self.num_state_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_752": {
                "tensors": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_874": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_876": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "[t, code_trace_update]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/modules/karel_common.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.input_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=15, out_channels=32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.output_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=15, out_channels=32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_enc, output_enc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.initial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)) for _ in range(args.karel_io_conv_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.grid_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_grid, output_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.initial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.grid_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.initial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=15, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.grid_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 18 * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "nn.BatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "nn.BatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/modules/karel_edit.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.query_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "key_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.bos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_123": {
                "variable": {
                    "value": "self.choice_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_actions + num_block_types + num_conds + num_repeats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.initial_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "logits_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 + (512 if self.use_code_attn else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_actions + num_block_types + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.cond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "logits_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 + (512 if self.use_code_attn else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_conds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mutation.CONDS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.repeat_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "logits_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 + (512 if self.use_code_attn else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mutation.REPEAT_COUNTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_146": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "lstm_input + 512",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.proj_code_for_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_307": {
                "input": {
                    "value": "torch.stack((v1, v2, v3, v4, v5), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_307": {
                "tensors": {
                    "value": "(v1, v2, v3, v4, v5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "*size": {
                    "value": "*context_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/modules/karel_trace.py": {
        "torch": {
            "LSTM_87": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "enc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 + 512",
                            "BinOp"
                        ],
                        [
                            "enc_input_size + 256",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_95": {
                "variable": {
                    "value": "self.action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_204": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(size, int(dim)) for (size, dim) in zip(sizes, dims)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LSTM_283": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "enc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 + 512",
                            "BinOp"
                        ],
                        [
                            "enc_input_size + 256",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.code_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_355": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256 + (512 if self.use_io_embed else 0) + (512 if self.use_trace_memory else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + (512 if self.use_trace_memory else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(dec_output.data)",
                            "Call"
                        ],
                        [
                            "self.out(dec_output)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.out(emb_for_logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "torch.stack(values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_254": {
                "variable": {
                    "value": "self.action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(action_to_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "variable": {
                    "value": "self.cond_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.cond_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.grid_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.grid_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "fields.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_205": {
                "num_embeddings": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "int(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "*size": {
                    "value": "*context_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/modules/utils.py": {
        "torch": {
            "from_numpy_61": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(tensor.shape[dim]).repeat(repeats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_124": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_67": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(tensor.shape[dim]).repeat(repeats))",
                            "Call"
                        ],
                        [
                            "Variable(index)",
                            "Call"
                        ],
                        [
                            "index.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.state_h_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_hidden_size * num_directions, out_hidden_size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.state_c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_hidden_size * num_directions, out_hidden_size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LSTM_210": {
                "variable": {
                    "value": "self.process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.initial_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_72": {
                "input": {
                    "value": "torch.sum(torch.exp(tensor - m))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "*init_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "to_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for item in items if item is not None]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_72": {
                "input": {
                    "value": "torch.exp(tensor - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_72": {
                "input": {
                    "value": "tensor - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "in_hidden_size * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "in_hidden_size * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/karel/models/prepare_spec.py": {
        "torch": {
            "PackedSequence_196": {
                "data": {
                    "value": "fn(ps.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "ps.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_188": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy_to_tensor(lists_to_numpy(lists_sorted, stoi, 0), cuda, volatile)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths(lists_sorted)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PackedSequence_148": {
                "data": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "batch_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_bounds_for_packing(sorted_lengths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "program_synthesis/karel/train.py": {
        "torch": {
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/base.py": {
        "torch": {
            "arange_23": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "t_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.optimizer_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/decoders.py": {
        "torch": {
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size + args.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(hidden, self.args.decoder_dropout)",
                            "Call"
                        ],
                        [
                            "[hidden for _ in range(self.args.num_decoder_layers)]",
                            "ListComp"
                        ],
                        [
                            "BeamSearchState([hidden for _ in range(self.args.num_decoder_layers)])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(data.replace_pad_with_end(outputs))",
                            "Call"
                        ],
                        [
                            "F.dropout(embed, self.args.decoder_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(preds, self.args.decoder_dropout)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(preds, self.args.decoder_dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + args.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "input": {
                    "value": "memory[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_46": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_units",
                            "variable"
                        ],
                        [
                            "input_size or args.num_units",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/eval.py": {
        "torch": {
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/pointer_prepare.py": {
        "torch": {}
    },
    "program_synthesis/naps/examples/seq2seq/pointer_seq2seq.py": {
        "torch": {
            "Embedding_60": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_code_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_62": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.contexts_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.states_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.num_decoder_layers * self.args.num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.input_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_75": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_109": {
                "variable": {
                    "value": "logistics",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logistics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(decoder_logits)",
                            "Call"
                        ],
                        [
                            "logistics * switch",
                            "BinOp"
                        ],
                        [
                            "F.pad(logistics, (0, self.args.num_placeholders))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.args.num_placeholders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions.view(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attentions, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(contexts, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(chain(*states))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "batch_size * code_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "expanded_arange",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.word_code_vocab_size + self.args.num_placeholders",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "expanded_arange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_101": {
                "variable": {
                    "value": "attn_logistics_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_logistics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "location_logistics(attentions, padded_texts, self.word_code_vocab_size + self.args.num_placeholders)",
                            "Call"
                        ],
                        [
                            "attn_logistics * (1.0 - switch)",
                            "BinOp"
                        ],
                        [
                            "attn_logistics.div(attn_logistics_norm.expand_as(attn_logistics))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_155": {
                "input": {
                    "value": "joint_logistics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._joint_logistics(logits, attentions, padded_texts, contexts, states, inputs, vocab_sizes)",
                            "Call"
                        ],
                        [
                            "self._joint_logistics(logits.unsqueeze(1), attention.unsqueeze(1), padded_texts, context.unsqueeze(1), states, input_.unsqueeze(1), vocab_sizes)",
                            "Call"
                        ],
                        [
                            "joint_logistics.clamp(min=1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_155": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/pointer_seq2seq_model.py": {
        "torch": {
            "NLLLoss_20": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "data.PAD_TOKEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "logistics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode_(masked_padded_codes, padded_texts, hidden, memory, vocab_sizes)",
                            "Call"
                        ],
                        [
                            "logistics.clamp(min=1e-08)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/pointer_seq_encoder.py": {
        "torch": {
            "GRU_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.encoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_28": {
                "variable": {
                    "value": "masked_packed_texts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_padded_texts",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "text_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_33": {
                "variable": {
                    "value": "(memory, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.encoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "directions * args.num_encoder_layers * self.num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "program_synthesis/naps/examples/seq2seq/test_pointer_seq2seq.py": {
        "torch": {}
    },
    "program_synthesis/naps/examples/seq2seq/train.py": {
        "torch": {
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}