{
    "overparam/computation_graph.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "layer_dict[f{i}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleDict_108": {
                "modules": {
                    "value": "layer_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "overparam/conv_helpers.py": {
        "torch": {
            "interpolate_17": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "identity[:, :, p:in_sz - p, p:in_sz - p]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(identity, scale_factor=1 / scale, mode='nearest')",
                            "Call"
                        ],
                        [
                            "pad_to(identity, inputs)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_30": {
                "input": {
                    "value": "src_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[pad_l, pad_r, pad_t, pad_b]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_35": {
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[p] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/deprecated/cardinal_layer.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers + [layer(in_dim, out_dim, *args, **kwargs)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_33": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feats + [f(x)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(feats)",
                            "Call"
                        ],
                        [
                            "feats.sum(0)",
                            "Call"
                        ],
                        [
                            "feats / math.sqrt(self.cardinality)",
                            "BinOp"
                        ],
                        [
                            "(x + feats) / math.sqrt(self.cardinality + 1)",
                            "BinOp"
                        ],
                        [
                            "(conv2d_identity(x, feats) + feats) / math.sqrt(self.cardinality + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.weight.data for w in self.layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.bias.data for w in self.layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "w.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_like_62": {
                "input": {
                    "value": "w.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/deprecated/graph_linear.py": {
        "torch": {
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "overparam/deprecated/graph_rules.py": {
        "torch": {
            "zeros_250": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "new_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_w.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "curr_w.flip(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_w.shape[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_98": {
                "variable": {
                    "value": "new_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_186": {
                "n": {
                    "value": "prev_w.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_253": {
                "input": {
                    "value": "var.unsqueeze(1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_254": {
                "input": {
                    "value": "var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_261": {
                "input": {
                    "value": "var.view(-1, 1, 1, 1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_262": {
                "input": {
                    "value": "var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_188": {
                "input": {
                    "value": "prev_w.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/flatten.py": {
        "torch": {}
    },
    "overparam/graph_methods.py": {
        "torch": {
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_156": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_120": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "weights[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "weight_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_part.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "m.flip(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.shape[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_145": {
                "variable": {
                    "value": "weight_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_123": {
                "input": {
                    "value": "weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/graph_minimizers.py": {
        "torch": {
            "Parameter_191": {
                "variable": {
                    "value": "layer_dict[edge[layer]][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "layer2.weight @ layer1.bias",
                            "BinOp"
                        ],
                        [
                            "layer2.weight.sum(2).sum(2) @ layer1.bias",
                            "BinOp"
                        ],
                        [
                            "bias + layer2.bias",
                            "BinOp"
                        ],
                        [
                            "layer.bias",
                            "Attribute"
                        ],
                        [
                            "(_bias - bn.running_mean) / torch.sqrt(bn.running_var + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "bn.weight * bias + bn.bias",
                            "BinOp"
                        ],
                        [
                            "(_bias - bn.running_mean) / torch.sqrt(bn.running_var + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "bn.weight * bias + bn.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1.weight.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "layer2.weight.flip(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer2.weight.shape[-1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_54": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_126": {
                "n": {
                    "value": "weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_172": {
                "input": {
                    "value": "bn.running_var.unsqueeze(1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_173": {
                "input": {
                    "value": "bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_129": {
                "input": {
                    "value": "weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "input": {
                    "value": "bn.running_var.view(-1, 1, 1, 1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/overparam_base.py": {
        "torch": {}
    },
    "overparam/overparam_conv.py": {
        "torch": {
            "conv2d_140": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/overparam_linear.py": {
        "torch": {
            "linear_111": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "overparam/utils.py": {
        "torch": {
            "Sequential_57": {
                "variable": {
                    "value": "new_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "run_tests.py": {
        "torch": {
            "randn_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_80": {
                "variable": {
                    "value": "isclose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "net(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(x, override=True)",
                            "Call"
                        ],
                        [
                            "net(x, override=True)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_141": {
                "variable": {
                    "value": "isclose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "net(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(x, override=True)",
                            "Call"
                        ],
                        [
                            "net(x, override=True)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}