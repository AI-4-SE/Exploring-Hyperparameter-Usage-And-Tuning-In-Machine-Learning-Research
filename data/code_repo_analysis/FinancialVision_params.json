{
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/clean_examples_training.py": {
        "sklearn": {
            "confusion_matrix_69": {
                "variable": {
                    "value": "train_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['data']['train_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(params['data']['train_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(params['classes'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_70": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['data']['test_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(params['data']['test_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(params['classes'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/merged_examples_training.py": {
        "sklearn": {
            "confusion_matrix_69": {
                "variable": {
                    "value": "train_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['data']['train_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(params['data']['train_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(params['classes'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_70": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['data']['test_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(params['data']['test_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(params['classes'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Encoding candlesticks as images for patterns classification using convolutional neural networks/main.py": {
        "sklearn": {
            "confusion_matrix_54": {
                "variable": {
                    "value": "train_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['train_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(data['train_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_55": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['test_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(data['test_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Encoding candlesticks as images for patterns classification using convolutional neural networks/utils/util_process.py": {
        "sklearn": {
            "LinearRegression_140": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Deep Convolutional Candlestick Learner/model.py": {
        "sklearn": {
            "confusion_matrix_52": {
                "variable": {
                    "value": "train_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['train_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(data['train_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_53": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['test_label'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(data['test_gaf'])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1, 2, 3, 4, 5, 6, 7, 8]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "The_Protection_of_Data_Sharing_for_Privacy_in_Financial_Vision/dpsgd_main.py": {
        "sklearn": {
            "confusion_matrix_56": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_labels, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_data)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "model.predict(test_data)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_130": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_labels, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_data)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "model.predict(test_data)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_22": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, 2, strides=(1, 1), padding='same', activation='sigmoid', input_shape=(10, 10, 4)), tf.keras.layers.Conv2D(16, 2, strides=(2, 2), padding='same', activation='sigmoid'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(256, activation='relu'), tf.keras.layers.Dense(8, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, 2, strides=(1, 1), padding='same', activation='relu', input_shape=(10, 10, 4)), tf.keras.layers.Conv2D(16, 2, strides=(2, 2), padding='same', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(256, activation='relu'), tf.keras.layers.Dense(8, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_23": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(10, 10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_29": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_34": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_79": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(10, 10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_85": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_90": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_91": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "The_Protection_of_Data_Sharing_for_Privacy_in_Financial_Vision/pate_main.py": {
        "sklearn": {
            "confusion_matrix_238": {
                "variable": {
                    "value": "labels_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_labels.argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "stdnt_labels.argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "range(8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_252": {
                "variable": {
                    "value": "test_result_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_data)",
                            "Call"
                        ],
                        [
                            "np.argmax(test_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, 2, strides=(1, 1), padding='same', activation='sigmoid', input_shape=(10, 10, 4)), tf.keras.layers.Conv2D(16, 2, strides=(2, 2), padding='same', activation='sigmoid'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(256, activation='relu'), tf.keras.layers.Dense(8, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0006",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_model_193": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "filename2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(nb_teachers) + '_teachers_' + str(teacher_id) + '.h5'",
                            "BinOp"
                        ],
                        [
                            "str(nb_teachers) + '_teachers_' + str(teacher_id) + '.h5'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_50": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(10, 10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_56": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/foolbox/models/__init__.py": {
        "tensorflow": {}
    },
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/foolbox/models/tensorflow.py": {
        "tensorflow": {
            "get_default_session_37": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "inputs.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, (None,), name='labels')",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "backward_grad_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits * backward_grad_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_72": {
                "variable": {
                    "value": "(backward_grad_inputs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logits * backward_grad_logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "backward_grad_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_session_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/foolbox/models/tensorflow_eager.py": {
        "tensorflow": {
            "constant_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_132": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_133": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_160": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_163": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_174": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_176": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "tape.gradient(loss, inputs)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "tf.constant(gradient)",
                            "Call"
                        ],
                        [
                            "tape.gradient(predictions, inputs, gradient)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "executing_eagerly_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Data Augmentation For Deep Candlestick Learner/foolbox/models/__init__.py": {
        "tensorflow": {}
    },
    "Data Augmentation For Deep Candlestick Learner/foolbox/models/tensorflow.py": {
        "tensorflow": {
            "get_default_session_37": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "inputs.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, (None,), name='labels')",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "backward_grad_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits * backward_grad_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_72": {
                "variable": {
                    "value": "(backward_grad_inputs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logits * backward_grad_logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "backward_grad_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_session_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Data Augmentation For Deep Candlestick Learner/foolbox/models/tensorflow_eager.py": {
        "tensorflow": {
            "constant_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_132": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_133": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_160": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_163": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_174": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_176": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "tape.gradient(loss, inputs)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "tf.constant(gradient)",
                            "Call"
                        ],
                        [
                            "tape.gradient(predictions, inputs, gradient)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "executing_eagerly_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Deep Reinforcement Learning for Foreign Exchange Trading/plotter3.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "8787",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Deep Convolutional Candlestick Learner/foolbox/models/__init__.py": {
        "tensorflow": {}
    },
    "Explainable Deep Convolutional Candlestick Learner/foolbox/models/tensorflow.py": {
        "tensorflow": {
            "get_default_session_37": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "inputs.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, (None,), name='labels')",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "backward_grad_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits * backward_grad_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_72": {
                "variable": {
                    "value": "(backward_grad_inputs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logits * backward_grad_logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "backward_grad_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_session_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Deep Convolutional Candlestick Learner/foolbox/models/tensorflow_eager.py": {
        "tensorflow": {
            "constant_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_132": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_133": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_160": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_163": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_174": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_176": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "tape.gradient(loss, inputs)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "tf.constant(gradient)",
                            "Call"
                        ],
                        [
                            "tape.gradient(predictions, inputs, gradient)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "executing_eagerly_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Digital Currency Candlestick Pattern AI Learner/foolbox2/models/__init__.py": {
        "tensorflow": {}
    },
    "Explainable Digital Currency Candlestick Pattern AI Learner/foolbox2/models/tensorflow.py": {
        "tensorflow": {
            "get_default_session_37": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "inputs.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, (None,), name='labels')",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "self._session.run(self._loss, feed_dict={self._inputs: x, self._labels: labels})",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "backward_grad_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits * backward_grad_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_72": {
                "variable": {
                    "value": "(backward_grad_inputs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "backward_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logits * backward_grad_logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "backward_grad_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + input_shape)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_session_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Digital Currency Candlestick Pattern AI Learner/foolbox2/models/tensorflow_eager.py": {
        "tensorflow": {
            "constant_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_132": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_133": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(x)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_160": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_163": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_174": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_176": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "tape.gradient(loss, inputs)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "tf.constant(gradient)",
                            "Call"
                        ],
                        [
                            "tape.gradient(predictions, inputs, gradient)",
                            "Call"
                        ],
                        [
                            "gradient.numpy()",
                            "Call"
                        ],
                        [
                            "self._process_gradient(dpdx, gradient)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "executing_eagerly_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "labels[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label])",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ],
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(predictions, axis=0)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ],
                        [
                            "self._model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Adversarial Robustness of Deep Convolutional Candlestick Learner/foolbox/models/pytorch.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gradient).to(self.device)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_51": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Data Augmentation For Deep Candlestick Learner/foolbox/models/pytorch.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gradient).to(self.device)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_51": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Deep Convolutional Candlestick Learner/foolbox/models/pytorch.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gradient).to(self.device)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_51": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Explainable Digital Currency Candlestick Pattern AI Learner/foolbox2/models/pytorch.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.asarray(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gradient).to(self.device)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "x[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x[None]).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self._process_input(inputs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs).to(self.device)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_51": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}