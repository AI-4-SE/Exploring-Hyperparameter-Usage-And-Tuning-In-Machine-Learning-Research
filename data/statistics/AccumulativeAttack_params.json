{
    "detection_baselines.py": {
        "sklearn": {},
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "return_back",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "num + dic_i.size(0)",
                            "BinOp"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "return_back",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "num + dic_i.size(0)",
                            "BinOp"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "output_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X, return_fea=True)",
                            "Call"
                        ],
                        [
                            "net(X, return_fea=True)",
                            "Call"
                        ],
                        [
                            "net(X, return_fea=True)",
                            "Call"
                        ],
                        [
                            "net(X, return_fea=True)",
                            "Call"
                        ],
                        [
                            "net(X, return_fea=True)",
                            "Call"
                        ],
                        [
                            "net(testbatch, return_fea=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(testbatch.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_256": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet18(num_classes=10)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "dic[str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "dic[str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "dic[str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_187": {
                "variable": {
                    "value": "ref_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_back",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_class, num, feature_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num, feature_dim)",
                            "Call"
                        ],
                        [
                            "Kernel_density_train(net, trloader, feature_dim=fea_dim)",
                            "Call"
                        ],
                        [
                            "LID_train(net, trloader, num=10000, feature_dim=fea_dim)",
                            "Call"
                        ],
                        [
                            "return_back.unsqueeze_(dim=0)",
                            "Call"
                        ],
                        [
                            "(mu, sigma)",
                            "Tuple"
                        ],
                        [
                            "(mu, sigma)",
                            "Tuple"
                        ],
                        [
                            "(mu, sigma)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "out_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_s.max(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_189": {
                "variable": {
                    "value": "test_evi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(torch.norm(gap, p=2, dim=2), 2) * sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_264": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.resume, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bitwise_and_77": {
                "variable": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_or_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "y == j",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "dic[str(j)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dic[str(j)], features[indexs].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_87": {
                "input": {
                    "value": "gap.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "ref_vectors - features.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(return_back - features.unsqueeze(dim=1), p=2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_88": {
                "n": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bitwise_and_108": {
                "variable": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_or_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "y == j",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "dic[str(j)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dic[str(j)], features[indexs].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bitwise_and_136": {
                "variable": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_or_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(pre_labels == y)[0]",
                            "Subscript"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ],
                        [
                            "pre_labels == y",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "y == j",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "dic[str(j)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dic[str(j)], features[indexs].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_192": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_back - features.unsqueeze(dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_193": {
                "variable": {
                    "value": "top_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sort(gap, dim=1)[0][:, :K]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_36": {
                "condition": {
                    "value": "pre_labels == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_54": {
                "condition": {
                    "value": "pre_labels == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "median_272": {
                "input": {
                    "value": "test_evi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-torch.pow(torch.norm(gap, p=2, dim=2), 2) * sigma)",
                            "Call"
                        ],
                        [
                            "test_evi_all.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 / (top_K.mean(dim=1) - top_K[:, -1])",
                            "BinOp"
                        ],
                        [
                            "score_v.max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "score_v.squeeze().max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "score_v.squeeze()",
                            "Call"
                        ],
                        [
                            "get_outlier(args.method, trloader, testbatch, net)",
                            "Call"
                        ]
                    ]
                }
            },
            "median_276": {
                "input": {
                    "value": "test_noise_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_outlier(args.method, trloader, random_noise, net)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_78": {
                "condition": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_109": {
                "condition": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_117": {
                "input": {
                    "value": "gap.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "ref_vectors - features.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(return_back - features.unsqueeze(dim=1), p=2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_137": {
                "condition": {
                    "value": "is_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ],
                        [
                            "torch.bitwise_and(c_or_w, y == j)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_145": {
                "input": {
                    "value": "gap.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "ref_vectors - features.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(return_back - features.unsqueeze(dim=1), p=2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_160": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_117": {
                "n": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_145": {
                "n": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_165": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_189": {
                "input": {
                    "value": "torch.norm(gap, p=2, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_199": {
                "input": {
                    "value": "mm(mm(mean_v, sigma), mean_v.transpose(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_170": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_189": {
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "ref_vectors - features.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(return_back - features.unsqueeze(dim=1), p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_193": {
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "dic_i - mu[i].unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "ref_vectors - features.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(return_back - features.unsqueeze(dim=1), p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "feder_accu_train.py": {
        "torch": {
            "DataParallel_83": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet18(num_classes=10, norm_layer=norm_layer).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.resume, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_108": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_109": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_115": {
                "variable": {
                    "value": "norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_138": {
                "variable": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_tri)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_139": {
                "variable": {
                    "value": "grad_params_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "-F.cross_entropy(net(data_tri), label_tri)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_141": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_142": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_149": {
                "variable": {
                    "value": "norm_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, new_PT.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_150": {
                "variable": {
                    "value": "norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, new_PT.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_153": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all * grad_val_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_177": {
                "variable": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_tri)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_178": {
                "variable": {
                    "value": "grad_params_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "-F.cross_entropy(net(data_tri), label_tri)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_180": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_181": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_190": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, new_PT.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_191": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all * grad_val_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_216": {
                "variable": {
                    "value": "grad_params_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ],
                        [
                            "-F.cross_entropy(net(data_tri), label_tri)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_218": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_219": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_226": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, new_PT.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_tri_all, grad_tri.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_tri_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_227": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((grad_val_all, grad_val.flatten()), dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(grad_val_all, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_228": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tri_all * grad_val_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_79": {
                "num_groups": {
                    "value": "args.group_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_val_all, grad_val.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__122": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_tri_all, grad_tri.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_val_all, grad_val.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__161": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_tri_all, new_PT.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_val_all, grad_val.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__198": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "grad_tri_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_tri_all, grad_tri.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "grad_val_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_val_all, grad_val.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__236": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "input": {
                    "value": "net(data_tri)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ],
                        [
                            "label_tri",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_221": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_263": {
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_269": {
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_304": {
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_313": {
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ],
                        [
                            "dt_val[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "online_accu_train.py": {
        "torch": {
            "DataParallel_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet18(num_classes=10, norm_layer=norm_layer).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_90": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.resume, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + random_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_80": {
                "input": {
                    "value": "round_err * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_83": {
                "num_groups": {
                    "value": "args.group_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_pgd]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_pgd.data - X.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.epsilon",
                            "Method Argument"
                        ],
                        [
                            "args.epsilon",
                            "Method Argument"
                        ],
                        [
                            "args.epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_171": {
                "variable": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_tri)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_tri",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_172": {
                "variable": {
                    "value": "grad_params_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(X_pgd), label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_175": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_176": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_179": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_180": {
                "variable": {
                    "value": "grad_params_train",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_train), label_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_188": {
                "variable": {
                    "value": "second_grad_params_train",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "grads + F.normalize(grad_tri.flatten(), p=2, dim=0) @ F.normalize(grad_val.flatten(), p=2, dim=0)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_193": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_pgd]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_129": {
                "variable": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(X_pgd)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_130": {
                "variable": {
                    "value": "grad_params_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(X_pgd), label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_tri), label_tri)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_133": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(data_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ],
                        [
                            "label_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_134": {
                "variable": {
                    "value": "grad_params_val",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(net(data_val), label_val)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_142": {
                "variable": {
                    "value": "X_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "grads + F.normalize(grad_tri.flatten(), p=2, dim=0) @ F.normalize(grad_val.flatten(), p=2, dim=0)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "inputs": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(X + random_noise, 0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data - eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_197": {
                "variable": {
                    "value": "loss_train_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(X_pgd)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_198": {
                "variable": {
                    "value": "grad_params_train_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_train_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(net(X_pgd), label_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_212": {
                "variable": {
                    "value": "X_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "grads_train + F.normalize(grad_train_adv.flatten(), p=2, dim=0) @ (args.gamma * F.normalize(grad_train.flatten(), p=2, dim=0) + F.normalize(second_grad_train.flatten(), p=2, dim=0))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(X + random_noise, 0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data - eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_220": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_pgd.data - data_train.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.epsilon",
                            "Method Argument"
                        ],
                        [
                            "args.epsilon",
                            "Method Argument"
                        ],
                        [
                            "args.epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_260": {
                "n": {
                    "value": "len(data_tri)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "enable_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_150": {
                "input": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(X + random_noise, 0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data - eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_185": {
                "input": {
                    "value": "grad_val.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_222": {
                "input": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(X + random_noise, 0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data - eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(data_train.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_140": {
                "input": {
                    "value": "grad_val.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_204": {
                "input": {
                    "value": "grad_train.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_206": {
                "input": {
                    "value": "second_grad_train.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_208": {
                "input": {
                    "value": "grad_train.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_cifar.py": {
        "torch": {
            "DataParallel_42": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet18(num_classes=10)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/ckpt.pth' % args.resume",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__69": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'args': args, 'err_cls': err_cls, 'optimizer': optimizer.state_dict(), 'net': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.outf, 'epoch{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/adapt_helpers.py": {
        "torch": {
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__21": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "inf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__37": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "inf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__52": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clipvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_61": {
                "input": {
                    "value": "outputs_ssh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.to(device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "manual_seed_99": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_101": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/model.py": {
        "torch": {
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_133": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar10_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.4914, 0.4822, 0.4465)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar10_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.2023, 0.1994, 0.201)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "flatten_193": {
                "variable": {
                    "value": "x1_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "self.fc(x1_fea)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "utils/test_helpers.py": {
        "torch": {
            "CrossEntropyLoss_17": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(one_hot).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(losses).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_helpers.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "trloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=tr_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "teloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=te_transforms_local)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}