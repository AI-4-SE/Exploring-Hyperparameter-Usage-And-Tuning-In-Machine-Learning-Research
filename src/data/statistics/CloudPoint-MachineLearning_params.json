{
    "predictor.py": {
        "sklearn": {
            "GridSearchCV_184": {
                "variable": {
                    "value": "GSCV",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "xgb_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XGBRegressor(random_state=self.options['seed'])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.1], 'max_depth': self.options['max_depth'], 'min_child_weight': self.options['min_child_weight'], 'n_estimators': self.options['n_estimators'], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': [0]}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': self.options['gamma']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': self.options['colsample_bytree'], 'subsample': self.options['subsample']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': self.options['reg_alpha'], 'reg_lambda': self.options['reg_lambda']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': self.options['learning_rate'], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': [GSCV.best_params_['reg_alpha']], 'reg_lambda': [GSCV.best_params_['reg_lambda']]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.options['cv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.options['scoring']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.options['n_jobs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.options['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_210": {
                "variable": {
                    "value": "GSCV",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "xgb_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XGBRegressor(random_state=self.options['seed'])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.1], 'max_depth': self.options['max_depth'], 'min_child_weight': self.options['min_child_weight'], 'n_estimators': self.options['n_estimators'], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': [0]}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': self.options['gamma']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': self.options['colsample_bytree'], 'subsample': self.options['subsample']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': self.options['reg_alpha'], 'reg_lambda': self.options['reg_lambda']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': self.options['learning_rate'], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': [GSCV.best_params_['reg_alpha']], 'reg_lambda': [GSCV.best_params_['reg_lambda']]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.options['cv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.options['scoring']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.options['n_jobs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.options['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_238": {
                "variable": {
                    "value": "GSCV",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "xgb_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XGBRegressor(random_state=self.options['seed'])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.1], 'max_depth': self.options['max_depth'], 'min_child_weight': self.options['min_child_weight'], 'n_estimators': self.options['n_estimators'], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': [0]}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': self.options['gamma']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': self.options['colsample_bytree'], 'subsample': self.options['subsample']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': self.options['reg_alpha'], 'reg_lambda': self.options['reg_lambda']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': self.options['learning_rate'], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': [GSCV.best_params_['reg_alpha']], 'reg_lambda': [GSCV.best_params_['reg_lambda']]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.options['cv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.options['scoring']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.options['n_jobs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.options['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_270": {
                "variable": {
                    "value": "GSCV",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "xgb_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XGBRegressor(random_state=self.options['seed'])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.1], 'max_depth': self.options['max_depth'], 'min_child_weight': self.options['min_child_weight'], 'n_estimators': self.options['n_estimators'], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': [0]}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': self.options['gamma']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': self.options['colsample_bytree'], 'subsample': self.options['subsample']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': self.options['reg_alpha'], 'reg_lambda': self.options['reg_lambda']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': self.options['learning_rate'], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': [GSCV.best_params_['reg_alpha']], 'reg_lambda': [GSCV.best_params_['reg_lambda']]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.options['cv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.options['scoring']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.options['n_jobs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.options['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_301": {
                "variable": {
                    "value": "GSCV",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "xgb_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "XGBRegressor(random_state=self.options['seed'])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.1], 'max_depth': self.options['max_depth'], 'min_child_weight': self.options['min_child_weight'], 'n_estimators': self.options['n_estimators'], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': [0]}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'colsample_bytree': [0.8], 'subsample': [0.8], 'gamma': self.options['gamma']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': self.options['colsample_bytree'], 'subsample': self.options['subsample']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': [0.1], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': self.options['reg_alpha'], 'reg_lambda': self.options['reg_lambda']}",
                            "Dict"
                        ],
                        [
                            "{'learning_rate': self.options['learning_rate'], 'max_depth': [GSCV.best_params_['max_depth']], 'min_child_weight': [GSCV.best_params_['min_child_weight']], 'n_estimators': [GSCV.best_params_['n_estimators']], 'gamma': [GSCV.best_params_['gamma']], 'colsample_bytree': [GSCV.best_params_['colsample_bytree']], 'subsample': [GSCV.best_params_['subsample']], 'reg_alpha': [GSCV.best_params_['reg_alpha']], 'reg_lambda': [GSCV.best_params_['reg_lambda']]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.options['cv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.options['scoring']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.options['n_jobs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.options['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + options['input_shape']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + options['target_shape']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(hidden, width, activation=tf.nn.sigmoid, name='hidden_{}'.format(n))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.options['target_shape'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_68": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_70": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_43": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(hidden, width, activation=tf.nn.sigmoid, name='hidden_{}'.format(n))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_widths[n]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_48": {
                "var_list": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_plot.py": {
        "sklearn": {
            "mean_squared_error_27": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}