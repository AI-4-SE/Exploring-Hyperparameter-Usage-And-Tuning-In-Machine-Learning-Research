{
    "examples/eval.py": {
        "tensorflow": {
            "latest_checkpoint_144": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_235": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "original_predictor.get_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_238": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_153": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_157": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_216": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_219": {
                "variable": {
                    "value": "(total_count, total_metrics)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[total_count, total_metrics]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, loop_vars=[total_count, total_metrics], back_prop=False, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(total_count, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SingularMonitoredSession_240": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_217": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_189": {
                "x": {
                    "value": "test_data.image - FLAGS.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_190": {
                "x": {
                    "value": "test_data.image + FLAGS.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_202": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/language/exhaustive_verification.py": {
        "tensorflow": {
            "SingularMonitoredSession_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/language/interactive_example.py": {
        "tensorflow": {
            "Saver_50": {
                "variable": {
                    "value": "network_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.graph_tensor_producer.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_51": {
                "variable": {
                    "value": "self.open_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/language/models.py": {
        "tensorflow": {
            "name_scope_26": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'max_pool_1d'",
                            "Method Argument"
                        ],
                        [
                            "'sentence_rep_conv'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "input": {
                    "value": "tf.nn.max_pool(tf.expand_dims(x, 1), [1, 1, pool_size, 1], [1, 1, pool_size, 1], 'VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc1_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc2_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_28": {
                "input": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 1, pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(length, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_word_embeddings",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x, axis=1)",
                            "Call"
                        ],
                        [
                            "_max_pool_1d(x, pooling_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=1)",
                            "Call"
                        ],
                        [
                            "x / lengths",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob=self._keep_prob)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/language/robust_model.py": {
        "tensorflow": {
            "maximum_53": {
                "variable": {
                    "value": "pad_shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "padded_length - tf.shape(x)[axis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.zeros(dtype=x.dtype, shape=pad_shape)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_raw_117": {
                "variable": {
                    "value": "dense_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['sentence']",
                            "Subscript"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_125": {
                "variable": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "chars.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.py_func(to_char, [chars.values], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "chars.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_723": {
                "variable": {
                    "value": "per_neuron_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_w * last_layer.input_bounds.lower_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "obj_w * last_layer.input_bounds.upper_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_726": {
                "variable": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_neuron_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(obj_w * last_layer.input_bounds.lower_offset, obj_w * last_layer.input_bounds.upper_offset)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(2, per_neuron_objective.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_765": {
                "variable": {
                    "value": "final_wt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "final_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_787": {
                "variable": {
                    "value": "targets_to_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(num_classes, dtype=labels.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_789": {
                "variable": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets_to_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_classes, dtype=labels.dtype), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_790": {
                "variable": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(targets_to_filter, labels)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "-margin * tf.ones_like(verifiable_obj)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SparseTensor_96": {
                "variable": {
                    "value": "minibatch[sentence]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "minibatch['sentence'].indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "minibatch['sentence'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self._batch_size, minibatch['sentence'].dense_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_262": {
                "variable": {
                    "value": "synonym_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "synonym_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='synonym_values')",
                            "Call"
                        ],
                        [
                            "synonym_values",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pad_fixed(utils.get_padded_indexes(vocab_table, minibatch.tokens, self.batch_size), axis=1, padded_length=self.config['max_padded_length'])",
                            "Call"
                        ],
                        [
                            "self.embed_dataset(minibatch, vocab_table)",
                            "Call"
                        ],
                        [
                            "self.embed_dataset(minibatch, vocab_table)",
                            "Call"
                        ],
                        [
                            "data_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_265": {
                "variable": {
                    "value": "synonym_ids_per_example",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "synonym_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(synonym_values, data_batch, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "perturbation_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sequence_positions_across_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_327": {
                "variable": {
                    "value": "perturbation_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "values_across_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_343": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_344": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_345": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_346": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_348": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.learning_rate, trainable=False)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_383": {
                "variable": {
                    "value": "original_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch.embedded_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_385": {
                "variable": {
                    "value": "perturbation_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_pad._embeddings",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(perturbation.tokens, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_388": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.one_hot(perturbation.positions, depth=self.config['max_padded_length'])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_432": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, tf.argmax(prediction, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_471": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_472": {
                "variable": {
                    "value": "verified",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bound <= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_561": {
                "variable": {
                    "value": "verifiable_loss_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['verifiable_loss_ratio']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "verifiable_loss_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_565": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['delta']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_568": {
                "variable": {
                    "value": "lookup_token",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lookup_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_573": {
                "variable": {
                    "value": "lookup_token_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lookup_token_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_577": {
                "variable": {
                    "value": "synonym_values",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "synonym_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_579": {
                "variable": {
                    "value": "synonym_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "synonym_counts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_731": {
                "input_tensor": {
                    "value": "obj_w * last_layer.input_bounds.nominal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(2, obj_w.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_274": {
                "variable": {
                    "value": "nonzero_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "synonym_ids_this_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "synonym_ids_this_example in enumerate(synonym_ids_per_example)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_277": {
                "variable": {
                    "value": "synonym_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "synonym_ids_this_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "synonym_ids_this_example in enumerate(synonym_ids_per_example)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonzero_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(synonym_ids_this_example)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_301": {
                "variable": {
                    "value": "padding_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch[i_sample, :minibatch.num_tokens[i_sample]]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[padding_multiplier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_302": {
                "variable": {
                    "value": "synonym_tokens_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[synonym_tokens, tf.cast(padding_tokens, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_310": {
                "variable": {
                    "value": "pad_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_312": {
                "variable": {
                    "value": "padding_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(minibatch.num_tokens[i_sample], delta=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[padding_multiplier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "perturbation_positions_this_example_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perturbation_positions_this_example, tf.cast(padding_positions, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_447": {
                "variable": {
                    "value": "verifiable_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_766": {
                "input": {
                    "value": "final_wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(final_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_766": {
                "params": {
                    "value": "final_wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(final_w)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_767": {
                "input": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_767": {
                "params": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_b",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_788": {
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_126": {
                "func": {
                    "value": "to_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vectorize(safe_chr)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[chars.values]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_242": {
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_346": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_loss(logits, minibatch.sentiment)",
                            "Call"
                        ],
                        [
                            "self.add_train_ops(num_classes, train_joint_rep, train_minibatch)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_386": {
                "input": {
                    "value": "perturbation.tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_389": {
                "indices": {
                    "value": "perturbation.positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.config['max_padded_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_432": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(prediction, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_451": {
                "variable": {
                    "value": "verifiable_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_max(verifiable_obj, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_646": {
                "control_inputs": {
                    "value": "[train_verified, test_verified, dev_verified]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_791": {
                "input": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_243": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_classifier(joint_rep)",
                            "Call"
                        ],
                        [
                            "self.linear_classifier(rep)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floordiv_294": {
                "x": {
                    "value": "self.config['num_perturbations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(minibatch.num_tokens[i_sample], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_364": {
                "x": {
                    "value": "self.config['max_padded_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(minibatch.num_tokens, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_432": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.run_prediction(inputs, length)",
                            "Call"
                        ],
                        [
                            "self.linear_classifier(representation)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_457": {
                "variable": {
                    "value": "verifiable_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.transpose(verifiable_obj)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_460": {
                "variable": {
                    "value": "verifiable_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "verifiable_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(verifiable_obj)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_max(verifiable_obj, axis=0))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=tf.transpose(verifiable_obj), labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(verifiable_loss)",
                            "Call"
                        ],
                        [
                            "self.compute_verifiable_loss(verifiable_obj, train_minibatch.sentiment)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_295": {
                "x": {
                    "value": "minibatch.num_tokens[i_sample]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "padding_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(original_tokens, multiples=[padding_multiplier])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_314": {
                "x": {
                    "value": "padding_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(pad_positions, multiples=[padding_multiplier])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_365": {
                "x": {
                    "value": "minibatch.num_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_451": {
                "input_tensor": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_458": {
                "a": {
                    "value": "verifiable_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(per_neuron_objective, axis=list(range(2, per_neuron_objective.shape.ndims)))",
                            "Call"
                        ],
                        [
                            "verifiable_obj + obj_b",
                            "BinOp"
                        ],
                        [
                            "filter_correct_class(verifiable_obj, num_classes, labels, margin=margin)",
                            "Call"
                        ],
                        [
                            "tf.where(neq, verifiable_obj, -margin * tf.ones_like(verifiable_obj))",
                            "Call"
                        ],
                        [
                            "verifiable_objective(network, data_batch.sentiment, margin=1.0)",
                            "Call"
                        ],
                        [
                            "self.add_verifiable_objective(train_minibatch, vocab_table, train_perturbation, stop_gradient=False)",
                            "Call"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ],
                        [
                            "verifiable_obj",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/language/robust_train.py": {
        "tensorflow": {
            "scalar_106": {
                "variable": {
                    "value": "train_acc_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_train_accuracy' % task",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_accuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_108": {
                "variable": {
                    "value": "loss_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "merge_109": {
                "variable": {
                    "value": "train_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[train_acc_summ, loss_summ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_114": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_139": {
                "variable": {
                    "value": "network_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "graph_tensor_producer.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_326": {
                "variable": {
                    "value": "network_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "graph_tensor_producer.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_132": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.experiment_root, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_142": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.experiment_root, 'tensorboard')",
                            "Call"
                        ],
                        [
                            "FLAGS.tensorboard_dir",
                            "Attribute"
                        ],
                        [
                            "tensorboard_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SingularMonitoredSession_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SingularMonitoredSession_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/language/utils.py": {
        "tensorflow": {
            "gather_95": {
                "variable": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_indexes",
                            "variable"
                        ],
                        [
                            "vocabulary_table.lookup(tokens.values)",
                            "Call"
                        ],
                        [
                            "token_indexes",
                            "variable"
                        ],
                        [
                            "vocabulary_table.lookup(tokens.values)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([batch_size, max_length, embedding_dim], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_110": {
                "variable": {
                    "value": "tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "indices_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tiled, [num_tokens_in_batch * embedding_dim, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "indices_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile(tf.range(0, embedding_dim), [num_tokens_in_batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "indices_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices_tiled, indices_linear]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_to_dense_118": {
                "variable": {
                    "value": "embeddings_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "indices_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([indices_tiled, indices_linear], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([batch_size, max_length, embedding_dim], axis=0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "tf.reshape(tokens_embeddings, [num_tokens_in_batch * embedding_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_to_dense_156": {
                "variable": {
                    "value": "indexes_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "tokens.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[batch_size, max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "tf.reshape(indexes, [num_tokens_in_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_227": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_228": {
                "variable": {
                    "value": "evals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits, axis=1), tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_229": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(evals, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "self._embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._vocab_size + num_oov_buckets, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "fine_tune_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "create_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(logits, labels, 1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "tokens.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_99": {
                "values": {
                    "value": "[batch_size, max_length, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tokens.indices, [1, embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_tokens_in_batch * embedding_dim, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_114": {
                "input": {
                    "value": "tf.range(0, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_tokens_in_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "tokens.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(predictions, labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embeddings, indexes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_tokens_in_batch * embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_indexes",
                            "variable"
                        ],
                        [
                            "vocabulary_table.lookup(tokens.values)",
                            "Call"
                        ],
                        [
                            "token_indexes",
                            "variable"
                        ],
                        [
                            "vocabulary_table.lookup(tokens.values)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_tokens_in_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_198": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "in_top_k_222": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/train.py": {
        "tensorflow": {
            "get_or_create_global_step_129": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "original_predictor.get_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ibp.parse_learning_rate(step, FLAGS.learning_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_201": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_257": {
                "variable": {
                    "value": "test_summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "FileWriter_258": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(FLAGS.output_dir, 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_261": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_138": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_142": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_239": {
                "variable": {
                    "value": "(total_count, total_metrics)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[total_count, total_metrics]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_245": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, loop_vars=[total_count, total_metrics], back_prop=False, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(total_count, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_202": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "SingularMonitoredSession_263": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_237": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_256": {
                "name": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_metrics._fields",
                            "Attribute"
                        ]
                    ]
                },
                "data": {
                    "value": "getattr(test_metrics, f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_221": {
                "x": {
                    "value": "test_data.image - FLAGS.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_222": {
                "x": {
                    "value": "test_data.image + FLAGS.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/attacks.py": {
        "tensorflow": {
            "while_loop_222": {
                "variable": {
                    "value": "(_, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), tf.zeros_like(tensor)]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_314": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-09",
                            "Method Argument"
                        ],
                        [
                            "1e-09",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_315": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "image_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "image_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_349": {
                "variable": {
                    "value": "use_random_init",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(random_shape) < float(random_init)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_372": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), init_perturbation, flat_init_optim_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_503": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_138": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_optim_state.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "variable": {
                    "value": "tiled_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_203": {
                "variable": {
                    "value": "tiled_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_tensor, [num_samples] + [1] * len(tensor.shape))",
                            "Call"
                        ],
                        [
                            "tf.stack([tiled_tensor + delta, tiled_tensor - delta], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_samples] + [1] * len(tensor.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "tiled_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_tensor + delta, tiled_tensor - delta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(tf.reshape(tiled_tensor, [2 * num_samples, batch_size] + tensor.shape.as_list()[1:]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, [2, num_samples, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, shape)",
                            "Call"
                        ],
                        [
                            "-self._objective_fn(bounds)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, num_samples, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(tf.reshape(tiled_tensor, [2 * num_samples, batch_size] + tensor.shape.as_list()[1:]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, [2, num_samples, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, shape)",
                            "Call"
                        ],
                        [
                            "-self._objective_fn(bounds)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.shape.as_list() + [1] * (len(tensor.shape) - 1)",
                            "BinOp"
                        ],
                        [
                            "[s or -1 for s in shape]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(losses[0] - losses[1]) / (2.0 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_380": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_469": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_471": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [self._num_restarts * batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts * num_specs, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [-1] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self._num_restarts, 1] + [1] * len(input_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_475": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [self._num_restarts * batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts * num_specs, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [-1] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_restarts * batch_size] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_488": {
                "variable": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "self.adapt(duplicated_inputs, adversarial_input, duplicated_labels)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(build_loss_fn(spec_idx), duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "adversarial_input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, batch_size] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_490": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_491": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(tf.shape(adversarial_objective)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_492": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[i, j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_498": {
                "input_tensor": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_510": {
                "input_tensor": {
                    "value": "tf.minimum(b, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_653": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_654": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_655": {
                "variable": {
                    "value": "(_, lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_702": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_704": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [self._num_restarts * batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts * num_specs, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [-1] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self._num_restarts * num_specs, 1] + [1] * len(input_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_708": {
                "variable": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [self._num_restarts * batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts * num_specs, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [-1] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_734": {
                "variable": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_735": {
                "variable": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_736": {
                "variable": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "self.adapt(duplicated_inputs, adversarial_input, duplicated_labels)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(build_loss_fn(spec_idx), duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "adversarial_input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, batch_size] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_738": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_739": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(tf.shape(adversarial_objective)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_740": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[i, j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_741": {
                "variable": {
                    "value": "self._attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "self.adapt(duplicated_inputs, adversarial_input, duplicated_labels)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(build_loss_fn(spec_idx), duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "adversarial_input",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([i, j], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([i, j], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_744": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._specification.evaluate(self._logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_853": {
                "variable": {
                    "value": "(_, self._attack, self._success)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0, dtype=tf.int32), inputs, tf.zeros([tf.shape(inputs)[0]], dtype=tf.bool)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_909": {
                "variable": {
                    "value": "(_, self._attack, self._success)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ],
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0, dtype=tf.int32), inputs, tf.zeros([tf.shape(inputs)[0]], dtype=tf.bool)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_97": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(input_image + perturbation)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(perturbation + tf.expand_dims(duplicated_inputs, axis=0), [-1] + duplicated_inputs.shape.as_list()[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "self._colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_156": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(input_image + perturbation)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(perturbation + tf.expand_dims(duplicated_inputs, axis=0), [-1] + duplicated_inputs.shape.as_list()[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "self._colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_196": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_369": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_481": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self._num_restarts]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_493": {
                "params": {
                    "value": "adversarial_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "self.adapt(duplicated_inputs, adversarial_input, duplicated_labels)",
                            "Call"
                        ],
                        [
                            "pgd_attack(reduced_loss_fn, duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_input, [-1, batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "pgd_attack(build_loss_fn(spec_idx), duplicated_inputs, epsilon=self._epsilon, num_steps=self._num_steps, image_bounds=self._input_bounds, random_init=self._random_init, optimizer=optimizer, project_perturbation=self._project_perturbation)",
                            "Call"
                        ],
                        [
                            "adversarial_input",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([i, j], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([i, j], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_509": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_510": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(bounds, k=k, sorted=False).values",
                            "Attribute"
                        ],
                        [
                            "tf.nn.top_k(bounds, k=k, sorted=False).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_515": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_516": {
                "input_tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(bounds, k=k, sorted=False).values",
                            "Attribute"
                        ],
                        [
                            "tf.nn.top_k(bounds, k=k, sorted=False).values",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_542": {
                "variable": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [-1, batch_size, num_outputs])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, num_specs, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_restarts, batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_554": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturbation + tf.expand_dims(duplicated_inputs, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + duplicated_inputs.shape.as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_559": {
                "variable": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [-1, batch_size, num_outputs])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, num_specs, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, batch_size, num_outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_639": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(m, [batch_size] + [1] * (len(original_inputs.shape) - 1))",
                            "Call"
                        ],
                        [
                            "(lower + upper) * 0.5",
                            "BinOp"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size] + [1] * (len(original_inputs.shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_649": {
                "variable": {
                    "value": "new_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=[tf.constant(0.0), lower, upper], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "lower",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(m, [batch_size] + [1] * (len(original_inputs.shape) - 1))",
                            "Call"
                        ],
                        [
                            "(lower + upper) * 0.5",
                            "BinOp"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_650": {
                "variable": {
                    "value": "new_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(m, [batch_size] + [1] * (len(original_inputs.shape) - 1))",
                            "Call"
                        ],
                        [
                            "(lower + upper) * 0.5",
                            "BinOp"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=[tf.constant(0.0), lower, upper], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "upper",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_691": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self._max_specifications",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_696": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(idx, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_restarts, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_713": {
                "variable": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [-1, batch_size, num_outputs])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, num_specs, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_restarts, num_specs, batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_790": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(self._specification.evaluate(self._logits), axis=1)",
                            "Call"
                        ],
                        [
                            "self._specification.evaluate(model_logits)",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "num_specs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._specification.num_specifications",
                            "Attribute"
                        ],
                        [
                            "self._max_specifications",
                            "Attribute"
                        ],
                        [
                            "self._specification.num_specifications",
                            "Attribute"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_795": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(idx, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_restarts, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_807": {
                "variable": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [-1, batch_size, num_outputs])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, num_specs, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_restarts, batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_845": {
                "variable": {
                    "value": "use_new_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(spec_idx, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "new_success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_any_greater(self._specification.evaluate(new_logits))",
                            "Call"
                        ],
                        [
                            "self._inner_attack.success",
                            "Attribute"
                        ]
                    ]
                }
            },
            "print_846": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "Processed specification #",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "spec_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_idx",
                            "Method Argument"
                        ],
                        [
                            "spec_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_904": {
                "variable": {
                    "value": "use_new_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(i, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "new_success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_any_greater(self._specification.evaluate(new_logits))",
                            "Call"
                        ],
                        [
                            "self._inner_attack.success",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_82": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_191": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x), minval=-1.0, maxval=1.0, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_200": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_211": {
                "tensor": {
                    "value": "tiled_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_tensor, [num_samples] + [1] * len(tensor.shape))",
                            "Call"
                        ],
                        [
                            "tf.stack([tiled_tensor + delta, tiled_tensor - delta], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2 * num_samples, batch_size] + tensor.shape.as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_352": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_467": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_563": {
                "tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(tf.reshape(tiled_tensor, [2 * num_samples, batch_size] + tensor.shape.as_list()[1:]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, [2, num_samples, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(losses, shape)",
                            "Call"
                        ],
                        [
                            "-self._objective_fn(bounds)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_632": {
                "input": {
                    "value": "original_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_inputs",
                            "Method Argument"
                        ],
                        [
                            "original_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_636": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "binary_search_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "where_663": {
                "condition": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=[tf.constant(0.0), lower, upper], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "lower",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=[tf.constant(0.0), lower, upper], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "upper",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_686": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_693": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self._specification.num_specifications",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "idx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_792": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self._specification.num_specifications",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "idx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_829": {
                "x": {
                    "value": "spec_idx < num_specs",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(tf.reduce_all(success))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_897": {
                "x": {
                    "value": "i < self._num_restarts",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(tf.reduce_all(success))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_89": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=[tf.constant(0.0), tf.zeros_like(tensor)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean((losses[0] - losses[1]) / (2.0 * delta), axis=0)",
                            "Call"
                        ],
                        [
                            "grads[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_127": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_225": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_225": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_375": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_558": {
                "input": {
                    "value": "model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [-1, batch_size, num_outputs])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, num_specs, batch_size, -1])",
                            "Call"
                        ],
                        [
                            "self._eval_fn(inputs)",
                            "Call"
                        ],
                        [
                            "self._eval_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_logits, [self._num_restarts, batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_567": {
                "input_tensor": {
                    "value": "objective_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_696": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.top_k(bounds, k=self._max_specifications, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(bounds, k=num_specs, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_697": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(perturbation + tf.expand_dims(duplicated_inputs, axis=0), [-1] + duplicated_inputs.shape.as_list()[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.top_k(bounds, k=self._max_specifications, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(bounds, k=num_specs, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(idx.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_720": {
                "input_tensor": {
                    "value": "select_fn(objective_fn(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_795": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.top_k(bounds, k=self._max_specifications, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(bounds, k=num_specs, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_797": {
                "input": {
                    "value": "tf.gather(x, tf.expand_dims(idx[:, :, i], -1), batch_dims=len(idx.shape) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_not_830": {
                "x": {
                    "value": "tf.reduce_all(success)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_845": {
                "x": {
                    "value": "spec_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_idx",
                            "Method Argument"
                        ],
                        [
                            "spec_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_847": {
                "control_inputs": {
                    "value": "[print_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_850": {
                "condition": {
                    "value": "use_new_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(spec_idx, 0), new_success)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(tf.equal(i, 0), new_success)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.find_worst_attack(flat_objective_fn, adversarial_input, batch_size, input_shape)",
                            "Call"
                        ],
                        [
                            "self._inner_attack(inputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Method Argument"
                        ],
                        [
                            "attack",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_851": {
                "x": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "new_success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_any_greater(self._specification.evaluate(new_logits))",
                            "Call"
                        ],
                        [
                            "self._inner_attack.success",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logical_not_898": {
                "x": {
                    "value": "tf.reduce_all(success)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_904": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(adversarial_objective, axis=0)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_906": {
                "condition": {
                    "value": "use_new_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(spec_idx, 0), new_success)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(tf.equal(i, 0), new_success)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.find_worst_attack(flat_objective_fn, adversarial_input, batch_size, input_shape)",
                            "Call"
                        ],
                        [
                            "self._inner_attack(inputs, labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Call"
                        ],
                        [
                            "attack",
                            "Method Argument"
                        ],
                        [
                            "attack",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_907": {
                "x": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "new_success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_any_greater(self._specification.evaluate(new_logits))",
                            "Call"
                        ],
                        [
                            "self._inner_attack.success",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_128": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_146": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(new_optim_state.t, tf.float32)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_147": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(new_optim_state.t, tf.float32)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(perturbation + tf.expand_dims(duplicated_inputs, axis=0), [-1] + duplicated_inputs.shape.as_list()[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_491": {
                "input": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_555": {
                "input": {
                    "value": "duplicated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [self._num_restarts * batch_size] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(duplicated_inputs, [self._num_restarts * num_specs, 1] + [1] * len(input_shape))",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicated_inputs, [-1] + input_shape)",
                            "Call"
                        ],
                        [
                            "self.prepare_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_658": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_739": {
                "input": {
                    "value": "adversarial_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ],
                        [
                            "objective_fn(adversarial_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(adversarial_objective, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(adversarial_objective, [-1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_798": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(perturbation + tf.expand_dims(duplicated_inputs, axis=0), [-1] + duplicated_inputs.shape.as_list()[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(idx[:, :, i], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "len(idx.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_818": {
                "input_tensor": {
                    "value": "select_fn(objective_fn(x), idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_830": {
                "input_tensor": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_856": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_858": {
                "shape": {
                    "value": "[tf.shape(inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_898": {
                "input_tensor": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": [
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "is_attack_successful(lower)",
                            "Call"
                        ],
                        [
                            "is_attack_successful(m)",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Call"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ],
                        [
                            "success",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_912": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_914": {
                "shape": {
                    "value": "[tf.shape(inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state.u[i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_693": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.top_k(bounds, k=self._max_specifications, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(bounds, k=num_specs, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_792": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.top_k(bounds, k=self._max_specifications, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(bounds, k=num_specs, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=tf.shape(idx), maxval=self._specification.num_specifications, dtype=idx.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(idx, 0), [self._num_restarts, 1, 1])",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_798": {
                "input": {
                    "value": "idx[:, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_858": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_914": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/src/bounds.py": {
        "tensorflow": {
            "get_variable_111": {
                "variable": {
                    "value": "cached_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "tensor.name.replace(':', '__') + '_ibp_cache'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_114": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "cached_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(tensor.name.replace(':', '__') + '_ibp_cache', shape=tensor.shape, dtype=tensor.dtype, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_189": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rsqrt_195": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boundaries",
                            "variable"
                        ],
                        [
                            "-multiplier * mean",
                            "BinOp"
                        ],
                        [
                            "b + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(b, axis=0)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_209": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.upper - self.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "fn(r, tf.abs(w), **kwargs)",
                            "Call"
                        ],
                        [
                            "(self.upper - self.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(r, tf.abs(w))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_230": {
                "*inputs": {
                    "value": "[update_lower_op, update_upper_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_168": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier",
                            "variable"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_190": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_191": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.lower + self.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "fn(c, w, **kwargs)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(self.lower + self.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(c, w) + b",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier",
                            "variable"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_209": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier",
                            "variable"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_223": {
                "logits": {
                    "value": "ubs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag(ub) + tf.expand_dims(lb, axis=-2) - tf.matrix_diag(lb)",
                            "BinOp"
                        ],
                        [
                            "tf.matrix_diag_part(tf.nn.softmax(ubs))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_224": {
                "logits": {
                    "value": "lbs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag(lb) + tf.expand_dims(ub, axis=-2) - tf.matrix_diag(ub)",
                            "BinOp"
                        ],
                        [
                            "tf.matrix_diag_part(tf.nn.softmax(lbs))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_220": {
                "input": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_221": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_184": {
                "x": {
                    "value": "a.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(a.upper, b * tf.ones_like(a.lower))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_184": {
                "x": {
                    "value": "a.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "b * tf.ones_like(a.lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_184": {
                "input": {
                    "value": "a.lower",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/crown.py": {
        "tensorflow": {
            "concat_209": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(a)[0:rank - 1], [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_269": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ibp_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._specification(self._predictor.modules)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "self._interval_bounds_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(v <= 0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "c_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.one_hot(spec.correct_idx[:, 1], spec.num_specifications + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_377": {
                "variable": {
                    "value": "c_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "spec.wrong_idx[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "spec.num_specifications + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "spec.num_specifications",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_92": {
                "variable": {
                    "value": "new_bound_w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nsk,lk->nsl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_106": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "effective_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s[0] * s[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "batched_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[effective_batch_size, s[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "batched_output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[effective_batch_size, output_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_117": {
                "variable": {
                    "value": "bound_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(bound.w, batched_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "batched_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([effective_batch_size, output_shape[1:]], 0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + list(strides) + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_123": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(s[0], [1]), tf.reshape(s[1], [1]), output_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "new_bound_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bound_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(tf.reshape(bound.w, batched_shape), filter=w, output_shape=batched_output_shape, strides=[1] + list(strides) + [1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(s[0], [1]), tf.reshape(s[1], [1]), output_shape[1:]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_145": {
                "variable": {
                    "value": "f_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('nsi,ni->ns', self._reshape_to_rank(tf.maximum(self.lower.w, 0), 3), self._reshape_to_rank(self.lower.lower, 2)) + tf.einsum('nsi,ni->ns', self._reshape_to_rank(tf.minimum(self.lower.w, 0), 3), self._reshape_to_rank(self.lower.upper, 2))",
                            "BinOp"
                        ],
                        [
                            "lb + self.lower.b",
                            "BinOp"
                        ],
                        [
                            "wrapper.input_bounds.lower",
                            "Attribute"
                        ],
                        [
                            "initial_bound.lower if compute_lower else None",
                            "IfExp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_146": {
                "variable": {
                    "value": "f_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('nsi,ni->ns', self._reshape_to_rank(tf.maximum(self.upper.w, 0), 3), self._reshape_to_rank(self.upper.upper, 2)) + tf.einsum('nsi,ni->ns', self._reshape_to_rank(tf.minimum(self.upper.w, 0), 3), self._reshape_to_rank(self.upper.lower, 2))",
                            "BinOp"
                        ],
                        [
                            "ub + self.upper.b",
                            "BinOp"
                        ],
                        [
                            "wrapper.input_bounds.upper",
                            "Attribute"
                        ],
                        [
                            "initial_bound.upper if compute_upper else None",
                            "IfExp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_149": {
                "variable": {
                    "value": "f_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(ub, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(f_ub, f_lb + 1e-08)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "f_lb + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_154": {
                "variable": {
                    "value": "ub_scaling_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ub_scaling_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_ub / (f_ub - f_lb)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(ub_scaling_matrix, 1)",
                            "Call"
                        ],
                        [
                            "self._get_monotonic_fn_bound(wrapper, fn)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_155": {
                "variable": {
                    "value": "lb_scaling_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(ub_scaling_matrix, 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "new_bound_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([tf.shape(bound.w)[:2], input_shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(a)[0:rank - 1], [-1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_291": {
                "variable": {
                    "value": "mixture_bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self._crown_bound_schedule < 1e-06",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ibp_bounds",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_build_crown_ibp_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_crown_ibp_bounds",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_293": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mixture_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._crown_bound_schedule < 1e-06, lambda : ibp_bounds, _build_crown_ibp_bounds)",
                            "Call"
                        ],
                        [
                            "ibp_bounds",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "self._crown_ibp_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(v <= 0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_297": {
                "variable": {
                    "value": "self._crown_ibp_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensordot_94": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(spec.num_specifications)",
                            "Call"
                        ],
                        [
                            "spec.d if spec.d is not None else tf.zeros(spec.num_specifications)",
                            "IfExp"
                        ],
                        [
                            "self._matvec(ub_mult, ub_bias) + self._matvec(lb_mult, lb_bias)",
                            "BinOp"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_131": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_sum(bound.w, [2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(spec.num_specifications)",
                            "Call"
                        ],
                        [
                            "spec.d if spec.d is not None else tf.zeros(spec.num_specifications)",
                            "IfExp"
                        ],
                        [
                            "self._matvec(ub_mult, ub_bias) + self._matvec(lb_mult, lb_bias)",
                            "BinOp"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_271": {
                "x": {
                    "value": "v <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_376": {
                "indices": {
                    "value": "spec.correct_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "spec.num_specifications + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_63": {
                "equation": {
                    "value": "nsi,ni->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._reshape_to_rank(tf.maximum(self.lower.w, 0), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._reshape_to_rank(self.lower.lower, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_66": {
                "equation": {
                    "value": "nsi,ni->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._reshape_to_rank(tf.minimum(self.lower.w, 0), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._reshape_to_rank(self.lower.upper, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_72": {
                "equation": {
                    "value": "nsi,ni->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._reshape_to_rank(tf.maximum(self.upper.w, 0), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._reshape_to_rank(self.upper.upper, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_75": {
                "equation": {
                    "value": "nsi,ni->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._reshape_to_rank(tf.minimum(self.upper.w, 0), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._reshape_to_rank(self.upper.lower, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batched_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([effective_batch_size, s[2:]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_155": {
                "x": {
                    "value": "ub_scaling_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_ub / (f_ub - f_lb)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(ub_scaling_matrix, 1)",
                            "Call"
                        ],
                        [
                            "self._get_monotonic_fn_bound(wrapper, fn)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_186": {
                "x": {
                    "value": "self.upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_187": {
                "x": {
                    "value": "self.upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_189": {
                "x": {
                    "value": "self.lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_190": {
                "x": {
                    "value": "self.lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "values": {
                    "value": "[tf.shape(bound.w)[:2], input_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_226": {
                "equation": {
                    "value": "nsc,c->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.reduce_sum(a, [2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(spec.num_specifications)",
                            "Call"
                        ],
                        [
                            "spec.d if spec.d is not None else tf.zeros(spec.num_specifications)",
                            "IfExp"
                        ],
                        [
                            "self._matvec(ub_mult, ub_bias) + self._matvec(lb_mult, lb_bias)",
                            "BinOp"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_229": {
                "equation": {
                    "value": "nsi,ni->ns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "BackwardBounds._reshape_to_rank(a, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "BackwardBounds._reshape_to_rank(b, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_294": {
                "x": {
                    "value": "v <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "shape": {
                    "value": "spec.num_specifications",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "s[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_209": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_64": {
                "x": {
                    "value": "self.lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_67": {
                "x": {
                    "value": "self.lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_73": {
                "x": {
                    "value": "self.upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_76": {
                "x": {
                    "value": "self.upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_198": {
                "input": {
                    "value": "bound.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/fastlin.py": {
        "tensorflow": {
            "maximum_108": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_109": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_123": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_124": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_137": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_138": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_164": {
                "variable": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ub > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "lb < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_166": {
                "variable": {
                    "value": "ambiguous_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "ub - lb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(ub)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_167": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "ub / ambiguous_denom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(lb >= 0, tf.ones_like(lb), tf.zeros_like(lb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "-lb",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(lb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expr.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensordot_205": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_211": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_212": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_214": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(expr.w, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_216": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(expr.w)[:2], tf.shape(w)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_223": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_224": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convolution_226": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(expr.w, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_228": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(expr.w)[:2], tf.shape(w)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_263": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_267": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[input_size], input_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.eye(input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[input_size], input_shape], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_269": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.eye(input_size), output_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(identity, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(identity, [batch_size] + [1] * (len(input_shape) + 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_270": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.eye(input_size), output_shape)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(identity, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(identity, [batch_size] + [1] * (len(input_shape) + 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size] + [1] * (len(input_shape) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_331": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_344": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_368": {
                "variable": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ub > -self._nominal",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "lb < -self._nominal",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_370": {
                "variable": {
                    "value": "ambiguous_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "ub - lb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(ub)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_371": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "(self._nominal + ub) / ambiguous_denom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(lb >= -self._nominal, tf.ones_like(lb), tf.zeros_like(lb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_374": {
                "variable": {
                    "value": "scale_complement",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_ambiguous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(ub > 0, lb < 0)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(ub > -self._nominal, lb < -self._nominal)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "-(self._nominal + lb) / ambiguous_denom",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(lb >= -self._nominal, tf.zeros_like(lb), tf.ones_like(lb))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_393": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_80": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._prior_bounds.lower",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_81": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.minimum(ub, self._prior_bounds.upper)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_neg), self._scale_expression(self.upper, w_pos))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.upper, w_pos, padding, stride), self._conv1d_expression(self.lower, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.upper, w_pos, padding, strides), self._conv2d_expression(self.lower, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "concrete.upper",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(upper.w, 0), upper.upper) + tf.einsum(equation, tf.minimum(upper.w, 0), upper.lower) + upper.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(ub)",
                            "Call"
                        ],
                        [
                            "concrete.upper_offset",
                            "Attribute"
                        ],
                        [
                            "ub",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._prior_bounds.upper",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_166": {
                "input": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.minimum(ub, self._prior_bounds.upper)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_neg), self._scale_expression(self.upper, w_pos))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.upper, w_pos, padding, stride), self._conv1d_expression(self.lower, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.upper, w_pos, padding, strides), self._conv2d_expression(self.lower, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "concrete.upper",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(upper.w, 0), upper.upper) + tf.einsum(equation, tf.minimum(upper.w, 0), upper.lower) + upper.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(ub)",
                            "Call"
                        ],
                        [
                            "concrete.upper_offset",
                            "Attribute"
                        ],
                        [
                            "ub",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_169": {
                "condition": {
                    "value": "lb >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(lb)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(lb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_214": {
                "tensor": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[tf.reduce_prod(tf.shape(expr.w)[:2])], tf.shape(expr.w)[2:]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(expr.w)[:2], tf.shape(w)[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_261": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_266": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_268": {
                "num_rows": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(lb)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_291": {
                "variable": {
                    "value": "lb_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lb_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_offset, self._prior_bounds.lower_offset)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._prior_bounds.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_292": {
                "variable": {
                    "value": "ub_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ub_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.minimum(ub_offset, self._prior_bounds.upper_offset)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._prior_bounds.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_370": {
                "input": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.minimum(ub, self._prior_bounds.upper)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_neg), self._scale_expression(self.upper, w_pos))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.upper, w_pos, padding, stride), self._conv1d_expression(self.lower, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.upper, w_pos, padding, strides), self._conv2d_expression(self.lower, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(ub, b)",
                            "Call"
                        ],
                        [
                            "concrete.upper",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(upper.w, 0), upper.upper) + tf.einsum(equation, tf.minimum(upper.w, 0), upper.lower) + upper.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(ub)",
                            "Call"
                        ],
                        [
                            "concrete.upper_offset",
                            "Attribute"
                        ],
                        [
                            "ub",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_373": {
                "condition": {
                    "value": "lb >= -self._nominal",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(lb)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(lb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_376": {
                "condition": {
                    "value": "lb >= -self._nominal",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(lb)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(lb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_169": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_169": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_250": {
                "equation": {
                    "value": "equation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ijk,ij->ik'",
                            "str"
                        ],
                        [
                            "'ijnc,ij->inc'",
                            "str"
                        ],
                        [
                            "'ijhwc,ij->ihwc'",
                            "str"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "tf.maximum(lower.w, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "lower.lower",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_251": {
                "equation": {
                    "value": "equation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ijk,ij->ik'",
                            "str"
                        ],
                        [
                            "'ijnc,ij->inc'",
                            "str"
                        ],
                        [
                            "'ijhwc,ij->ihwc'",
                            "str"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "tf.minimum(lower.w, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "lower.upper",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_253": {
                "equation": {
                    "value": "equation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ijk,ij->ik'",
                            "str"
                        ],
                        [
                            "'ijnc,ij->inc'",
                            "str"
                        ],
                        [
                            "'ijhwc,ij->ihwc'",
                            "str"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "tf.maximum(upper.w, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "upper.upper",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "equation": {
                    "value": "equation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ijk,ij->ik'",
                            "str"
                        ],
                        [
                            "'ijnc,ij->inc'",
                            "str"
                        ],
                        [
                            "'ijhwc,ij->ihwc'",
                            "str"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "tf.minimum(upper.w, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "upper.lower",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_bounds.IntervalBounds(bounds, bounds)",
                            "Call"
                        ],
                        [
                            "bounds.concretize()",
                            "Call"
                        ],
                        [
                            "relative_bounds.RelativeIntervalBounds(tf.zeros_like(bounds), tf.zeros_like(bounds), bounds)",
                            "Call"
                        ],
                        [
                            "bounds.concretize()",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_373": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_373": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_376": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_376": {
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concretize_bounds(self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, self._prior_bounds.lower)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._scale_expression(self.lower, w_pos), self._scale_expression(self.upper, w_neg))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv1d_expression(self.lower, w_pos, padding, stride), self._conv1d_expression(self.upper, w_neg, padding, stride))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "self._add_expression(self._conv2d_expression(self.lower, w_pos, padding, strides), self._conv2d_expression(self.upper, w_neg, padding, strides))",
                            "Call"
                        ],
                        [
                            "self._add_bias(lb, b)",
                            "Call"
                        ],
                        [
                            "concrete.lower",
                            "Attribute"
                        ],
                        [
                            "tf.einsum(equation, tf.maximum(lower.w, 0), lower.lower) + tf.einsum(equation, tf.minimum(lower.w, 0), lower.upper) + lower.b",
                            "BinOp"
                        ],
                        [
                            "snt.BatchFlatten()(lb)",
                            "Call"
                        ],
                        [
                            "concrete.lower_offset",
                            "Attribute"
                        ],
                        [
                            "lb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_379": {
                "x": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_380": {
                "x": {
                    "value": "-self._nominal",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_381": {
                "x": {
                    "value": "tf.minimum(-self._nominal, 0.0) - lb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(self._nominal, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_383": {
                "x": {
                    "value": "-self._nominal",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_ambiguous, ub / ambiguous_denom, tf.where(lb >= 0, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ],
                        [
                            "tf.where(is_ambiguous, (self._nominal + ub) / ambiguous_denom, tf.where(lb >= -self._nominal, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_ambiguous, ub / ambiguous_denom, tf.where(lb >= 0, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ],
                        [
                            "tf.where(is_ambiguous, (self._nominal + ub) / ambiguous_denom, tf.where(lb >= -self._nominal, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_212": {
                "input_tensor": {
                    "value": "tf.shape(expr.w)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_213": {
                "input": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_216": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_224": {
                "input_tensor": {
                    "value": "tf.shape(expr.w)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_225": {
                "input": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_228": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(expr.w, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.reshape(expr.w, shape), w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(tf.reshape(expr.w, shape), w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape)",
                            "Call"
                        ],
                        [
                            "snt.BatchReshape(shape, preserve_dims=2)(expr.w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_250": {
                "x": {
                    "value": "lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_251": {
                "x": {
                    "value": "lower.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_253": {
                "x": {
                    "value": "upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_254": {
                "x": {
                    "value": "upper.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_382": {
                "x": {
                    "value": "self._nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_385": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_ambiguous, ub / ambiguous_denom, tf.where(lb >= 0, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ],
                        [
                            "tf.where(is_ambiguous, (self._nominal + ub) / ambiguous_denom, tf.where(lb >= -self._nominal, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_ambiguous, ub / ambiguous_denom, tf.where(lb >= 0, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ],
                        [
                            "tf.where(is_ambiguous, (self._nominal + ub) / ambiguous_denom, tf.where(lb >= -self._nominal, tf.ones_like(lb), tf.zeros_like(lb)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_381": {
                "x": {
                    "value": "-self._nominal",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_224": {
                "input": {
                    "value": "expr.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/layer_utils.py": {
        "tensorflow": {
            "zeros_47": {
                "variable": {
                    "value": "dummy_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(kernel_height, kernel_width, 1, input_channels * output_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "diagonal_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.eye(input_height * input_width, dtype=w.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_height * input_width, input_height, input_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convolution_121": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.eye(input_height * input_width, dtype=w.dtype), shape=[input_height * input_width, input_height, input_width, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.eye(input_length, dtype=w.dtype), shape=[input_length, input_length, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.convolution(diagonal_input, w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(diagonal_input, w, padding=padding, stride=stride)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_height * input_width, output_height, output_width, input_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_height * input_width * input_channels, output_height * output_width * output_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(kernel_length, 1, input_channels * output_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "diagonal_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.eye(input_length, dtype=w.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_length, input_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_174": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.eye(input_height * input_width, dtype=w.dtype), shape=[input_height * input_width, input_height, input_width, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.eye(input_length, dtype=w.dtype), shape=[input_length, input_length, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.convolution(diagonal_input, w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(diagonal_input, w, padding=padding, stride=stride)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_length, output_length, input_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_length * input_channels, output_length * output_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_235": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_244": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(b, [output_height * output_width]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.tile(b, [output_length]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "-w * mean",
                            "BinOp"
                        ],
                        [
                            "b + offset",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.zeros(dtype=w.dtype, shape=())",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convolution_49": {
                "variable": {
                    "value": "dummy_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dummy_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dtype=w.dtype, shape=[1] + input_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv1d_52": {
                "variable": {
                    "value": "dummy_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dummy_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(dtype=w.dtype, shape=[1] + input_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, shape=(kernel_height, kernel_width, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_height * input_width, output_height, output_width, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 3, 1, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_height * input_width * input_channels, output_height * output_width * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=(kernel_length, 1, input_channels * output_channels))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, shape=[input_length, output_length, input_channels, output_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, shape=[input_length * input_channels, output_length * output_channels])",
                            "Call"
                        ],
                        [
                            "tf.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(w, axis=0)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_119": {
                "num_rows": {
                    "value": "input_height * input_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_140": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(b, [output_height * output_width]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.tile(b, [output_length]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "-w * mean",
                            "BinOp"
                        ],
                        [
                            "b + offset",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.zeros(dtype=w.dtype, shape=())",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[output_height * output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_172": {
                "num_rows": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_192": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(b, [output_height * output_width]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.tile(b, [output_length]) if b is not None else None",
                            "IfExp"
                        ],
                        [
                            "-w * mean",
                            "BinOp"
                        ],
                        [
                            "b + offset",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(b, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.zeros(dtype=w.dtype, shape=())",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[output_length]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/layers.py": {
        "tensorflow": {
            "stop_gradient_98": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_103": {
                "input": {
                    "value": "self._variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "self._offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "[mean]",
                            "List"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_78": {
                "x": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch",
                            "Method Argument"
                        ],
                        [
                            "input_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variance": {
                    "value": "self._variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "offset": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_88": {
                "input": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_93": {
                "input": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/loss.py": {
        "tensorflow": {
            "reduce_mean_105": {
                "variable": {
                    "value": "self._cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nominal_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=one_hot_labels, logits=nominal_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=nominal_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_107": {
                "variable": {
                    "value": "nominal_correct_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(nominal_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "self._nominal_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(nominal_correct_examples, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_115": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ibp_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._specification(self._predictor.modules)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "self._interval_bounds_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(v <= 0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_180": {
                "variable": {
                    "value": "correct_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(self._attack.logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "self._attack_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_examples, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "self._attack_success",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self._attack.success, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "variable": {
                    "value": "self._attack_cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attack_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=self._one_hot_labels, logits=self._attack.logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=self._attack.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_95": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_logits.shape[1].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_99": {
                "variable": {
                    "value": "nominal_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, num_classes)",
                            "Call"
                        ],
                        [
                            "one_hot_labels * smooth_positives + smooth_negatives",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "nominal_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictor.logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_103": {
                "variable": {
                    "value": "nominal_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "nominal_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictor.logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "self._verified_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "self._interval_bounds_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_151": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[bounds, tf.zeros([tf.shape(bounds)[0], 1], dtype=bounds.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(bounds), tf.ones([tf.shape(bounds)[0], 1], dtype=bounds.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "self._verified_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf.stop_gradient(l), logits=v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_173": {
                "variable": {
                    "value": "self._attack_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_174": {
                "variable": {
                    "value": "self._attack_success",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_175": {
                "variable": {
                    "value": "self._attack_cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_186": {
                "variable": {
                    "value": "attack_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self._attack.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_189": {
                "variable": {
                    "value": "attack_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "self._attack.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "input": {
                    "value": "nominal_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictor.logits",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "nominal_correct_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(labels, tf.argmax(nominal_logits, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "v <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_132": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "self._verified_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(bounds + self._interval_bounds_hinge_margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "self._verified_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(bounds, -self._interval_bounds_hinge_margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "input": {
                    "value": "self._attack.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "correct_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(labels, tf.argmax(self._attack.logits, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "self._attack.success",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_134": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(bounds)[0], self._interval_bounds_loss_n]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.shape(bounds)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_gather_137": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([tf.shape(bounds)[0], self._interval_bounds_loss_n], 0, tf.shape(bounds)[1], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_141": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bounds < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_142": {
                "variable": {
                    "value": "smallest_violation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bounds + mask * _BIG_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_144": {
                "variable": {
                    "value": "has_violations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mask, axis=1, keepdims=True) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.shape(bounds)[1], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_147": {
                "variable": {
                    "value": "largest_bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_148": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "has_violations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.reduce_sum(mask, axis=1, keepdims=True) + 0.5, tf.cast(tf.shape(bounds)[1], tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "smallest_violation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(bounds + mask * _BIG_NUMBER, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "largest_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_159": {
                "labels": {
                    "value": "tf.stop_gradient(l)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(ibp_bounds, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([bounds, tf.zeros([tf.shape(bounds)[0], 1], dtype=bounds.dtype)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "shape": {
                    "value": "[tf.shape(bounds)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bounds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_155": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_156": {
                "shape": {
                    "value": "[tf.shape(bounds)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bounds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_163": {
                "features": {
                    "value": "bounds + self._interval_bounds_hinge_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_167": {
                "x": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-self._interval_bounds_hinge_margin",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_146": {
                "x": {
                    "value": "tf.shape(bounds)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_160": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros_like(bounds), tf.ones([tf.shape(bounds)[0], 1], dtype=bounds.dtype)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_136": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(bounds < 0.0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_135": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_146": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_152": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_156": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_specification_bounds()",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(bounds, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(bounds, idx)",
                            "Call"
                        ],
                        [
                            "tf.where(has_violations, smallest_violation, largest_bounds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/src/model.py": {
        "tensorflow": {
            "zeros_initializer_680": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_688": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_295": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.op.inputs[num_inputs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_318": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_331": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_333": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_335": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_337": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_353": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_360": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_367": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_380": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_391": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_384": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_397": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_413": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "strided_slice_429": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_437": {
                "dims": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/src/relative_bounds.py": {
        "tensorflow": {
            "maximum_103": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_104": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_131": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_132": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_142": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_164": {
                "variable": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_165": {
                "variable": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convolution_175": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_237": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "tf.zeros_like(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_240": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "tf.zeros_like(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_246": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_288": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nominal_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_in",
                            "Method Argument"
                        ],
                        [
                            "nominal_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, nominal_in.shape.ndims - 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_256": {
                "*inputs": {
                    "value": "[update_lower, update_upper]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "a": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_108": {
                "a": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_133": {
                "input": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_135": {
                "input": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_137": {
                "input": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_139": {
                "input": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_166": {
                "input": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_168": {
                "input": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_170": {
                "input": {
                    "value": "self.upper_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_172": {
                "input": {
                    "value": "self.lower_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, 0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_238": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_241": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_244": {
                "x": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.lower_offset, w_pos) + tf.matmul(self.upper_offset, w_neg)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(self.lower_offset, w_pos, padding=padding, stride=stride) + tf.nn.conv1d(self.upper_offset, w_neg, padding=padding, stride=stride)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.convolution(self.lower_offset, w_pos, padding=padding, strides=strides) + tf.nn.convolution(self.upper_offset, w_neg, padding=padding, strides=strides)",
                            "BinOp"
                        ],
                        [
                            "_maxpool_bounds(fn, None, None, self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_maxpool_bounds(fn, parameters['ksize'][1:-1], parameters['strides'][1:-1], self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_activation_bounds(fn, self.lower_offset, self.upper_offset, nominal_in=self.nominal, parameters=parameters)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(self.lower_offset, tf.zeros_like(mean), variance, None, scale, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb, ub)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.upper_offset, w_pos) + tf.matmul(self.lower_offset, w_neg)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(self.upper_offset, w_pos, padding=padding, stride=stride) + tf.nn.conv1d(self.lower_offset, w_neg, padding=padding, stride=stride)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.convolution(self.upper_offset, w_pos, padding=padding, strides=strides) + tf.nn.convolution(self.lower_offset, w_neg, padding=padding, strides=strides)",
                            "BinOp"
                        ],
                        [
                            "_maxpool_bounds(fn, None, None, self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_maxpool_bounds(fn, parameters['ksize'][1:-1], parameters['strides'][1:-1], self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_activation_bounds(fn, self.lower_offset, self.upper_offset, nominal_in=self.nominal, parameters=parameters)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(self.upper_offset, tf.zeros_like(mean), variance, None, scale, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, ub)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_244": {
                "x": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.lower_offset, w_pos) + tf.matmul(self.upper_offset, w_neg)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(self.lower_offset, w_pos, padding=padding, stride=stride) + tf.nn.conv1d(self.upper_offset, w_neg, padding=padding, stride=stride)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.convolution(self.lower_offset, w_pos, padding=padding, strides=strides) + tf.nn.convolution(self.upper_offset, w_neg, padding=padding, strides=strides)",
                            "BinOp"
                        ],
                        [
                            "_maxpool_bounds(fn, None, None, self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_maxpool_bounds(fn, parameters['ksize'][1:-1], parameters['strides'][1:-1], self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_activation_bounds(fn, self.lower_offset, self.upper_offset, nominal_in=self.nominal, parameters=parameters)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(self.lower_offset, tf.zeros_like(mean), variance, None, scale, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb, ub)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.upper_offset, w_pos) + tf.matmul(self.lower_offset, w_neg)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(self.upper_offset, w_pos, padding=padding, stride=stride) + tf.nn.conv1d(self.lower_offset, w_neg, padding=padding, stride=stride)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.convolution(self.upper_offset, w_pos, padding=padding, strides=strides) + tf.nn.convolution(self.lower_offset, w_neg, padding=padding, strides=strides)",
                            "BinOp"
                        ],
                        [
                            "_maxpool_bounds(fn, None, None, self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_maxpool_bounds(fn, parameters['ksize'][1:-1], parameters['strides'][1:-1], self.lower_offset, self.upper_offset, nominal_in=self.nominal, nominal_out=nominal_out)",
                            "Call"
                        ],
                        [
                            "_activation_bounds(fn, self.lower_offset, self.upper_offset, nominal_in=self.nominal, parameters=parameters)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(self.upper_offset, tf.zeros_like(mean), variance, None, scale, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb, ub)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_328": {
                "x": {
                    "value": "tf.minimum(nominal_in, 0.0) + lb_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(-nominal_in, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_330": {
                "x": {
                    "value": "tf.minimum(nominal_in, 0.0) + ub_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(-nominal_in, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounds.concretize()",
                            "Call"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_329": {
                "x": {
                    "value": "-nominal_in",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_331": {
                "x": {
                    "value": "-nominal_in",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_335": {
                "x": {
                    "value": "lb_in + tf.minimum(nominal_in, 0.0) * (1.0 - alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * lb_in + tf.minimum(-nominal_in, 0.0) * (1.0 - alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_338": {
                "x": {
                    "value": "ub_in + tf.minimum(nominal_in, 0.0) * (1.0 - alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * ub_in + tf.minimum(-nominal_in, 0.0) * (1.0 - alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_328": {
                "x": {
                    "value": "nominal_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_in",
                            "Method Argument"
                        ],
                        [
                            "nominal_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_330": {
                "x": {
                    "value": "nominal_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_in",
                            "Method Argument"
                        ],
                        [
                            "nominal_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_336": {
                "x": {
                    "value": "nominal_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_in",
                            "Method Argument"
                        ],
                        [
                            "nominal_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_337": {
                "x": {
                    "value": "-nominal_in",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_339": {
                "x": {
                    "value": "nominal_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nominal_in",
                            "Method Argument"
                        ],
                        [
                            "nominal_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_340": {
                "x": {
                    "value": "-nominal_in",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/simplex_bounds.py": {
        "tensorflow": {
            "matmul_84": {
                "variable": {
                    "value": "mapped_centres",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensordot_85": {
                "variable": {
                    "value": "mapped_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_96": {
                "variable": {
                    "value": "mapped_centres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_116": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_124": {
                "variable": {
                    "value": "mapped_centres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_143": {
                "variable": {
                    "value": "nominal_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nominal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_101": {
                "variable": {
                    "value": "mapped_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_129": {
                "variable": {
                    "value": "mapped_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_192": {
                "input_tensor": {
                    "value": "mapped_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(self.vertices, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(self.vertices, w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(lambda x: tf.nn.conv1d(x, w, padding=padding, stride=stride))(self.vertices)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(self.vertices, w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(lambda x: tf.nn.convolution(x, w, padding=padding, strides=strides))(self.vertices)",
                            "Call"
                        ],
                        [
                            "mapped_vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_193": {
                "input_tensor": {
                    "value": "mapped_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(self.vertices, w, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(self.vertices, w, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(lambda x: tf.nn.conv1d(x, w, padding=padding, stride=stride))(self.vertices)",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(self.vertices, w, padding=padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(lambda x: tf.nn.convolution(x, w, padding=padding, strides=strides))(self.vertices)",
                            "Call"
                        ],
                        [
                            "mapped_vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_163": {
                "input": {
                    "value": "parameters['denom']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_136": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/src/specification.py": {
        "tensorflow": {
            "einsum_121": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ikj->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_124": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ikj->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bounds.upper - bounds.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', r, tf.abs(w))",
                            "Call"
                        ],
                        [
                            "(bounds.upper - bounds.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', r, tf.abs(w))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_190": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.transpose(w), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_191": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(b, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "w_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(w_t, self._correct_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_193": {
                "variable": {
                    "value": "b_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(b_t, self._correct_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "w_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.gather_nd(w_t, self._wrong_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_195": {
                "variable": {
                    "value": "b_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(b, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_201": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ijk->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ijk->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bounds.upper - bounds.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', r, tf.abs(w))",
                            "Call"
                        ],
                        [
                            "(bounds.upper - bounds.lower) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', r, tf.abs(w))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_252": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "correct_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[i, tf.cast(label, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_254": {
                "variable": {
                    "value": "wrong_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(tf.reshape(i, [batch_size, 1]), [1, self._num_classes - 1]), tf.gather(indices, label)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_274": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_275": {
                "variable": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(tf.reshape(i, [batch_size, 1]), [1, self.num_specifications]), target_class]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_298": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_300": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "tf.cast(tf.expand_dims(label, -1), tf.int32) + j",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_315": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_316": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "j + tf.cast(tf.equal(j, tf.cast(l, tf.int32)), tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_85": {
                "variable": {
                    "value": "irrelevant",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.cast(tf.abs(c) > 1e-06, tf.int32), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_89": {
                "variable": {
                    "value": "irrelevant",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "irrelevant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(tf.cast(tf.abs(c) > 1e-06, tf.int32), axis=-1, keepdims=True), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(irrelevant, [1, 1, num_outputs])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, num_outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.boolean_mask(c, tf.logical_not(irrelevant))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1, num_outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_112": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,lk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,k->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._d",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,k->ij', self._c, b)",
                            "Call"
                        ],
                        [
                            "b + self._d",
                            "BinOp"
                        ],
                        [
                            "modules[-1].module.b",
                            "Attribute"
                        ],
                        [
                            "b_wrong - b_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_131": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ikj->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(indices, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_180": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bounds.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_181": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bounds.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_209": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.lower, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_211": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_class",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_class, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.mod(tf.cast(tf.expand_dims(label, -1), tf.int32) + j, num_classes)",
                            "Call"
                        ],
                        [
                            "tf.mod(j + tf.cast(tf.equal(j, tf.cast(l, tf.int32)), tf.int32), num_classes)",
                            "Call"
                        ],
                        [
                            "target_class",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_124": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_133": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "rij,ikj->rik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_136": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "rsbo,bso->rbs",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_187": {
                "input": {
                    "value": "bounds.lower",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_190": {
                "input": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._d",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,k->ij', self._c, b)",
                            "Call"
                        ],
                        [
                            "b + self._d",
                            "BinOp"
                        ],
                        [
                            "modules[-1].module.b",
                            "Attribute"
                        ],
                        [
                            "b_wrong - b_correct",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_192": {
                "params": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.transpose(w), 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_193": {
                "params": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(b, 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_194": {
                "params": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.transpose(w), 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_204": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_215": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_216": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.lower, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_218": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.lower, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_219": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._wrong_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.upper, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(wrong_class_logits, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(wrong_class_logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_226": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._correct_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_227": {
                "variable": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.lower, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_229": {
                "variable": {
                    "value": "wrong_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._wrong_idx, tf.tile(tf.reshape(tf.range(self.num_specifications, dtype=tf.int32), [1, self.num_specifications, 1]), [batch_size, 1, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_234": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "wrong_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrong_idx",
                            "Call"
                        ],
                        [
                            "tf.concat([self._wrong_idx, tf.tile(tf.reshape(tf.range(self.num_specifications, dtype=tf.int32), [1, self.num_specifications, 1]), [batch_size, 1, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.tile(tf.reshape(i, [batch_size, 1]), [1, self._num_classes - 1]), tf.gather(indices, label)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_235": {
                "variable": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "wrong_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.upper, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(wrong_class_logits, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, wrong_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(wrong_class_logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_251": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_267": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_297": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_314": {
                "input": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "num_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "tf.cast(tf.abs(c) > 1e-06, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_87": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_88": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_91": {
                "tensor": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(irrelevant)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "correct_class_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(bounds.lower, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(correct_class_logit, -1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(logits, self._correct_idx)",
                            "Call"
                        ],
                        [
                            "tf.transpose(correct_class_logit, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._c",
                            "Attribute"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('ijk,lk->ijl', self._c, w)",
                            "Call"
                        ],
                        [
                            "modules[-1].module.w",
                            "Attribute"
                        ],
                        [
                            "w_wrong - w_correct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_253": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_255": {
                "input": {
                    "value": "tf.reshape(i, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._num_classes - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_256": {
                "params": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(indices, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_276": {
                "input": {
                    "value": "tf.reshape(i, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.num_specifications]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_300": {
                "x": {
                    "value": "tf.expand_dims(label, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_317": {
                "x": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "tf.abs(c) > 1e-06",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_91": {
                "x": {
                    "value": "irrelevant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(tf.cast(tf.abs(c) > 1e-06, tf.int32), axis=-1, keepdims=True), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(irrelevant, [1, 1, num_outputs])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_228": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self._num_classes)",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self._num_classes)",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_317": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=(batch_size, num_targets), minval=1, maxval=num_classes, dtype=tf.int32, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(-logits, k=num_targets, sorted=False).indices",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(l, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_231": {
                "input": {
                    "value": "tf.reshape(tf.range(self.num_specifications, dtype=tf.int32), [1, self.num_specifications, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_86": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Call"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ikj->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c + b",
                            "BinOp"
                        ],
                        [
                            "(bounds.lower + bounds.upper) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('ij,ijk->ik', c, w)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_231": {
                "tensor": {
                    "value": "tf.range(self.num_specifications, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.num_specifications, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_231": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/utils.py": {
        "tensorflow": {
            "cast_100": {
                "variable": {
                    "value": "is_ramp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step > init_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "is_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step >= mid_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_292": {
                "variable": {
                    "value": "regularizers",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_575": {
                "variable": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(final_step) + [large_step + 2]",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(boundaries, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_577": {
                "variable": {
                    "value": "large_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "large_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(final_step) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.constant(large_step, shape=boundaries.shape, dtype=step.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "boundaries.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "step.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_579": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "b < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "large_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(final_step) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.constant(large_step, shape=boundaries.shape, dtype=step.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boundaries - tf.minimum(step + 1, large_step + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.where(b < 0, large_step, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_580": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmin(b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "len(init_values) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_582": {
                "variable": {
                    "value": "init_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(init_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init_step",
                            "Method Argument"
                        ],
                        [
                            "init_step",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_583": {
                "variable": {
                    "value": "final_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "final_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(final_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "final_step",
                            "Method Argument"
                        ],
                        [
                            "final_step",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_584": {
                "variable": {
                    "value": "init_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[first_lr]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(init_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_585": {
                "variable": {
                    "value": "final_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "final_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(final_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_586": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "init_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(init_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init_step",
                            "Method Argument"
                        ],
                        [
                            "init_step",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.argmin(b), len(init_values) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_587": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(final_step, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "final_step",
                            "Method Argument"
                        ],
                        [
                            "final_step",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.argmin(b), len(init_values) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_588": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "init_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[first_lr]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(init_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.argmin(b), len(init_values) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_589": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(final_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.argmin(b), len(init_values) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_602": {
                "variable": {
                    "value": "target_label",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor_network.output_size",
                            "Attribute"
                        ],
                        [
                            "logits.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmin_609": {
                "variable": {
                    "value": "target_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor_network(inputs, override=True, **nominal_args)",
                            "Call"
                        ],
                        [
                            "predictor.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_619": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "specification_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(specification_bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_621": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[specification_bounds, tf.zeros(added_shape, dtype=specification_bounds.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_624": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(specification_bounds), tf.ones(added_shape, dtype=specification_bounds.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_646": {
                "variable": {
                    "value": "specification_bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "specification_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(specification_bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, init_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, expand_shape[0], expand_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, crop_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_70": {
                "fn": {
                    "value": "random_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_image",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(images, -1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_80": {
                "t": {
                    "value": "linear_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate * (final_value - init_value) + init_value",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "min(init_value, final_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max(init_value, final_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_237": {
                "variable": {
                    "value": "train_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_605": {
                "x1": {
                    "value": "tf.cast(label, tf.int64) + target_label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor_network.output_size",
                            "Attribute"
                        ],
                        [
                            "logits.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_612": {
                "x1": {
                    "value": "target_label + tf.cast(tf.equal(target_label, tf.cast(label, tf.int64)), tf.int64)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor_network.output_size",
                            "Attribute"
                        ],
                        [
                            "logits.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_628": {
                "labels": {
                    "value": "tf.stop_gradient(l)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([specification_bounds, tf.zeros(added_shape, dtype=specification_bounds.dtype)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_638": {
                "input_tensor": {
                    "value": "specification_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(specification_bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_crop_66": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, init_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, expand_shape[0], expand_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, crop_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "crop_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_68": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, init_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, expand_shape[0], expand_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, crop_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_78": {
                "x": {
                    "value": "step - init_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_138": {
                "pred": {
                    "value": "step < warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(warmup)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : schedule",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "input_tensor": {
                    "value": "regularizers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_542": {
                "value": {
                    "value": "first_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(eval(tokens[0]))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_576": {
                "x": {
                    "value": "step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "large_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_580": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boundaries - tf.minimum(step + 1, large_step + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.where(b < 0, large_step, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_601": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_654": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_655": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "image_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "image_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_131": {
                "pred": {
                    "value": "step < warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(warmup)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(final)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "maximum_265": {
                "x": {
                    "value": "inputs - train_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_266": {
                "x": {
                    "value": "inputs + train_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_423": {
                "input": {
                    "value": "attack_specification.target_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_605": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_612": {
                "x": {
                    "value": "tf.equal(target_label, tf.cast(label, tf.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_623": {
                "shape": {
                    "value": "added_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[0], shape[1], 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "specification_bounds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_625": {
                "input": {
                    "value": "specification_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(specification_bounds, axis=-1)",
                            "Call"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ],
                        [
                            "specification_bounds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_626": {
                "shape": {
                    "value": "added_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[0], shape[1], 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "specification_bounds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_629": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros_like(specification_bounds), tf.ones(added_shape, dtype=specification_bounds.dtype)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_norm_663": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(perturbation.get_shape())))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_664": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "image_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "image_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_139": {
                "value": {
                    "value": "warmup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_429": {
                "input": {
                    "value": "attack_specification.target_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_613": {
                "x": {
                    "value": "target_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=(batch_size,), minval=1, maxval=num_classes, dtype=tf.int64, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.argmin(logits, axis=1, output_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(label, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_131": {
                "value": {
                    "value": "warmup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_132": {
                "value": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final",
                            "Method Argument"
                        ],
                        [
                            "final",
                            "Method Argument"
                        ],
                        [
                            "final",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_435": {
                "input": {
                    "value": "attack_specification.target_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_590": {
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_613": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_105": {
                "x": {
                    "value": "tf.cast(step - init_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_105": {
                "x": {
                    "value": "step - init_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/src/verifiable_wrapper.py": {
        "tensorflow": {
            "convert_to_tensor_119": {
                "value": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Call"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/tests/attacks_test.py": {
        "tensorflow": {
            "constant_84": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[epsilon]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "[[[1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "[[[-1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_81": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/bounds_test.py": {
        "tensorflow": {
            "constant_36": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_60": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3, 0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3, 0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1.0, -10.0, -10.0], [1.0, -10.0, -10.0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(1, 3), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_85": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3, 0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3, 0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1.0, -10.0, -10.0], [1.0, -10.0, -10.0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(1, 3), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_101": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_112": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_123": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_138": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, -10.0, -10.0], [1.0, -10.0, -10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_153": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(-1, 2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(3, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_186": {
                "variable": {
                    "value": "update_all_caches_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[input_bounds.update_cache_op, output_bounds.update_cache_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_141": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_155": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_156": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_34": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_57": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_58": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_83": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_161": {
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_175": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_176": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/crown_test.py": {
        "tensorflow": {
            "constant_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_97": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_29": {
                "tensor": {
                    "value": "tf.eye(dimension)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_29": {
                "num_rows": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_39": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_40": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_75": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_76": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/fastlin_test.py": {
        "tensorflow": {
            "constant_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_108": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[-2, 3]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_43": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_44": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_78": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_105": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_106": {
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/layers_test.py": {
        "tensorflow": {
            "constant_30": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v] * 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_65": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 2, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_57": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/loss_test.py": {
        "tensorflow": {
            "constant_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_32": {
                "value": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/model_test.py": {
        "tensorflow": {
            "constant_45": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_159": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_181": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_194": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_224": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_225": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2, 2, 4, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "z_left",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_128": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, z0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_207": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ],
                        [
                            "z0",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.375",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_171": {
                "input_": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_174": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3, 4], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(input_size)(z0)",
                            "Call"
                        ],
                        [
                            "z_left + z0",
                            "BinOp"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [1, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(z0, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(z, axis=2, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, z0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "fn(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "snt.BatchFlatten()(z)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2, 3, 4]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "snt.Linear(10)(z0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(z0, alpha=0.375)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "interval_bound_propagation/tests/relative_bounds_test.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(input_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "lb_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "ub_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "nominal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, -5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_59": {
                "variable": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_60": {
                "variable": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_61": {
                "variable": {
                    "value": "nominal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.1, 4.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(kernel_height, kernel_width, input_channels, output_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "lb_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_height, input_width, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "ub_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_height, input_width, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "nominal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_height, input_width, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(kernel_length, input_channels, output_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "lb_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_length, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "ub_rel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_length, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "nominal",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_length, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_283": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_134": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_134": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_208": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_208": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_243": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_243": {
                "x": {
                    "value": "lb_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-1.0, -1.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.minimum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ub_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[2.0, 2.0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_height, input_width, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_length, input_channels))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(dtype=dtype, shape=(batch_size, input_size))",
                            "Call"
                        ],
                        [
                            "tf.maximum(lb_in, ub_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_254": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_256": {
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/simplex_bounds_test.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(input_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(vocab_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "centres",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, -5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.01, -0.02, 0.03]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_59": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0], [10.0, 10.0], [0.0, -20.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_61": {
                "variable": {
                    "value": "centres",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(kernel_length, input_channels, output_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_vertices, input_length, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "centres",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_length, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "interval_bound_propagation/tests/specification_test.py": {
        "tensorflow": {
            "constant_58": {
                "variable": {
                    "value": "specifications",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "specifications",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(specifications, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(specifications)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_60": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "specifications",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(specifications, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(specifications)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(label)[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_99": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_101": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_106": {
                "variable": {
                    "value": "random_logits1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_restarts, batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_107": {
                "variable": {
                    "value": "random_logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_restarts, num_classes - 1, batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_39": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(2, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "zip(output1, output2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_42": {
                "value": {
                    "value": "z_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[3, 4]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "z_upper + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_45": {
                "value": {
                    "value": "z_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[3, 4]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "z_upper + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}