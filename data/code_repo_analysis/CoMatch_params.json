{
    "Train_CoMatch.py": {
        "torch": {
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "criteria_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_315": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': wd_params}, {'params': non_wd_params, 'weight_decay': 0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "queue_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.queue_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.low_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "queue_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.queue_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ims_x_weak, ims_u_weak, ims_u_strong0, ims_u_strong1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "(logits_u_w, logits_u_s0, logits_u_s1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits[bt:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "btu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ims_u_weak.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_110": {
                "variable": {
                    "value": "(feats_u_w, feats_u_s0, feats_u_s1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features[bt:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "btu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ims_u_weak.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_150": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(feats_u_s0, feats_u_s1.t()) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_154": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits_u_w, dim=1)",
                            "Call"
                        ],
                        [
                            "probs / prob_avg",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "args.alpha * probs + (1 - args.alpha) * torch.mm(A, queue_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "probs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_u_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(logits[bt:], btu)",
                            "Call"
                        ],
                        [
                            "logits_u_w.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "prob_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_one_epoch(epoch, **train_args, queue_feats=queue_feats, queue_probs=queue_probs, queue_ptr=queue_ptr)",
                            "Call"
                        ],
                        [
                            "prob_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "prob_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_135": {
                "variable": {
                    "value": "(scores, lbs_u_guess)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits_u_w, dim=1)",
                            "Call"
                        ],
                        [
                            "probs / prob_avg",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "args.alpha * probs + (1 - args.alpha) * torch.mm(A, queue_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "feats_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_u_w, feats_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ims_x_weak.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_139": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "lbs_x.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "probs_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs_orig, onehot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_218": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "model(ims)",
                            "Call"
                        ],
                        [
                            "ema_model(ims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_289": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_131": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(feats_u_w, queue_feats.t()) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "model(ims)",
                            "Call"
                        ],
                        [
                            "ema_model(ims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_379": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'ema_model': ema_model.state_dict(), 'optimizer': optim.state_dict(), 'lr_scheduler': lr_schdlr.state_dict(), 'prob_list': prob_list, 'queue': {'queue_feats': queue_feats, 'queue_probs': queue_probs, 'queue_ptr': queue_ptr}, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoint_%02d.pth' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_150": {
                "input": {
                    "value": "feats_u_s0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(features[bt:], btu)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feats_u_s1.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "F.log_softmax(logits_u_s0, dim=1) * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_131": {
                "input": {
                    "value": "feats_u_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(features[bt:], btu)",
                            "Call"
                        ],
                        [
                            "feats_u_w.detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queue_feats.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_133": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.mm(feats_u_w, queue_feats.t()) / args.temperature)",
                            "Call"
                        ],
                        [
                            "A / A.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queue_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(args.queue_size, args.n_classes).cuda()",
                            "Call"
                        ],
                        [
                            "train_one_epoch(epoch, **train_args, queue_feats=queue_feats, queue_probs=queue_probs, queue_ptr=queue_ptr)",
                            "Call"
                        ],
                        [
                            "queue_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_162": {
                "input": {
                    "value": "sim_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_166": {
                "input": {
                    "value": "logits_u_s0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(logits[bt:], btu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Train_fixmatch.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criteria_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "criteria_u",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_267": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': wd_params}, {'params': non_wd_params, 'weight_decay': 0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ims_x_weak, ims_u_weak, ims_u_strong]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "(logits_u_w, logits_u_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits[bt:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "bt * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_u_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(logits[bt:], bt * mu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(scores, lbs_u_guess)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits_u_w, dim=1)",
                            "Call"
                        ],
                        [
                            "probs.detach()",
                            "Call"
                        ],
                        [
                            "probs / prob_avg",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "model(ims)",
                            "Call"
                        ],
                        [
                            "ema_model(ims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_241": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "prob_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_one_epoch(epoch, **train_args)",
                            "Call"
                        ],
                        [
                            "prob_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "prob_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "model(ims)",
                            "Call"
                        ],
                        [
                            "ema_model(ims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "WideResNet.py": {
        "torch": {
            "randn_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_228": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_236": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chan",
                            "Method Argument"
                        ],
                        [
                            "in_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chan",
                            "Method Argument"
                        ],
                        [
                            "in_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chan",
                            "Method Argument"
                        ],
                        [
                            "out_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chan",
                            "Method Argument"
                        ],
                        [
                            "out_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chan",
                            "Method Argument"
                        ],
                        [
                            "out_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chan",
                            "Method Argument"
                        ],
                        [
                            "out_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_layers[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "variable": {
                    "value": "self.relu_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_207": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.fc1(feat)",
                            "Call"
                        ],
                        [
                            "self.relu_mlp(feat)",
                            "Call"
                        ],
                        [
                            "self.fc2(feat)",
                            "Call"
                        ],
                        [
                            "self.l2norm(feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chan",
                            "Method Argument"
                        ],
                        [
                            "in_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chan",
                            "Method Argument"
                        ],
                        [
                            "out_chan",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * self.k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_201": {
                "variable": {
                    "value": "self.relu_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/cifar.py": {
        "torch": {
            "DataLoader_192": {
                "variable": {
                    "value": "dl_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar(dataset=dataset, data=data_x, labels=label_x, mode='train_x')",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler_x, batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "dl_u",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar(dataset=dataset, data=data_u, labels=label_u, mode='train_u_%s' % method)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler_u, batch_size * mu, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_224": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar(dataset=dataset, data=data, labels=labels, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/sampler.py": {
        "torch": {
            "as_tensor_159": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_111": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_164": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_108": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randperm(n) for _ in range(n_repeats)]",
                            "ListComp"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_128": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_109": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/transform.py": {
        "torch": {
            "from_numpy_70": {
                "ndarray": {
                    "value": "im.transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "im.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/Model.py": {
        "torch": {
            "cat_234": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_24": {
                "variable": {
                    "value": "self.queue_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_90": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_96": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_x, img_u_s0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "variable": {
                    "value": "sim_self",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(features_u_s0, features_u_s1.t()) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_207": {
                "variable": {
                    "value": "sim_past",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(features_u_s0, m_feat) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sim_self, sim_past]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "btx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_214": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels_x.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "probs_xu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[onehot, probs_orig]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_93": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "imgs_m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_x, img_u_w, img_u_s1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_u_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_m[btx:btx + btu]",
                            "Subscript"
                        ],
                        [
                            "outputs_u_w.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "probs_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.hist_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_178": {
                "variable": {
                    "value": "probs_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_194": {
                "variable": {
                    "value": "Q_self",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(outputs_u_w, dim=1)",
                            "Call"
                        ],
                        [
                            "probs / probs_avg",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "args.alpha * probs + (1 - args.alpha) * torch.mm(A, m_probs_xu.t())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "probs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_199": {
                "variable": {
                    "value": "Q_past",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(outputs_u_w, dim=1)",
                            "Call"
                        ],
                        [
                            "probs / probs_avg",
                            "BinOp"
                        ],
                        [
                            "probs / probs.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "args.alpha * probs + (1 - args.alpha) * torch.mm(A, m_probs_xu.t())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_probs_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.probs_u.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Q_self, Q_past]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_230": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_23": {
                "*size": {
                    "value": "args.low_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "args.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "args.low_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "args.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_187": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(feature_u_w, m_feat_xu) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_205": {
                "input": {
                    "value": "features_u_s0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[btx:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features_u_s1.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_207": {
                "input": {
                    "value": "features_u_s0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[btx:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.queue_s.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_187": {
                "input": {
                    "value": "feature_u_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_m[btx:btx + btu]",
                            "Subscript"
                        ],
                        [
                            "feature_u_w.detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_feat_xu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.queue_w.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_189": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.mm(feature_u_w, m_feat_xu) / args.temperature)",
                            "Call"
                        ],
                        [
                            "A / A.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_probs_xu.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/Train_CoMatch.py": {
        "torch": {
            "device_count_112": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_200": {
                "variable": {
                    "value": "criteria_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_292": {
                "variable": {
                    "value": "labeled_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transform_weak)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "labeled_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transform_weak)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "labeled_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(labeled_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_297": {
                "variable": {
                    "value": "unlabeled_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, three_crops_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "unlabeled_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, three_crops_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(args.batch_size_u)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "unlabeled_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(unlabeled_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transform_eval)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_192": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(resnet50, args, width=1)",
                            "Call"
                        ],
                        [
                            "Model(resnet50, args, width=2)",
                            "Call"
                        ],
                        [
                            "Model(resnet50, args, width=4)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_197": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(resnet50, args, width=1)",
                            "Call"
                        ],
                        [
                            "Model(resnet50, args, width=2)",
                            "Call"
                        ],
                        [
                            "Model(resnet50, args, width=4)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_477": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_184": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "num_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_384": {
                "variable": {
                    "value": "(scores, lbs_u_guess)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(args, labeled_batch, unlabeled_batch, epoch=epoch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_213": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_398": {
                "input": {
                    "value": "pos_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_388": {
                "input": {
                    "value": "F.log_softmax(outputs_u_s0, dim=1) * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_388": {
                "input": {
                    "value": "outputs_u_s0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(args, labeled_batch, unlabeled_batch, epoch=epoch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/resnet.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_126": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}