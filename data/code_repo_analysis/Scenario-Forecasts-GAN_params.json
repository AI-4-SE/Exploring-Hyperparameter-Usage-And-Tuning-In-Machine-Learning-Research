{
    "runable_model_yize.py": {
        "tensorflow": {
            "clip_by_value_39": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(o, 1e-07, 1.0 - 1e-07)",
                            "Call"
                        ],
                        [
                            "o",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_9": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.concat([image, yb * tf.ones([self.batch_size, 24, 24, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_10": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=o, logits=t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([dim_z + dim_y, dim_W1], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([dim_W1 + dim_y, dim_W2 * 6 * 6], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([5, 5, dim_W3, dim_W2 + dim_y], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([5, 5, dim_channel, dim_W3 + dim_y], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.discrim_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([5, 5, dim_channel + dim_y, dim_W3], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "discrim_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "self.discrim_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([5, 5, dim_W3 + dim_y, dim_W2], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "discrim_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "self.discrim_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([dim_W2 * 6 * 6 + dim_y, dim_W1], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "discrim_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.discrim_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([dim_W1 + dim_y, 1], stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "discrim_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "image_real",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "pred_high",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "pred_low",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "image_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(Z, Y)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "p_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "raw_real2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(image_real, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "raw_gen2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(image_gen, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_115": {
                "variable": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "-tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)) - tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_122": {
                "variable": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(contextual_loss_latter)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(contextual_loss_latter) * 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(-tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)) - tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low)))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(contextual_loss_latter), tf.ones_like(contextual_loss_latter) * 1000000.0, contextual_loss_latter)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "contextual_loss_latter2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(-tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)) - tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low)))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(contextual_loss_latter), tf.ones_like(contextual_loss_latter) * 1000000.0, contextual_loss_latter)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "variable": {
                    "value": "contextual_loss_former",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.square(tf.multiply(mask, image_gen) - tf.multiply(mask, image_real)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "contextual_loss_prepare",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.square(tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, image_real)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_137": {
                "variable": {
                    "value": "grad_complete_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "complete_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contextual_loss_former + self.lam * perceptual_loss + 0.05 * contextual_loss_latter2",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.concat([Z, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_138": {
                "variable": {
                    "value": "grad_uniform_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "contextual_loss_prepare",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.contrib.layers.flatten(tf.square(tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, image_real))), 1)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.concat([Z, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([self.batch_size, 1, 1, self.dim_y])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, yb * tf.ones([self.batch_size, 24, 24, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h1, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h2, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "discri",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.discrim_W3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Z, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(tf.matmul(Z, self.gen_W1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h1, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_165": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(tf.matmul(h1, self.gen_W2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 6, 6, self.dim_W2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_170": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 12, 12, self.dim_W3]",
                            "List"
                        ],
                        [
                            "[batch_size, 12, 12, self.dim_W3]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_172": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_175": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(discri))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.concat([h3, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.concat([h3, yb * tf.ones([batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 24, 24, self.dim_channel]",
                            "List"
                        ],
                        [
                            "[batch_size, 24, 24, self.dim_channel]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_y])",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "Z_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Z, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(tf.matmul(Z_, self.gen_W1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h1, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(tf.matmul(h1, self.gen_W2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 6, 6, self.dim_W2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_192": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.discrim_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([self.batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(h1, self.gen_W2)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [batch_size, 6, 6, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.concat([h2, yb * tf.ones([batch_size, 6, 6, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 12, 12, self.dim_W3]",
                            "List"
                        ],
                        [
                            "[batch_size, 12, 12, self.dim_W3]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, yb * tf.ones([batch_size, 12, 12, self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_197": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(discri))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.concat([h3, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.concat([h3, yb * tf.ones([batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 24, 24, self.dim_channel]",
                            "List"
                        ],
                        [
                            "[batch_size, 24, 24, self.dim_channel]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(Z, Y)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(b, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_19": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.concat([image, yb * tf.ones([self.batch_size, 24, 24, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_40": {
                "labels": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(o, 1e-07, 1.0 - 1e-07)",
                            "Call"
                        ],
                        [
                            "o",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_10": {
                "x": {
                    "value": "X - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_11": {
                "x": {
                    "value": "std + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(b, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_36": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.concat([image, yb * tf.ones([self.batch_size, 24, 24, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "raw_gen2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(image_gen, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "raw_gen2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(image_gen, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_122": {
                "x": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(-tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)) - tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low)))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(contextual_loss_latter), tf.ones_like(contextual_loss_latter) * 1000000.0, contextual_loss_latter)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_131": {
                "structure": {
                    "value": "tf.square(tf.multiply(mask, image_gen) - tf.multiply(mask, image_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_133": {
                "structure": {
                    "value": "tf.square(tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, image_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_145": {
                "values": {
                    "value": "[self.batch_size, 1, 1, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.concat([image, yb * tf.ones([self.batch_size, 24, 24, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.discrim_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_20": {
                "x": {
                    "value": "X - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "x": {
                    "value": "std + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_122": {
                "input": {
                    "value": "contextual_loss_latter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(-tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)) - tf.log(mask + tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, pred_low)))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(contextual_loss_latter), tf.ones_like(contextual_loss_latter) * 1000000.0, contextual_loss_latter)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_132": {
                "x": {
                    "value": "tf.multiply(mask, image_gen) - tf.multiply(mask, image_real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_134": {
                "x": {
                    "value": "tf.multiply(tf.ones_like(mask) - mask, image_gen) - tf.multiply(tf.ones_like(mask) - mask, image_real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_151": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(X, self.discrim_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z_, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.discrim_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "a": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.concat([Z, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(X, self.discrim_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z_, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "Z_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([Z, Y], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(X, self.discrim_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, yb * tf.ones([self.batch_size, 12, 12, self.dim_y])], 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(tf.matmul(Z_, self.gen_W1)))",
                            "Call"
                        ],
                        [
                            "tf.concat([h1, Y], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_116": {
                "x": {
                    "value": "mask + tf.multiply(tf.ones_like(mask) - mask, pred_high) - tf.multiply(tf.ones_like(mask) - mask, image_gen)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_146": {
                "shape": {
                    "value": "[self.batch_size, 24, 24, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_149": {
                "shape": {
                    "value": "[self.batch_size, 12, 12, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_167": {
                "shape": {
                    "value": "[self.batch_size, 6, 6, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_172": {
                "shape": {
                    "value": "[self.batch_size, 12, 12, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_189": {
                "shape": {
                    "value": "[batch_size, 6, 6, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_194": {
                "shape": {
                    "value": "[batch_size, 12, 12, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_120": {
                "x": {
                    "value": "tf.ones_like(mask) - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(h4)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_134": {
                "x": {
                    "value": "tf.ones_like(mask) - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_117": {
                "x": {
                    "value": "tf.ones_like(mask) - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_121": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_118": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_117": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape, name='mask')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {}
    }
}