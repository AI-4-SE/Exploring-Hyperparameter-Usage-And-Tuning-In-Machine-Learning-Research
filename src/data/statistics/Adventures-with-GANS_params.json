{
    "CycleGAN/CycleGAN.py": {
        "tensorflow": {
            "function_116": {
                "variable": {
                    "value": "generator_function",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "cycle_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.abs(recreated_image, real_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "self.discriminator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.discriminator_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "self.generator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.generator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "function_164": {
                "variable": {
                    "value": "self.discriminator_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "function_182": {
                "variable": {
                    "value": "self.generator_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_104": {
                "a": {
                    "value": "K.abs(K.square(y_pred, y_true))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_104": {
                "x": {
                    "value": "K.square(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "a": {
                    "value": "K.log(y_pred + 1e-12) * y_true + K.log(1 - y_pred + 1e-12) * y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_123": {
                "input": {
                    "value": "real_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discrimator([real_image])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_124": {
                "input": {
                    "value": "fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator_1.outputs[1]",
                            "Subscript"
                        ],
                        [
                            "discrimator([fake_image])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "fake_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator_1.outputs[1]",
                            "Subscript"
                        ],
                        [
                            "discrimator([fake_image])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_127": {
                "x": {
                    "value": "recreated_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recreated_image",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_104": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_109": {
                "x": {
                    "value": "1 - y_pred + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGAN/Discriminator.py": {
        "tensorflow": {
            "Input_24": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.image_size, self.image_size, self.image_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Discriminator_Input_Layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_73": {
                "variable": {
                    "value": "self.discrimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "[input_placeholder]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(1, kernel_size=4, activation='sigmoid', name='Discriminator_Output_Layer')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "self.n_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "First_Layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_40": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_56": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_57": {
                "filters": {
                    "value": "output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_filters * min(2 ** layer, 8)",
                            "BinOp"
                        ],
                        [
                            "self.n_filters * min(2 ** layer, 8)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Branch_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_66": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_67": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Discriminator_Output_Layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_44": {
                "filters": {
                    "value": "output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_filters * min(2 ** layer, 8)",
                            "BinOp"
                        ],
                        [
                            "self.n_filters * min(2 ** layer, 8)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'Branch_{0}'.format(layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGAN/Generator.py": {
        "tensorflow": {
            "Input_76": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.image_size, self.image_size, self.image_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_94": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "[input_placeholder]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Activation('tanh')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_40": {
                "filters": {
                    "value": "next_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(2 * input_filters, self.max_filters)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not (use_batch_norm and skipped_layers > 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_layer_{0}'.format(skipped_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_55": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_56": {
                "filters": {
                    "value": "output_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_filters",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not use_batch_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_transpose_{}'.format(skipped_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Cropping2D_64": {
                "cropping": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_92": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concatenate_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_61": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGAN/Initializers.py": {
        "tensorflow": {
            "RandomNormal_8": {
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomNormal_12": {
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Experiments_With_MNIST/1-MLP-GAN/test_model.py": {
        "tensorflow": {
            "load_model_5": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "./models/generator.h5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Experiments_With_MNIST/2-DCGAN/test_model.py": {
        "tensorflow": {
            "load_model_5": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "./models/generator.h5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Experiments_With_MNIST/3-ACGAN/test_model.py": {
        "tensorflow": {
            "load_model_5": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "./models/generator.h5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Experiments_With_MNIST/4-WGAN/test_model.py": {
        "tensorflow": {
            "load_model_5": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "./models/generator.h5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Conditional_DCGAN/Discriminator.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv_1_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv_1_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.batch_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.batch_norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.batch_norm_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_5(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_5(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Conditional_DCGAN/Generator.py": {
        "torch": {
            "ConvTranspose2d_13": {
                "variable": {
                    "value": "self.deconv_1_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.batch_norm_1_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_16": {
                "variable": {
                    "value": "self.deconv_1_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.batch_norm_1_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_19": {
                "variable": {
                    "value": "self.deconv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.batch_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_22": {
                "variable": {
                    "value": "self.deconv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.batch_norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "variable": {
                    "value": "self.deconv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.batch_norm_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "variable": {
                    "value": "self.deconv_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_data(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_label(labels)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_label(y)",
                            "Call"
                        ],
                        [
                            "leaky_relu(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_data(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_data(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_data(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_5(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_1_data(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_1_data(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv_2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_3(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_3(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_4(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_4(x)",
                            "Call"
                        ],
                        [
                            "leaky_relu(x, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.deconv_5(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Conditional_DCGAN/Optimizer.py": {
        "torch": {
            "Adam_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.beta_1, self.beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}