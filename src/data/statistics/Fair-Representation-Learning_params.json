{
    "dumb_containers.py": {
        "sklearn": {
            "roc_curve_98": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "auc_99": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_190": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "auc_191": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "prediction.py": {
        "sklearn": {
            "NearestNeighbors_47": {
                "variable": {
                    "value": "nbr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogisticRegression_99": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_119": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_142": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_167": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_191": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_236": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "normalize(X, 150)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "normalize(X, 150)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, -2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "normalize(X, 150)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, -2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "normalize(X, 150)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(X).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_raw[:, -2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(P).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_lfr.py": {
        "sklearn": {},
        "torch": {}
    },
    "test_multi.py": {
        "sklearn": {
            "LogisticRegression_146": {
                "variable": {
                    "value": "lin_cls_ori",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogisticRegression_147": {
                "variable": {
                    "value": "lin_cls_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "model.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(len(X[0]), 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "model.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optim_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optim_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "X_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "normalize(X, 20)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_g[cur_batch_stop[i]:right_stop]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x_batch).float()",
                            "Call"
                        ],
                        [
                            "x_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "x_rest",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_rest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[x_rest_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x_rest).float()",
                            "Call"
                        ],
                        [
                            "x_rest.cuda()",
                            "Call"
                        ],
                        [
                            "X[P != p]",
                            "Subscript"
                        ],
                        [
                            "U[P != p]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "len(X[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "params": {
                    "value": "model.critic[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "mean_42": {
                "variable": {
                    "value": "w_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_0 - c_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "mse_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(r_0 - x_0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "mse_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(r_1 - x_rest, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_features, n_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_dim, n_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_64": {
                "input": {
                    "value": "r_0 - x_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_65": {
                "input": {
                    "value": "r_1 - x_rest",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.Linear(n_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_42": {
                "variable": {
                    "value": "optim_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optim_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optim_crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_46": {
                "variable": {
                    "value": "l1_crit",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "lin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(len(X[0]), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lin_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(X).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_123": {
                "input": {
                    "value": "torch.mul(y, torch.log(y_score)) + torch.mul(1 - y, torch.log(1 - y_score))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "len(X[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_123": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log(1 - y_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "torch.pow(row, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "1 - y_score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_95": {
                "input": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weight.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}