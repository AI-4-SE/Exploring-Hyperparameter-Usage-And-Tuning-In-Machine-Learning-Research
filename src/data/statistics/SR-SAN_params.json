{
    "model.py": {
        "torch": {
            "stack_73": {
                "variable": {
                    "value": "seq_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get(i) for i in torch.arange(len(alias_inputs)).long()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_25": {
                "variable": {
                    "value": "self.transformerEncoderLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "opt.nhead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "self.hidden_size * opt.feedforward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TransformerEncoder_26": {
                "variable": {
                    "value": "self.transformerEncoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "self.transformerEncoderLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "opt.layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_29": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_dc_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.lr_dc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[torch.arange(mask.shape[0]).long(), torch.sum(mask, 1) - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "b.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_38": {
                "start": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_73": {
                "start": {
                    "value": "len(alias_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trans_to_cuda(torch.Tensor(mask).long())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}