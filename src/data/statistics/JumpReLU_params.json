{
    "activationfun.py": {
        "torch": {}
    },
    "advfuns.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "ent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "ent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_64": {
                "variable": {
                    "value": "tmp_dis_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_adv[i, :] - X_prev[i, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_67": {
                "variable": {
                    "value": "tmp_dis_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(X_adv[i, :] - X_prev[i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_65": {
                "input": {
                    "value": "X_prev[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_67": {
                "input": {
                    "value": "X_adv[i, :] - X_prev[i, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "torch.abs(X_prev[i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "ent + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "ent + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "X_prev[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "attack_BlackBox.py": {
        "torch": {
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_list[args.arch]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_list[args.arch]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_229": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_list[args.arch]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_list[args.arch]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "X_ori",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_130": {
                "variable": {
                    "value": "X_fgsm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "X_deepfool1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "X_deepfool2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_133": {
                "variable": {
                    "value": "X_tr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_139": {
                "variable": {
                    "value": "X_ori",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "X_fgsm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "X_deepfool1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_142": {
                "variable": {
                    "value": "X_deepfool2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_143": {
                "variable": {
                    "value": "X_tr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_230": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attack_WhiteBox.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_117": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_list[args.arch]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "X_ori",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "X_fgsm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_133": {
                "variable": {
                    "value": "X_deepfool1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_134": {
                "variable": {
                    "value": "X_deepfool2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "X_tr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "X_ori",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_142": {
                "variable": {
                    "value": "X_fgsm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_143": {
                "variable": {
                    "value": "X_deepfool1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_144": {
                "variable": {
                    "value": "X_deepfool2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_145": {
                "variable": {
                    "value": "X_tr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "attack_method.py": {
        "torch": {
            "cross_entropy_26": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "X_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_fgsm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.data + pertubation",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "torch.min(data.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "torch.max(data.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_102": {
                "variable": {
                    "value": "(output, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "z_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_out",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output[range(len(data)), n * [0]]",
                            "Subscript"
                        ],
                        [
                            "output[range(len(data)), n * [0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1 + c] + list(data.size())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "pers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1 + c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "(per, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_135": {
                "variable": {
                    "value": "X_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(x_fgsm, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "fgsm(model, data, target, eps)",
                            "Call"
                        ],
                        [
                            "fgsm(model, X_adv, target, eps)",
                            "Call"
                        ],
                        [
                            "data.data + torch.diag(torch.abs((per + 0.0001) * 1.02)).mm(update.view(n, -1)).view(data.size())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(X_adv, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "data.cuda() + 0.0",
                            "BinOp"
                        ],
                        [
                            "data.data + (((per + 0.0001) * 1.02).view(n, -1) * update.view(n, -1)).view(data.size())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(X_adv, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "deepcopy(data.cuda())",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "torch.min(data.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "torch.max(data.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_178": {
                "variable": {
                    "value": "(output, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "z_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_out",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output[range(len(data)), n * [0]]",
                            "Subscript"
                        ],
                        [
                            "output[range(len(data)), n * [0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "pers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1 + c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output[range(n), target_ind] - output[range(n), true_ind]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_255": {
                "variable": {
                    "value": "X_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(x_fgsm, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "fgsm(model, data, target, eps)",
                            "Call"
                        ],
                        [
                            "fgsm(model, X_adv, target, eps)",
                            "Call"
                        ],
                        [
                            "data.data + torch.diag(torch.abs((per + 0.0001) * 1.02)).mm(update.view(n, -1)).view(data.size())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(X_adv, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "data.cuda() + 0.0",
                            "BinOp"
                        ],
                        [
                            "data.data + (((per + 0.0001) * 1.02).view(n, -1) * update.view(n, -1)).view(data.size())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(X_adv, torch.min(data.data), torch.max(data.data))",
                            "Call"
                        ],
                        [
                            "deepcopy(data.cuda())",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "torch.min(data.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "torch.max(data.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_120": {
                "variable": {
                    "value": "grad_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.data.view(n, -1) - true_grad.data.view(n, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_129": {
                "variable": {
                    "value": "update",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "update",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grads[index, range(len(data)), :] - true_grad.data",
                            "BinOp"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "deepcopy(data.grad.data)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_188": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_193": {
                "variable": {
                    "value": "grad_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.data.view(n, -1) - true_grad.data.view(n, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_198": {
                "variable": {
                    "value": "(per, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_201": {
                "variable": {
                    "value": "(per, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(data), 1 + c).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_245": {
                "variable": {
                    "value": "update",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "update",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grads[index, range(len(data)), :] - true_grad.data",
                            "BinOp"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "deepcopy(data.grad.data)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_28": {
                "input": {
                    "value": "data.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_30": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_30": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_134": {
                "input": {
                    "value": "torch.abs((per + 0.0001) * 1.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_134": {
                "input": {
                    "value": "update.view(n, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_135": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_255": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_255": {
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_271": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_242": {
                "input": {
                    "value": "update",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grads[index, range(len(data)), :] - true_grad.data",
                            "BinOp"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "deepcopy(data.grad.data)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "q",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "tmp_mask.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_133": {
                "input": {
                    "value": "update",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grads[index, range(len(data)), :] - true_grad.data",
                            "BinOp"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "deepcopy(data.grad.data)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_248": {
                "input": {
                    "value": "update",
                    "type": "Call",
                    "possible_values": [
                        [
                            "grads[index, range(len(data)), :] - true_grad.data",
                            "BinOp"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "deepcopy(data.grad.data)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.sign(update)",
                            "Call"
                        ],
                        [
                            "update.view(n, -1)",
                            "Call"
                        ],
                        [
                            "update / (torch.norm(update, p=2, dim=1).view(n, 1) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_134": {
                "input": {
                    "value": "(per + 0.0001) * 1.02",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/AlexLike.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5 * 5 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.JumpReLU(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.JumpReLU(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.JumpReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(self.JumpReLU(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(self.JumpReLU(self.conv4(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/LeNetLike.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "90",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "90",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu_jump(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "self.relu_jump(F.max_pool2d(self.conv2(x), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu_jump(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_jump(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_37": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/MobileNetV2.py": {
        "torch": {
            "randn_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1280",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1280",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.JumpReLU(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "self.JumpReLU(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet.py": {
        "torch": {
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * ALPHA_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16 * ALPHA_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_117": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * ALPHA_ * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/WideResNet.py": {
        "torch": {
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(self.JumpReLU(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.JumpReLU(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1[i](out)",
                            "Call"
                        ],
                        [
                            "self.layer2[i](out)",
                            "Call"
                        ],
                        [
                            "self.layer3[i](out)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 * level, 18, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(channel0, channel1, channel2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_178": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(self.JumpReLU(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.JumpReLU(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1[i](out)",
                            "Call"
                        ],
                        [
                            "self.layer2[i](out)",
                            "Call"
                        ],
                        [
                            "self.layer3[i](out)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.JumpReLU(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "3 * level",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataParallel_108": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_list[args.arch].cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.name + '_result/' + args.arch + '_baseline' + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_112": {
                "f": {
                    "value": "args.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "adv_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adv_data.cpu(), data[adv_r:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.name + '_result/' + args.arch + '_robust' + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('../data', split='extra', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('../data', split='test', download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.EMNIST('../data', train=True, download=True, split='balanced', transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1751,), (0.3267,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.EMNIST('../data', train=False, split='balanced', transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1751,), (0.3267,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='../data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='../data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='../data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root='../data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder('../data/tiny-imagenet-200/train', transforms.Compose([transforms.RandomCrop(64, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder('../data/tiny-imagenet-200/val', transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}