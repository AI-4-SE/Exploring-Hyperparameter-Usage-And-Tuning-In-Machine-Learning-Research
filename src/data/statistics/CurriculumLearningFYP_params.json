{
    "tasks/access.py": {
        "tensorflow": {
            "expand_dims_56": {
                "variable": {
                    "value": "expand_address",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "address",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "reset_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reset_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(reset_weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_59": {
                "variable": {
                    "value": "reset_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - weighted_resets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "add_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "address",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "read_words",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "read_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._read_weights(inputs, memory=memory, prev_read_weights=prev_state.read_weights, link=linkage_state.link)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(content_mode, 2) * content_weights + tf.reduce_sum(tf.expand_dims(forward_mode, 3) * forward_weights, 2) + tf.reduce_sum(tf.expand_dims(backward_mode, 3) * backward_weights, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory + add_matrix",
                            "BinOp"
                        ],
                        [
                            "_erase_and_write(prev_state.memory, address=write_weights, reset_weights=inputs.erase_vectors, values=inputs.write_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "free_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "snt.Linear(self._num_reads, name='free_gate')(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "allocation_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "snt.Linear(self._num_writes, name='allocation_gate')(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_192": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "snt.Linear(self._num_writes, name='write_gate')(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "read_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "_linear(self._num_reads, num_read_modes, name='read_mode')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "erase_memory",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[memory, address, reset_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "additive_write",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[memory, address, values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "allocation_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.allocation_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_258": {
                "variable": {
                    "value": "write_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.write_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_323": {
                "dims": {
                    "value": "[self._num_reads, self._word_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Linear(first_dim * second_dim, name=name)(inputs)",
                            "Call"
                        ],
                        [
                            "activation(linear, name=name + '_activation')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, first_dim, second_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_244": {
                "name": {
                    "value": "write_weights",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, memory, usage]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "read_weights",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, memory, prev_read_weights, link]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "tf.expand_dims(backward_mode, 3) * backward_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_314": {
                "dims": {
                    "value": "[self._memory_size, self._word_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_315": {
                "dims": {
                    "value": "[self._num_reads, self._memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_316": {
                "dims": {
                    "value": "[self._num_writes, self._memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_304": {
                "input_tensor": {
                    "value": "tf.expand_dims(forward_mode, 3) * forward_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_304": {
                "input": {
                    "value": "content_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.read_mode[:, :, 2 * self._num_writes]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_306": {
                "input": {
                    "value": "backward_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.read_mode[:, :, :self._num_writes]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_305": {
                "input": {
                    "value": "forward_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.read_mode[:, :, self._num_writes:2 * self._num_writes]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/addressing.py": {
        "tensorflow": {
            "reduce_sum_35": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "transformed_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strengths_op(strengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "x": {
                    "value": "squared_norms + _EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "key_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_vector_norms(keys)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "memory_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_vector_norms(memory)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_303": {
                "variable": {
                    "value": "write_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(write_weights)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_prod(1 - write_weights, [1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_178": {
                "variable": {
                    "value": "expanded_read_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_read_weights] * self._num_writes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_read_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([prev_read_weights] * self._num_writes, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "link",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._link(prev_state.link, prev_state.precedence_weights, write_weights)",
                            "Call"
                        ],
                        [
                            "prev_link_scale * prev_link + new_link",
                            "BinOp"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "forward",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_207": {
                "variable": {
                    "value": "write_weights_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(write_weights)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_prod(1 - write_weights, [1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_208": {
                "variable": {
                    "value": "write_weights_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(write_weights)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_prod(1 - write_weights, [1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "variable": {
                    "value": "prev_precedence_weights_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_precedence_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_240": {
                "variable": {
                    "value": "write_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "write_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(write_weights)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_prod(1 - write_weights, [1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_332": {
                "variable": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(write_gates, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_372": {
                "variable": {
                    "value": "free_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "free_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(free_gate, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_374": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - free_read_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_397": {
                "variable": {
                    "value": "(sorted_nonusage, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nonusage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - usage",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "self._memory_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sort",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cumprod_400": {
                "variable": {
                    "value": "prod_sorted_usage",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sorted_usage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - sorted_nonusage",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorShape_411": {
                "dims": {
                    "value": "[self._memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "directional_read_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_read_weights, link, adjoint_b=forward)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_205": {
                "name": {
                    "value": "link",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "precedence_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_330": {
                "name": {
                    "value": "write_allocation_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_341": {
                "values": {
                    "value": "allocation_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_353": {
                "name": {
                    "value": "usage_after_write",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_371": {
                "name": {
                    "value": "usage_after_read",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_392": {
                "name": {
                    "value": "allocation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "shape": {
                    "value": "[batch_size, self._num_writes, self._memory_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "link.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_247": {
                "dims": {
                    "value": "[self._num_writes, self._memory_size, self._memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_249": {
                "dims": {
                    "value": "[self._num_writes, self._memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_355": {
                "input_tensor": {
                    "value": "1 - write_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/dnc.py": {
        "tensorflow": {
            "TensorShape_73": {
                "variable": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "controller_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_flatten(inputs), batch_flatten(prev_access_output)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[controller_output, batch_flatten(access_output)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_81": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self._clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "shape": {
                    "value": "[batch_size] + self._access.output_size.as_list()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tasks/exp3S.py": {
        "tensorflow": {}
    },
    "tasks/generate_data.py": {
        "tensorflow": {}
    },
    "tasks/ntm.py": {
        "tensorflow": {
            "MultiRNNCell_29": {
                "variable": {
                    "value": "self.controller",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[single_cell(self.controller_units) for _ in range(self.controller_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "controller_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x] + prev_read_vector_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "head_parameter_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "parameters[:, :num_parameters_per_head * num_heads]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.read_head_num + self.write_head_num",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "erase_add_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "parameters[:, num_parameters_per_head * num_heads:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2 * self.write_head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(head_parameter[:, 0:self.memory_vector_dim])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(k, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "inner_product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prev_M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_state.M",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(head_parameter[:, 0:self.memory_vector_dim])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(k, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "inner_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(prev_M, k)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inner_product, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "w_c",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.expand_dims(beta, axis=1) * inner_product",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(head_parameter[:, self.memory_vector_dim + 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(g, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s[:, :self.shift_range + 1], tf.zeros([s.get_shape()[0], self.memory_size - (self.shift_range * 2 + 1)]), s[:, -self.shift_range:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reverse(s, axis=[1]), tf.reverse(s, axis=[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "s_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[t[:, self.memory_size - i - 1:self.memory_size * 2 - i - 1] for i in range(self.memory_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "w_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(w_g, axis=1) * s_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_143": {
                "variable": {
                    "value": "w_sharpen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(w_g, axis=1) * s_matrix, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(gamma, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_54": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(controller_output, total_parameter_num, activation_fn=None, weights_initializer=self.o2p_initializer)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(parameters, -self.clip_value, self.clip_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_parameter[:, 0:self.memory_vector_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_63": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "head_parameter[:, self.memory_vector_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_parameter[:, self.memory_vector_dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_parameter[:, self.memory_vector_dim + 2:self.memory_vector_dim + 2 + (self.shift_range * 2 + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "read_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(read_w_list[i], dim=2) * prev_M",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "write_w_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sigmoid(erase_add_list[i * 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "variable": {
                    "value": "add_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tanh(erase_add_list[i * 2 + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_99": {
                "variable": {
                    "value": "NTM_output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "NTM_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.concat([controller_output] + read_vector_list, axis=1), output_dim, activation_fn=None, weights_initializer=self.o2o_initializer)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(NTM_output, -self.clip_value, self.clip_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_27": {
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "controller",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "o2p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.step > 0 or self.reuse",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "o2o",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.step > 0 or self.reuse",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "input": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(head_parameter[:, -1]) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "w_sharpen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(w_, tf.expand_dims(gamma, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "features": {
                    "value": "head_parameter[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "'addressing_head_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "x": {
                    "value": "erase_add_list[i * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "x": {
                    "value": "erase_add_list[i * 2 + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.addressing(k, beta, g, s, gamma, prev_M, prev_w_list[i])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(write_w_list[i], axis=2)",
                            "Call"
                        ],
                        [
                            "w_sharpen / tf.reduce_sum(w_sharpen, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "erase_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sigmoid(erase_add_list[i * 2]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_97": {
                "values": {
                    "value": "[controller_output] + read_vector_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(head_parameter[:, self.memory_vector_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "shape": {
                    "value": "[s.get_shape()[0], self.memory_size - (self.shift_range * 2 + 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_137": {
                "tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(head_parameter[:, self.memory_vector_dim + 2:self.memory_vector_dim + 2 + (self.shift_range * 2 + 1)])",
                            "Call"
                        ],
                        [
                            "tf.concat([s[:, :self.shift_range + 1], tf.zeros([s.get_shape()[0], self.memory_size - (self.shift_range * 2 + 1)]), s[:, -self.shift_range:]], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g * w_c + (1 - g) * prev_w",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_187": {
                "dims": {
                    "value": "[self.memory_size * self.memory_vector_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "read_w_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_150": {
                "x": {
                    "value": "learned_init(self.memory_vector_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "logits": {
                    "value": "learned_init(self.memory_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_159": {
                "x": {
                    "value": "tf.reshape(learned_init(self.memory_size * self.memory_vector_dim), [self.memory_size, self.memory_vector_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_89": {
                "shape": {
                    "value": "M.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "tensor": {
                    "value": "learned_init(self.memory_size * self.memory_vector_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.memory_size, self.memory_vector_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_166": {
                "x": {
                    "value": "tf.get_variable('init_M', [self.memory_size, self.memory_vector_dim], initializer=tf.random_normal_initializer(mean=0.0, stddev=0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "name": {
                    "value": "init_M",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.memory_size, self.memory_vector_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_171": {
                "name": {
                    "value": "init_M",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.memory_size, self.memory_vector_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_167": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_172": {
                "value": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/run_tasks.py": {
        "tensorflow": {}
    },
    "tasks/util.py": {
        "tensorflow": {
            "unstack_28": {
                "variable": {
                    "value": "unpacked",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "permutations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "batch_invert_permutation",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[permutations]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_30": {
                "values": {
                    "value": "inverses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.invert_permutation(permutation) for permutation in unpacked]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "batch_gather",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[values, indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_38": {
                "values": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(value, index) for (value, index) in unpacked]",
                            "ListComp"
                        ],
                        [
                            "np.zeros(length)",
                            "Call"
                        ]
                    ]
                }
            },
            "invert_permutation_29": {
                "x": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_36": {
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_37": {
                "params": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/utils.py": {
        "tensorflow": {
            "concat_5": {
                "values": {
                    "value": "[tf.expand_dims(x, dim) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_8": {
                "input": {
                    "value": "tf.contrib.layers.fully_connected(tf.ones([1, 1]), units, activation_fn=None, biases_initializer=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_13": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / np.sqrt(input_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_5": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_8": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}