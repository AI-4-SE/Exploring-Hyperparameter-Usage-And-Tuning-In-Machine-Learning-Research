{
    "code/dgp_rff.py": {
        "tensorflow": {
            "Variable_112": {
                "variable": {
                    "value": "self.log_theta_sigma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_layers])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_theta_sigma2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "self.mc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Din]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Dout]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_153": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "prior_mean_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "log_prior_var_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_347": {
                "variable": {
                    "value": "all_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_353": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_364": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs/",
                    "type": "Constant",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "self.llscale0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5 * np.log(self.d_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.log_theta_lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.llscale0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_theta_lengthscale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "prior_mean_Omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.nl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_220": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.z_for_Omega_fixed[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones([self.mc, self.d_in[i], self.d_out[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_229": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.z_for_Omega_fixed[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones([self.mc, self.d_in[i], self.d_out[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "variable": {
                    "value": "layer_times_Omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "Omega_from_q[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_344": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "shape": {
                    "value": "[n_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_179": {
                "initial_value": {
                    "value": "mu[i] * tf.ones([self.d_in[i], self.d_out[i]])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "q_Omega",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "initial_value": {
                    "value": "sigma2[i] * tf.ones([self.d_in[i], self.d_out[i]])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "q_Omega",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "initial_value": {
                    "value": "tf.zeros([self.dhat_in[i], self.dhat_out[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "initial_value": {
                    "value": "tf.zeros([self.dhat_in[i], self.dhat_out[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_232": {
                "variable": {
                    "value": "reshaped_log_prior_var_Omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.log_prior_var_Omega[i] / 2, [self.d_in[i], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.d_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_255": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_261": {
                "x": {
                    "value": "tf.ones([self.mc, batch_size, Din])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensordot_283": {
                "variable": {
                    "value": "mean_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Phi",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.cos(layer_times_Omega), tf.sin(layer_times_Omega)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.sign(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.maximum(layer_times_Omega, 0.0)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.square(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.mean_W[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_284": {
                "variable": {
                    "value": "var_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.pow(Phi, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.exp(self.log_var_W[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_285": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(z_for_F_sample, tf.sqrt(var_F))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mean_F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(Phi, self.mean_W[i], [[2], [0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_288": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Phi",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.cos(layer_times_Omega), tf.sin(layer_times_Omega)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.sign(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.maximum(layer_times_Omega, 0.0)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.square(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_from_q[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_291": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[F, self.layer[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(X)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_317": {
                "input_tensor": {
                    "value": "-np.log(mc_test) + utils.logsumexp(self.likelihood.log_cond_prob(self.Y, self.layer_out), 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "shape": {
                    "value": "[self.dhat_in[i], self.dhat_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "shape": {
                    "value": "[self.dhat_in[i], self.dhat_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_212": {
                "x": {
                    "value": "tf.multiply(z, tf.exp(self.log_var_Omega[i] / 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mean_Omega[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_220": {
                "shape": {
                    "value": "[self.mc, self.d_in[i], self.d_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_221": {
                "x": {
                    "value": "tf.multiply(z, tf.exp(self.log_var_Omega[i] / 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mean_Omega[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_229": {
                "shape": {
                    "value": "[self.mc, self.d_in[i], self.d_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_245": {
                "x": {
                    "value": "tf.multiply(z, tf.exp(self.log_var_W[i] / 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mean_W[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_261": {
                "shape": {
                    "value": "[self.mc, batch_size, Din]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_302": {
                "input_tensor": {
                    "value": "tf.reduce_mean(ll, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "initial_value": {
                    "value": "tmp[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "initial_value": {
                    "value": "tmp[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "0.5 * np.log(self.d_in[i])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "initial_value": {
                    "value": "tf.multiply(tf.ones([self.d_in[i]]), self.llscale0[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_theta_lengthscale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[self.d_in[i], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_179": {
                "shape": {
                    "value": "[self.d_in[i], self.d_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_180": {
                "shape": {
                    "value": "[self.d_in[i], self.d_out[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_212": {
                "x": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, self.d_in[i], self.d_out[i])",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "utils.get_normal_samples(self.mc, self.dhat_in[i], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(self.log_var_Omega[i] / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_221": {
                "x": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, self.d_in[i], self.d_out[i])",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "utils.get_normal_samples(self.mc, self.dhat_in[i], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(self.log_var_Omega[i] / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "tensor": {
                    "value": "self.log_prior_var_Omega[i] / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.d_in[i], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_233": {
                "x": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, self.d_in[i], self.d_out[i])",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "utils.get_normal_samples(self.mc, self.dhat_in[i], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(reshaped_log_prior_var_Omega)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_235": {
                "x": {
                    "value": "tf.multiply(z, tf.exp(self.log_prior_var_Omega[i] / 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.prior_mean_Omega[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_245": {
                "x": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, self.d_in[i], self.d_out[i])",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "utils.get_normal_samples(self.mc, self.dhat_in[i], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(self.log_var_W[i] / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_271": {
                "values": {
                    "value": "[tf.cos(layer_times_Omega), tf.sin(layer_times_Omega)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_284": {
                "x": {
                    "value": "Phi",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.cos(layer_times_Omega), tf.sin(layer_times_Omega)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.sign(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.maximum(layer_times_Omega, 0.0)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.square(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_284": {
                "x": {
                    "value": "self.log_var_W[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_285": {
                "x": {
                    "value": "z_for_F_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, tf.shape(Phi)[1], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(var_F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_302": {
                "input_tensor": {
                    "value": "ll",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.likelihood.log_cond_prob(Y, layer_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_124": {
                "x": {
                    "value": "tf.ones([self.d_in[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.llscale0[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_212": {
                "x": {
                    "value": "self.log_var_Omega[i] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_221": {
                "x": {
                    "value": "self.log_var_Omega[i] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_233": {
                "x": {
                    "value": "reshaped_log_prior_var_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(self.log_prior_var_Omega[i] / 2, [self.d_in[i], 1]), [1, self.d_out[i]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_235": {
                "x": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.get_normal_samples(self.mc, self.d_in[i], self.d_out[i])",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.z_for_Omega_fixed[i], tf.ones([self.mc, self.d_in[i], self.d_out[i]]))",
                            "Call"
                        ],
                        [
                            "utils.get_normal_samples(self.mc, self.dhat_in[i], self.dhat_out[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(self.log_prior_var_Omega[i] / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_245": {
                "x": {
                    "value": "self.log_var_W[i] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_271": {
                "x": {
                    "value": "0.5 * self.log_theta_sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_271": {
                "x": {
                    "value": "tf.sqrt(1.0 * self.n_rff[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_274": {
                "values": {
                    "value": "[tf.sign(tf.maximum(layer_times_Omega, 0.0))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_276": {
                "values": {
                    "value": "[tf.maximum(layer_times_Omega, 0.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_278": {
                "values": {
                    "value": "[tf.square(tf.maximum(layer_times_Omega, 0.0))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_282": {
                "input": {
                    "value": "Phi",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.cos(layer_times_Omega), tf.sin(layer_times_Omega)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.sign(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.maximum(layer_times_Omega, 0.0)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(0.5 * self.log_theta_sigma2[i]) / tf.cast(tf.sqrt(1.0 * self.n_rff[i]), 'float32') * tf.concat(values=[tf.square(tf.maximum(layer_times_Omega, 0.0))], axis=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_285": {
                "x": {
                    "value": "var_F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(tf.pow(Phi, 2), tf.exp(self.log_var_W[i]), [[2], [0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_124": {
                "shape": {
                    "value": "[self.d_in[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_235": {
                "x": {
                    "value": "self.log_prior_var_Omega[i] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_271": {
                "x": {
                    "value": "1.0 * self.n_rff[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_274": {
                "x": {
                    "value": "0.5 * self.log_theta_sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_274": {
                "x": {
                    "value": "tf.sqrt(1.0 * self.n_rff[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_276": {
                "x": {
                    "value": "0.5 * self.log_theta_sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_276": {
                "x": {
                    "value": "tf.sqrt(1.0 * self.n_rff[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_278": {
                "x": {
                    "value": "0.5 * self.log_theta_sigma2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_278": {
                "x": {
                    "value": "tf.sqrt(1.0 * self.n_rff[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_271": {
                "x": {
                    "value": "layer_times_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.layer[i], Omega_from_q[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_271": {
                "x": {
                    "value": "layer_times_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.layer[i], Omega_from_q[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_274": {
                "x": {
                    "value": "1.0 * self.n_rff[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_276": {
                "x": {
                    "value": "1.0 * self.n_rff[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_278": {
                "x": {
                    "value": "1.0 * self.n_rff[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_274": {
                "x": {
                    "value": "tf.maximum(layer_times_Omega, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_276": {
                "x": {
                    "value": "layer_times_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.layer[i], Omega_from_q[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_278": {
                "x": {
                    "value": "tf.maximum(layer_times_Omega, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_274": {
                "x": {
                    "value": "layer_times_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.layer[i], Omega_from_q[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_278": {
                "x": {
                    "value": "layer_times_Omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.layer[i], Omega_from_q[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/experiments/dgp_rff_classification.py": {
        "tensorflow": {
            "set_random_seed_43": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/experiments/dgp_rff_infmnist.py": {
        "tensorflow": {
            "set_random_seed_146": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/experiments/dgp_rff_mnist.py": {
        "tensorflow": {
            "set_random_seed_127": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/experiments/dgp_rff_regression.py": {
        "tensorflow": {
            "set_random_seed_50": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/likelihoods/gaussian.py": {
        "tensorflow": {
            "Variable_26": {
                "variable": {
                    "value": "self.log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "log_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "log_theta",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/likelihoods/softmax.py": {
        "tensorflow": {
            "exp_38": {
                "x": {
                    "value": "logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latent_val - tf.expand_dims(utils.logsumexp(latent_val, 2), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "output * latent_val",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "utils.logsumexp(latent_val, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/mcmc/compare_variational_mcmc.py": {
        "tensorflow": {
            "set_random_seed_69": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "tensorflow": {
            "reshape_32": {
                "variable": {
                    "value": "log_vp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_vp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(log_vp, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_49": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset name",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "fold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset fold",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Seed for random tf and np operations",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_91": {
                "name": {
                    "value": "ps_hosts",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of hostname:port pairs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_92": {
                "name": {
                    "value": "worker_hosts",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of hostname:port pairs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_94": {
                "name": {
                    "value": "job_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"One of 'ps', 'worker'\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_95": {
                "name": {
                    "value": "task_index",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Index of task within the job",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "log_vp - log_vq + tf.pow(mq - mp, 2) / tf.exp(log_vp) + tf.exp(log_vq - log_vp) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_101": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_102": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_103": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_104": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_20": {
                "x": {
                    "value": "log_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_51": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(vals - m), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(vals - tf.expand_dims(m, dim)), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_20": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_20": {
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.exp(vals - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "tf.exp(vals - tf.expand_dims(m, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_33": {
                "x": {
                    "value": "log_vp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(log_vp, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_51": {
                "x": {
                    "value": "vals - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_53": {
                "x": {
                    "value": "vals - tf.expand_dims(m, dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_33": {
                "x": {
                    "value": "mq - mp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(vals, dim)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}