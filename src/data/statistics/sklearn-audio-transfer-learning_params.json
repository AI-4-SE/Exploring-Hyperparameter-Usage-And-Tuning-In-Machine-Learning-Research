{
    "src/audio_transfer_learning.py": {
        "sklearn": {
            "confusion_matrix_247": {
                "variable": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_248": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "PCA_204": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "config['pca']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'dataset': 'GTZAN', 'num_classes_dataset': 10, 'audio_folder': DATA_FOLDER + 'audio/GTZAN/genres/', 'audio_paths_train': DATA_FOLDER + 'index/GTZAN/train_filtered.txt', 'audio_paths_test': DATA_FOLDER + 'index/GTZAN/test_filtered.txt', 'batch_size': 8, 'features_type': 'musicnn', 'pca': 128, 'model_type': 'SVM', 'load_training_data': 'training_data_GTZAN_MSDmusicnn_max_pool.npz', 'load_evaluation_data': 'evaluation_data_GTZAN_MSDmusicnn_max_pool.npz'}",
                            "Dict"
                        ]
                    ]
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LinearSVC_51": {
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_53": {
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_55": {
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGDClassifier_57": {
                "max_iter": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "loss": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "optimal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MLPClassifier_59": {
                "hidden_layer_sizes": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "sgd",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate_init": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Graph_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/vggish_slim.py": {
        "tensorflow": {
            "Saver_127": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if v.name in vggish_var_names]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, params.NUM_FRAMES, params.NUM_BANDS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, params.NUM_FRAMES, params.NUM_BANDS), name='input_features')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, params.NUM_FRAMES, params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_99": {
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(features, [-1, params.NUM_FRAMES, params.NUM_BANDS, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, params.EMBEDDING_SIZE, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_67": {
                "stddev": {
                    "value": "params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}