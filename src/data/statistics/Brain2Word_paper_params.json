{
    "sample.py": {
        "sklearn": {
            "cosine_similarity_78": {
                "X": {
                    "value": "np.reshape(glove_five, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "converter_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(str(os.path.dirname(os.path.abspath(__file__))) + '/look_ups_gpt-2/converter_table.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_79": {
                "X": {
                    "value": "np.reshape(glove_four, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "converter_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(str(os.path.dirname(os.path.abspath(__file__))) + '/look_ups_gpt-2/converter_table.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_80": {
                "X": {
                    "value": "np.reshape(glove_three, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "converter_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(str(os.path.dirname(os.path.abspath(__file__))) + '/look_ups_gpt-2/converter_table.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_81": {
                "X": {
                    "value": "np.reshape(glove_two, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "converter_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(str(os.path.dirname(os.path.abspath(__file__))) + '/look_ups_gpt-2/converter_table.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_82": {
                "X": {
                    "value": "np.reshape(glove_one, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "converter_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(str(os.path.dirname(os.path.abspath(__file__))) + '/look_ups_gpt-2/converter_table.npy')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "sort_31": {
                "variable": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_32": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(sorted_logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, batch), tf.maximum(tf.reduce_sum(tf.cast(cumulative_probs <= p, tf.int32), axis=-1) - 1, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_38": {
                "variable": {
                    "value": "min_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.sort(logits, direction='DESCENDING', axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, batch), tf.maximum(tf.reduce_sum(tf.cast(cumulative_probs <= p, tf.int32), axis=-1) - 1, 0)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_14": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "tf.equal(k, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _top_k()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_39": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_54": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_107": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_114": {
                "variable": {
                    "value": "(_, _, tokens, probabilities)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[past, prev, output, probabilities]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape(model.past_shape(hparams=hparams, batch_size=batch_size)), tf.TensorShape([batch_size, None]), tf.TensorShape([batch_size, None]), tf.TensorShape([batch_size])]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_16": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_22": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "logits": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.sort(logits, direction='DESCENDING', axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "sample_sequence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_78": {
                "variable": {
                    "value": "similar_five",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cosine_similarity(np.reshape(glove_five, (1, -1)), converter_table)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_79": {
                "variable": {
                    "value": "similar_four",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cosine_similarity(np.reshape(glove_four, (1, -1)), converter_table)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_80": {
                "variable": {
                    "value": "similar_three",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cosine_similarity(np.reshape(glove_three, (1, -1)), converter_table)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_81": {
                "variable": {
                    "value": "similar_two",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cosine_similarity(np.reshape(glove_two, (1, -1)), converter_table)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_82": {
                "variable": {
                    "value": "similar_one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cosine_similarity(np.reshape(glove_one, (1, -1)), converter_table)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_85": {
                "variable": {
                    "value": "fact",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_90": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "similar_one * fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_91": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "similar_two * fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_92": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "similar_three * fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_93": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "similar_four * fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_94": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "similar_five * fact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_96": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "probability_old",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather_nd(prob, [[0, sample]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probability_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.gather_nd(prob, [[0, sample]]), tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([1], tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_36": {
                "x": {
                    "value": "tf.reduce_sum(tf.cast(cumulative_probs <= p, tf.int32), axis=-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_41": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_18": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_one * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_two * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_three * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_four * fact)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, similar_five * fact)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_99": {
                "params": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[[0, sample]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_104": {
                "values": {
                    "value": "[output, samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tf.cast(cumulative_probs <= p, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_102": {
                "values": {
                    "value": "[past, next_outputs['presents']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_125": {
                "dims": {
                    "value": "model.past_shape(hparams=hparams, batch_size=batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_126": {
                "dims": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_127": {
                "dims": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_128": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "cumulative_probs <= p",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_PCA.py": {
        "sklearn": {
            "LabelEncoder_31": {
                "variable": {
                    "value": "le_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_39": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpu_harry_five.py": {
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_102": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(models_dir, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_85": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_91": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "shape_17": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_22": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_137": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nx, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=w_init_stdev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "mlp(norm(x, 'ln_2'), 'mlp', nx * 4, hparams=hparams)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_state], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nf], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pk, k], axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pv, v], axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_139": {
                "input": {
                    "value": "tf.expand_dims(value, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size] + [1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_ctx, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_vocab, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "results[present]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "presents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "tf.gather(wte, X) + tf.gather(wpe, positions_for(X, past_length))",
                            "BinOp"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch * sequence, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [batch * sequence, hparams.n_embd])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_flat, wte, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch, sequence, hparams.n_vocab])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, sequence, hparams.n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_21": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_77": {
                "a": {
                    "value": "split_states(x, hparams.n_head)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_106": {
                "variable": {
                    "value": "(pk, pv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pk, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pv, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_26": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "x - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_36": {
                "x": {
                    "value": "s + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_94": {
                "x": {
                    "value": "tf.cast(v.shape[-1].value, w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_103": {
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(x, [-1, nx]), tf.reshape(w, [-1, nf])) + b, start + [nf])",
                            "Call"
                        ],
                        [
                            "conv1d(x, 'c_attn', n_state * 3)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_144": {},
            "gather_157": {
                "params": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "positions_for(X, past_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_161": {
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_53": {
                "stddev": {
                    "value": "w_init_stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_54": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "tf.reshape(x, [-1, nx])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(w, [-1, nf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "v.shape[-1].value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_153": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_155": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_26": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "Input_91": {
                "variable": {
                    "value": "input_voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(fMRI_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_113": {
                "variable": {
                    "value": "dense5",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dense_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                }
            },
            "Dense_122": {
                "variable": {
                    "value": "dense_glove",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Input_183": {
                "variable": {
                    "value": "input_voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(fMRI_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "variable": {
                    "value": "dense5",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dense_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                }
            },
            "Model_241": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[fMRI_rec, pred_glove, pred_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_261": {
                "variable": {
                    "value": "input_voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(fMRI_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_280": {
                "variable": {
                    "value": "dense5",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "glove_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Dense_288": {
                "variable": {
                    "value": "dense6",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "class_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "180",
                            "int"
                        ],
                        [
                            "180",
                            "int"
                        ]
                    ]
                }
            },
            "Input_317": {
                "variable": {
                    "value": "input_voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(fMRI_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_320": {
                "variable": {
                    "value": "dense_first",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dense_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                }
            },
            "Dense_327": {
                "variable": {
                    "value": "dense5",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "glove_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Dense_332": {
                "variable": {
                    "value": "dense6",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "class_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "180",
                            "int"
                        ],
                        [
                            "180",
                            "int"
                        ]
                    ]
                }
            },
            "Model_340": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[pred_glove, pred_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_17": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_23": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.dense.weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_56": {
                "variable": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distances",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(-distances, axis=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(encoding_indices, K.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(-distances, axis=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(encoding_indices, K.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "K.shape(x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.embeddings.read_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_157": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[fMRI_rec, pred_glove, pred_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_159": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[fMRI_rec, pred_glove, pred_class, Concat_layer, Dense_layer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_297": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[pred_glove, pred_class, Concater]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_299": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_voxel]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[pred_glove, pred_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_74": {
                "params": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.transpose(self.embeddings.read_value())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "encoding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(-distances, axis=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(encoding_indices, K.shape(x)[:-1])",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Concatenate_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_115": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_124": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Dense_131": {
                "units": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(0.005)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0.005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Concatenate_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_150": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_151": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_mid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_152": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_153": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_glove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_154": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "fMRI_rec",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_195": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_197": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_205": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_207": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Dense_213": {
                "units": {
                    "value": "glove_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ],
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Lambda_217": {
                "function": {
                    "value": "lambda enc: enc_inputs + K.stop_gradient(enc - enc_inputs)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_219": {
                "units": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_222": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_224": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Concatenate_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_237": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_glove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_238": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "fMRI_rec",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_239": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_275": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Softmax_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_292": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "Concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_293": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_glove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_294": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_322": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_324": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ],
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Softmax_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_337": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_glove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_338": {
                "function": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_53": {
                "a": {
                    "value": "self.w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Lambda_99": {
                "function": {
                    "value": "lambda x: x[:, index:new_index]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(sizes[i],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_100": {
                "units": {
                    "value": "reduced[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_141": {
                "function": {
                    "value": "lambda x: x[:, index1:new_index1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(reduced[j],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LeakyReLU_143": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_187": {
                "function": {
                    "value": "lambda x: x[:, index:new_index]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(sizes[i],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "units": {
                    "value": "reduced[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNormalization_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_229": {
                "function": {
                    "value": "lambda x: x[:, index1:new_index1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(reduced[j],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_230": {
                "units": {
                    "value": "sizes[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_231": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_266": {
                "function": {
                    "value": "lambda x: x[:, index:new_index]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(sizes[i],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_267": {
                "units": {
                    "value": "reduced[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_269": {
                "alpha": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_51": {
                "a": {
                    "value": "flat_inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_52": {
                "a": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.reshape(x, (-1, self.embedding_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_217": {
                "input": {
                    "value": "enc - enc_inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_VQ-VAE.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_session_21": {
                "session": {
                    "value": "tf.Session(config=gpu_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_120": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_122": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_124": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_VQ_VAE_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_acc",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_127": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_129": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_131": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_VQ_VAE_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_21": {
                "config": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_102": {
                "variable": {
                    "value": "rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(val + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_big.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_session_21": {
                "session": {
                    "value": "tf.Session(config=gpu_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_103": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_105": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_107": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_big_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_acc",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_110": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_112": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_114": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_big_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_21": {
                "config": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_87": {
                "variable": {
                    "value": "rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "range(val + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_ours.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_session_21": {
                "session": {
                    "value": "tf.Session(config=gpu_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_112": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_114": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_116": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_main_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_acc",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_119": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_121": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_123": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_main_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_21": {
                "config": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_92": {
                "variable": {
                    "value": "rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "range(val + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_small.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_session_21": {
                "session": {
                    "value": "tf.Session(config=gpu_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_102": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_104": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_106": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_small_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_class_acc",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_109": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_111": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_113": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(os.path.dirname(os.path.abspath(__file__))) + '/model_weights/Subject' + subject + '_small_model.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_pred_glove_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_21": {
                "config": {
                    "value": "gpu_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_88": {
                "variable": {
                    "value": "rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(val + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}