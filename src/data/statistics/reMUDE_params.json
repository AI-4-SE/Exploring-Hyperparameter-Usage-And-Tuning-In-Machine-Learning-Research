{
    "control.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_checkpoint_selector(ntype_chckp)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "correction-example.py": {
        "torch": {
            "load_101": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_checkpoint_selector(Path('checkpoints/MUDE_PER'))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(X).long().to(device=device)",
                            "Call"
                        ],
                        [
                            "X[torch.argsort(-lens)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(m).bool().to(device=device)",
                            "Call"
                        ],
                        [
                            "m[torch.argsort(-lens)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_137": {
                "input": {
                    "value": "-lens",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_138": {
                "input": {
                    "value": "-lens",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_139": {
                "input": {
                    "value": "-lens",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset.py": {
        "torch": {
            "cat_74": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_batch_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_batch_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_batch_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_TRAIN_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=MAX_CHARS, noise_type=TYPE)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=MAX_CHARS, dtset=dataset_train_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_VAL_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=MAX_CHARS, noise_type=TYPE)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=MAX_CHARS, dtset=dataset_val_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_TEST_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=MAX_CHARS, noise_type=TYPE)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=MAX_CHARS, dtset=dataset_test_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "[seq, torch.Tensor(padding).long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "[msk, torch.Tensor(padding).bool()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[seq, torch.Tensor(padding).long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "torch_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(ch).long() for ch in chars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "torch_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(m).bool() for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tensor_40": {},
            "Tensor_41": {}
        }
    },
    "src/model.py": {
        "torch": {
            "TransformerEncoderLayer_24": {
                "variable": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "self.tdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "self.tattn_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "self.tdim_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TransformerEncoder_31": {
                "variable": {
                    "value": "self.encoder_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "characters_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_76": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.char_seq_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "characters_vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_79": {
                "variable": {
                    "value": "self.top_rec_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.top_proj_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "top_rec_proj_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.token_seq_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "top_rec_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tokens_vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "variable": {
                    "value": "char_seq_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_seq_projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_seq_pred(char_seq_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_108": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(encoder_input, xmask.view(-1, MAX_CHARS)).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "x.view(batch_size, l, self.DIM)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "xlengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "variable": {
                    "value": "tok_seq_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tok_seq_projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.token_seq_pred(tok_seq_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_111": {
                "sequence": {
                    "value": "tok_seq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(tok_seq_output, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "self.top_proj_dropout(tok_seq_output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_TRAIN_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=max_chars, noise_type=noise_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=max_chars, dtset=dataset_train_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_VAL_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=max_chars, noise_type=noise_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=max_chars, dtset=dataset_val_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SPCInMemDataset(data_path=TASK_DATA_TEST_PATH, vocab_path=TASK_DATA_VOCAB_PATH, max_chars=max_chars, noise_type=noise_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate_fn(x, max_chars=max_chars, dtset=dataset_test_split)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_WORKERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_215": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mude.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "NLLLoss_218": {
                "variable": {
                    "value": "seq2seq_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "train_ld.dataset.vect.PAD_CHAR_INDX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_219": {
                "variable": {
                    "value": "recog_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "train_ld.dataset.vocab['<PAD>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_317": {
                "obj": {
                    "value": "mude.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINTS_RUN_DIR_PATH.joinpath(f'{RUN_NAME}-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__110": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "eq_21": {
                "input": {
                    "value": "y[idd, :ln[idd]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "seq_pred[idd, :ln[idd]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}