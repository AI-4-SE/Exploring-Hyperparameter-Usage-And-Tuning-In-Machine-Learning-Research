{
    "evaluation/evaluate.py": {
        "sklearn": {
            "f1_score_58": {
                "variable": {
                    "value": "m_s_hg",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldDict['hg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predDict['hg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_59": {
                "variable": {
                    "value": "m_s_eg",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldDict['eg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predDict['eg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_60": {
                "variable": {
                    "value": "m_s_ee",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldDict['ee']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predDict['ee']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_61": {
                "variable": {
                    "value": "m_s_dc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldDict['dc']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predDict['dc']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_114": {
                "variable": {
                    "value": "m_a",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldList",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predList",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['HG-EG-EE-DC', 'HG-EG-EE', 'HG-EG-DC', 'HG-EE-DC', 'HG-EG', 'HG-EE', 'HG-DC', 'HG', 'EG-EE-DC', 'EG-EE', 'EG-DC', 'EG', 'EE-DC', 'EE', 'DC', 'O']",
                            "List"
                        ]
                    ]
                }
            },
            "f1_score_132": {
                "variable": {
                    "value": "m_o_hg",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldOverlap['hg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predOverlap['hg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_133": {
                "variable": {
                    "value": "m_o_eg",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldOverlap['eg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predOverlap['eg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_134": {
                "variable": {
                    "value": "m_o_ee",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldOverlap['ee']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predOverlap['ee']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_135": {
                "variable": {
                    "value": "m_o_dc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "goldOverlap['dc']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predOverlap['dc']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "neuralNetwork_experiments/neuralnets/BiLSTM2.py": {
        "sklearn": {
            "f1_score_571": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_score_572": {
                "variable": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_573": {
                "variable": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "neuralNetwork_experiments/neuralnets/BiLSTM2_multipleOutput.py": {
        "sklearn": {
            "f1_score_653": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_score_654": {
                "variable": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_655": {
                "variable": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correctLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in correctLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predLabelsFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item for sublist in predLabels for item in sublist]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "neuralNetwork_experiments/neuralnets/keraslayers/ChainCRF.py": {
        "tensorflow": {
            "pack_39": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_20": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1, vocab_size, size=(batch_size, maxlen))",
                            "Call"
                        ],
                        [
                            "add_boundary_energy(x, b_start, b_end, mask)",
                            "Call"
                        ],
                        [
                            "add_boundary_energy(x, b_start, b_end, mask)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "K.concatenate([x[:, :1, :] + b_start, x[:, 1:, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "x + start_mask * b_start",
                            "BinOp"
                        ],
                        [
                            "K.concatenate([x[:, :-1, :], x[:, -1:, :] + b_end], axis=1)",
                            "Call"
                        ],
                        [
                            "x + end_mask * b_end",
                            "BinOp"
                        ],
                        [
                            "add_boundary_energy(x, b_start, b_end, mask)",
                            "Call"
                        ],
                        [
                            "add_boundary_energy(x, b_start, b_end, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_40": {
                "params": {
                    "value": "reference",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pack([tf.range(batch_size), indices], axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}