{
    "sms_mixed.py": {
        "sklearn": {
            "f1_score_63": {
                "y_true": {
                    "value": "y_true_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/sms/true_labels_sms.npy')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(probability(theta, pi_y, pi, l_test, s_test, k, n_classes, continuous_mask).detach().numpy(), 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "abs_12": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(np.load('Data/sms/train_L_S_smooth.npy')[:, 0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_13": {
                "variable": {
                    "value": "l_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(np.load('Data/sms/test_L_S_smooth.npy')[:, 0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/sms/train_L_S_smooth.npy')[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "s_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/sms/test_L_S_smooth.npy')[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/sms/k.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "continuous_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "int"
                        ]
                    ]
                }
            },
            "ones_31": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_classes, n_lfs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "pi_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta, pi, pi_y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "np.load('Data/sms/train_L_S_smooth.npy')[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "np.load('Data/sms/test_L_S_smooth.npy')[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "int"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "(n_classes, n_lfs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "spouse_mixed.py": {
        "sklearn": {
            "f1_score_63": {
                "y_true": {
                    "value": "y_true_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/spouse/true_labels_test.npy')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(probability(theta, pi_y, pi, l_test, s_test, k, n_classes, continuous_mask).detach().numpy(), 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "abs_12": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(np.load('Data/spouse/train_L_S_smooth.npy')[:, 0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_13": {
                "variable": {
                    "value": "l_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(np.load('Data/spouse/test_L_S_smooth.npy')[:, 0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/spouse/train_L_S_smooth.npy')[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "s_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/spouse/test_L_S_smooth.npy')[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load('Data/spouse/k.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "continuous_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 1, 0, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_classes, n_lfs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "pi_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "np.load('Data/spouse/train_L_S_smooth.npy')[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "np.load('Data/spouse/test_L_S_smooth.npy')[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "(n_classes, n_lfs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cage.py": {
        "torch": {
            "exp_6": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_y",
                            "Method Argument"
                        ],
                        [
                            "pi_y",
                            "Method Argument"
                        ],
                        [
                            "pi_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(l.shape[0], n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eq_32": {
                "variable": {
                    "value": "eq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y in range(n_classes)",
                            "Call"
                        ],
                        [
                            "y in range(n_classes)",
                            "Call"
                        ],
                        [
                            "y in range(n_classes)",
                            "Call"
                        ],
                        [
                            "y in range(n_classes)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_32": {
                "variable": {
                    "value": "eq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_34": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(pi_y)",
                            "Call"
                        ],
                        [
                            "pi",
                            "Method Argument"
                        ],
                        [
                            "pi",
                            "Method Argument"
                        ],
                        [
                            "pi",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_44": {
                "variable": {
                    "value": "p_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_57": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "correct_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_17": {
                "variable": {
                    "value": "m_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi(theta[y], torch.ones(k.shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Beta_37": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "r[i] * params[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "params[i] * (1 - r[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_60": {
                "variable": {
                    "value": "m_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi(theta[y], torch.ones(n_lfs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_11": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_26": {
                "input": {
                    "value": "phi(theta[y], l).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "probability(theta, pi_y, pi, l, s, k, n_classes, continuous_mask).sum(1) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensordot_61": {
                "a": {
                    "value": "(1 + m_y).view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "torch.ones(m_y.shape).double().view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_61": {
                "n": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_68": {
                "input": {
                    "value": "1 - correct_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "n_lfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_61": {
                "*size": {
                    "value": "m_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "m.log_prob(s[:, i].double())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}