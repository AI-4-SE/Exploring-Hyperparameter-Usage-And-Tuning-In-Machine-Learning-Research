{
    "algorithm.py": {
        "tensorflow": {
            "FileWriter_51": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.logdir, 'summaries')",
                    "type": "Call",
                    "possible_values": []
                },
                "max_queue": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Summary_138": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "neglogp * episode_reward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "deeplearning/distributions.py": {
        "tensorflow": {
            "get_default_session_326": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_326": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "pd.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{M: Mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "one_hot_146": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_153": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_154": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_155": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_195": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_198": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_223": {
                "variable": {
                    "value": "self.log_mixing_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.mixture.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.mode() for g in self.gaussians]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.logp(g.mode()) + self.log_mixing_probs[:, i] for (i, g) in enumerate(self.gaussians)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.log_mixing_probs[:, i] + self.gaussians[i].logp(x) for i in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.sample() for g in self.gaussians]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_141": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_147": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_179": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_181": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_183": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_185": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_187": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_211": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_243": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_245": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "round_260": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_269": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_151": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_152": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_160": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_179": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_187": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_206": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_235": {
                "params": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.mode() for g in self.gaussians])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmax(logps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_248": {
                "params": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.sample() for g in self.gaussians])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.mixture.sample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_262": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_266": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_268": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_269": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_293": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_167": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_175": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "input": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.logp(g.mode()) + self.log_mixing_probs[:, i] for (i, g) in enumerate(self.gaussians)])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_239": {
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([self.log_mixing_probs[:, i] + self.gaussians[i].logp(x) for i in range(self.n)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_241": {
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([self.log_mixing_probs[:, i] + self.gaussians[i].logp(x) for i in range(self.n)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_264": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_158": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_164": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_204": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_205": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_213": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_262": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_181": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_204": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_205": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_209": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deeplearning/layers/core.py": {
        "tensorflow": {
            "placeholder_with_default_31": {
                "variable": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "default",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(self.default[None], bsz, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros((nlstm * 2,), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bsz] + self.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "self.phname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bsz] + self.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "self.phname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_111": {
                "structure": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_121": {
                "onehot_labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "shape": {
                    "value": "[self.nbatch * self.nstep]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_115": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nlayers)",
                            "Call"
                        ],
                        [
                            "range(self.nlayers)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/layers/importance_weighting.py": {
        "tensorflow": {
            "exp_15": {
                "variable": {
                    "value": "self.iw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_dist_neglogp - neglogp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_17": {
                "variable": {
                    "value": "self.iw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "deeplearning/layers/optimizers.py": {
        "tensorflow": {
            "Variable_19": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self._lr_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_25": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_28": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_38": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self._lr_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_63": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_66": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_76": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_27": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_65": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deeplearning/layers/running_norm.py": {
        "tensorflow": {
            "get_variable_10": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "running_norm_count",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "running_norm_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "running_norm_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self._batch_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_mean_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self._batch_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_var_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self._batch_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_count_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_session_30": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "x": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_mean - self._mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/logger.py": {
        "tensorflow": {
            "summary_iterator_453": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            },
            "as_bytes_158": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/module.py": {
        "tensorflow": {
            "get_default_session_129": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_189": {
                "variable": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'{}_*[0-9]*/{}'.format(self.scope, self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_198": {
                "variable": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'{}_*[0-9]*/{}'.format(self.scope, self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/mpi/mpi_adam.py": {
        "tensorflow": {
            "Variable_74": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_79": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "set_random_seed_72": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_83": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_87": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_88": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_76": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_76": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/mpi/mpi_sgd.py": {
        "tensorflow": {
            "Variable_67": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_72": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_65": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_76": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_80": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_81": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize / (1 - self.momentum ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_69": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deeplearning/tf_util.py": {
        "tensorflow": {
            "cond_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_60": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_209": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_222": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_318": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_85": {
                "main": {
                    "value": "tf.variables_initializer(new_variables)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nsteps, nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nsteps, nbatch, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_207": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_214": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_215": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_216": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "_Function(inputs, outputs.values(), updates, givens=givens)",
                            "Call"
                        ],
                        [
                            "_Function(inputs, [outputs], updates, givens=givens)",
                            "Call"
                        ],
                        [
                            "fs",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_218": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_278": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_320": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, var_list)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_321": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_339": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_346": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_352": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_25": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_65": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_67": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_85": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_default_session_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "tf.concat(axis=0, values=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "tf.stack(values=h, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_198": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_342": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_349": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_368": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_47": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_48": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_161": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nsteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(xs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_173": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_175": {
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_220": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_default_session_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_298": {
                "main": {
                    "value": "self.outputs_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "abs_49": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_207": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nsteps, nbatch])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nsteps, nbatch, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_322": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_337": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[0].get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tuple(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_346": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_322": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "stack_13": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.sample() for g in self.gaussians]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_15": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(samples, m)[0], tf.cast(m, tf.float32)[None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.mode() for g in self.gaussians]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g.logp(g.mode()) + self.log_mixing_probs[:, i] for (i, g) in enumerate(self.gaussians)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmax_21": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.logp(g.mode()) + self.log_mixing_probs[:, i] for (i, g) in enumerate(self.gaussians)])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_22": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(modes, tf.argmax(logps))[0], tf.cast(m, tf.float32)[None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_27": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x[:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_28": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[comp, tf.expand_dims(tf.range(comp.shape[0]), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.log_mixing_probs[:, i] + self.gaussians[i].logp(params) for i in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_nd_30": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([self.log_mixing_probs[:, i] + self.gaussians[i].logp(params) for i in range(self.n)])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(p, comp)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x[:, -1:], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([comp, tf.expand_dims(tf.range(comp.shape[0]), axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_45": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tile_92": {
                "variable": {
                    "value": "gmm_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.concat(vars, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.nbatch * self.nstep, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_47": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inputs[0], -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net, units=h, kernel_initializer=U.normc_initializer(1.0), activation=self.activation_fn, name='dense{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'dense{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'m{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'logstd{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "logstd.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "[obs_normed, X[:, -self.size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "name": {
                    "value": "mixprobs",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.ncomponents,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "tf.concat(vars, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "tf.range(comp.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_92": {
                "values": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_15": {
                "params": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.sample() for g in self.gaussians])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixture.sample()",
                            "Call"
                        ],
                        [
                            "tf.argmax(logps)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('m{}'.format(i), shape=mean.shape, dtype=tf.float32, initializer=tf.constant_initializer(mean))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_15": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixture.sample()",
                            "Call"
                        ],
                        [
                            "tf.argmax(logps)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('m{}'.format(i), shape=mean.shape, dtype=tf.float32, initializer=tf.constant_initializer(mean))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_22": {
                "params": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.mode() for g in self.gaussians])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmax(logps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_22": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixture.sample()",
                            "Call"
                        ],
                        [
                            "tf.argmax(logps)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('m{}'.format(i), shape=mean.shape, dtype=tf.float32, initializer=tf.constant_initializer(mean))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.mean_init)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.8, 0.8, size=self.nparams)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(self.std_init * np.ones_like(mean))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_22": {
                "input": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([g.logp(g.mode()) + self.log_mixing_probs[:, i] for (i, g) in enumerate(self.gaussians)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl/algorithms/a2c.py": {
        "tensorflow": {}
    },
    "rl/algorithms/core.py": {
        "tensorflow": {
            "get_default_session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl/algorithms/mpippo.py": {
        "tensorflow": {}
    },
    "rl/algorithms/ppo.py": {
        "tensorflow": {}
    },
    "rl/algorithms/qlearning.py": {
        "tensorflow": {
            "group_51": {
                "variable": {
                    "value": "self.target_sync",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v1, v2) for (v1, v2) in zip(self.loss.qtarg.variables(), self.loss.qvals.variables())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "assign_51": {
                "ref": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rl/algorithms/sarsa.py": {
        "tensorflow": {
            "group_52": {
                "variable": {
                    "value": "self.target_sync",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v1, v2) for (v1, v2) in zip(self.loss.next_qvals.variables(), self.loss.qvals.variables())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "assign_52": {
                "ref": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rl/losses/a2c.py": {
        "tensorflow": {
            "reduce_mean_29": {
                "variable": {
                    "value": "self._p_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neglogp * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "variable": {
                    "value": "self._entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.actor._entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_22": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(ac, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "neglogp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neglogp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor.pd.neglogp(ac)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(neglogp, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "input_tensor": {
                    "value": "tf.square(vpred - vtarg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "vpred - vtarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl/losses/ppo.py": {
        "tensorflow": {
            "Variable_35": {
                "variable": {
                    "value": "self._clip_mult",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_43": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp + old_neglogp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_57": {
                "variable": {
                    "value": "vfloss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - vtarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_59": {
                "variable": {
                    "value": "vfloss2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - vtarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "self._entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.actor_critic.actor._entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(ac, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * self.actor_critic.actor.pd.neglogp(ac)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(logp, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(logp + old_neglogp)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ratio, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_51": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(logp + old_neglogp)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ratio, -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "input_tensor": {
                    "value": "tf.minimum(ploss1, ploss2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_58": {
                "t": {
                    "value": "vpred - old_vpred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_param",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_param * self._clip_mult",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.maximum(vfloss1, vfloss2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_52": {
                "x": {
                    "value": "ploss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ploss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_60": {
                "x": {
                    "value": "vfloss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - vtarg)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vfloss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - vtarg)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl/losses/qlearning.py": {
        "tensorflow": {
            "one_hot_31": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(ac, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.qvals.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "ac_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.next_qvals._max_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.next_qvals.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "variable": {
                    "value": "qtarg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ac_targ * self.qtarg._qvals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_37": {
                "variable": {
                    "value": "qtarg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qtarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ac_targ * self.qtarg._qvals, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(qtarg)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "qval",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ac * self.qvals._qvals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(done, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights * huber_loss(self._td_err)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(ac, tf.int32), self.qvals.ac_space.n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "weights * tf.square(self._td_err)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_49": {
                "x": {
                    "value": "self._td_err",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl/losses/sarsa.py": {
        "tensorflow": {
            "one_hot_30": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(ac, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.qvals.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_31": {
                "variable": {
                    "value": "nac",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(nac, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.qvals.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ac * self.qvals._qvals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "variable": {
                    "value": "qnext",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nac * self.next_qvals._qvals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_38": {
                "variable": {
                    "value": "qnext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qnext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nac * self.next_qvals._qvals, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(qnext)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(done, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "huber_loss(self._td_err)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(ac, tf.int32), self.qvals.ac_space.n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "nac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(nac, tf.int32), self.qvals.ac_space.n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "tf.square(self._td_err)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_48": {
                "x": {
                    "value": "self._td_err",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl/rl_module.py": {
        "tensorflow": {
            "dense_54": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "param_shape // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, param_shape // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_61": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='logstd', shape=[1, param_shape // 2], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tile(logstd, [self.nbatch * self.nstep, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.nbatch * self.nstep, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_136": {
                "variable": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "self._max_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._qvals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_177": {
                "variable": {
                    "value": "advs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pre_advs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_184": {
                "variable": {
                    "value": "self._vf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pre_vf",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value_funtion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_225": {
                "variable": {
                    "value": "action_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "action_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(np.eye(self.n), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_230": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s, ea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "self._qvals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_243": {
                "variable": {
                    "value": "self._max_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._qvals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_244": {
                "variable": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_12": {
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_41": {
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_125": {
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.ac_space.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qvals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_142": {
                "condition": {
                    "value": "rand_val >= self._eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self._max_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "rand_ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(self._max_ac.shape, 0, self.ac_space.n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(self._max_ac.shape, 0, self.ac_space.n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_210": {
                "inputs": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s, ea], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "qvals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_227": {
                "variable": {
                    "value": "ea",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "action_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('action_embeddings', initializer=tf.constant(np.eye(self.n), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_lookup_229": {
                "variable": {
                    "value": "ea",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "action_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('action_embeddings', initializer=tf.constant(np.eye(self.n), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.zeros(shape=self.nbatch * self.nstep, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_239": {
                "variable": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "action_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('action_embeddings', initializer=tf.constant(np.eye(self.n), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.constant(i * np.ones([self.nbatch * self.nstep]), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_240": {
                "variable": {
                    "value": "sai",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s, ai]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_249": {
                "condition": {
                    "value": "rand_val >= self._eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self._max_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "rand_ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(self._max_ac.shape, 0, self.ac_space.n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(self._max_ac.shape, 0, self.ac_space.n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_183": {
                "input": {
                    "value": "tf.reduce_mean(advs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_136": {
                "value": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "advs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pre_advs, units=self.ac_space.n, kernel_initializer=U.normc_initializer(1.0), name='advantages')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_225": {
                "value": {
                    "value": "np.eye(self.n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "shape": {
                    "value": "self.nbatch * self.nstep",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "value": {
                    "value": "i * np.ones([self.nbatch * self.nstep])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_244": {
                "value": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl/runner.py": {
        "tensorflow": {
            "get_default_session_175": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl/util.py": {
        "tensorflow": {
            "set_random_seed_83": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}