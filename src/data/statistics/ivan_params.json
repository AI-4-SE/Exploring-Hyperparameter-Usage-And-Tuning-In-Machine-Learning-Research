{
    "dataset/mri_dataset.py": {
        "torch": {
            "permute_29": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/model.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in + gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in + 2 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in + 3 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in + 4 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_59": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.operations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "operations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_125": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_119": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "input": {
                    "value": "self.H(y1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "input": {
                    "value": "self.H(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/modules.py": {
        "torch": {
            "normal_26": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.exp(logs) * temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_p(mean, logs, x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not do_actnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_250": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "self.indices_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_260": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.indices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(input.clone() + bias) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_89": {
                "variable": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale / (torch.sqrt(vars) + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lu_unpack_322": {
                "variable": {
                    "value": "(p, lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "*torch.lu(w_init)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "diag_323": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_324": {
                "variable": {
                    "value": "sign_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_325": {
                "variable": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_326": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_327": {
                "variable": {
                    "value": "l_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(w_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_328": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "*w_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_332": {
                "variable": {
                    "value": "self.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_333": {
                "variable": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.abs(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_334": {
                "variable": {
                    "value": "self.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_382": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * torch.exp(-self.logs)",
                            "BinOp"
                        ],
                        [
                            "input * torch.exp(self.logs)",
                            "BinOp"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "input[:, self.indices, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(u_inv, torch.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.p, torch.matmul(lower, u))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_387": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * torch.exp(-self.logs)",
                            "BinOp"
                        ],
                        [
                            "input * torch.exp(self.logs)",
                            "BinOp"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "input[:, self.indices, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(u_inv, torch.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.p, torch.matmul(lower, u))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_26": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(vars) + 1e-06))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_243": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "qr_317": {
                "input": {
                    "value": "torch.randn(*w_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_348": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_358": {
                "input": {
                    "value": "self.sign_s * torch.exp(self.log_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_365": {
                "variable": {
                    "value": "u_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper * self.l_mask.transpose(0, 1).contiguous()",
                            "BinOp"
                        ],
                        [
                            "u + torch.diag(self.sign_s * torch.exp(self.log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_366": {
                "variable": {
                    "value": "l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_367": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_369": {
                "input": {
                    "value": "l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(lower)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(self.p)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_371": {
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper * self.l_mask.transpose(0, 1).contiguous()",
                            "BinOp"
                        ],
                        [
                            "u + torch.diag(self.sign_s * torch.exp(self.log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_87": {
                "input": {
                    "value": "input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-self.logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_107": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_317": {
                "*size": {
                    "value": "*w_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "abs_325": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_327": {
                "*size": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_16": {
                "input": {
                    "value": "logs * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lu_322": {
                "*args": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_358": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_360": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "input": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean((input.clone() + bias) ** 2, dim=[0, 2, 3], keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "slogdet_346": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "zeros_like_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + torch.zeros_like(x).uniform_(0, 1.0 / n_bins)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mriDataset(opt=args, root1=args.root1, root2=args.root2, root3=args.root3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "variable": {
                    "value": "pred_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct_rev.detach().permute(0, 2, 3, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pred_rev, 0, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_177": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "reconstruct_for",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruct_for",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruct_for, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_63": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 100, 150, 200, 250]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mriDataset(opt=args, task=args.task, root1=args.root1, root2=args.root2, root3=args.root3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_125": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "reconstruct_for",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruct_for",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruct_for, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_88": {
                "variable": {
                    "value": "forward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruct_for_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((reconstruct_for[:, 0, :, :] + reconstruct_for[:, 1, :, :]) / 2).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_forward.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "reconstruct_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruct_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(reconstruct_for, rev=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruct_rev, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_95": {
                "variable": {
                    "value": "rev_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruct_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(reconstruct_for, rev=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruct_rev, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "input_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_path + '%s/checkpoint/latest.pth' % args.task",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "args.out_path + '%s/checkpoint/latest.pth' % args.task",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_path + '%s/checkpoint/%04d.pth' % (args.task, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}