{
    "avg_checkpoints.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "finfo_105": {
                "variable": {
                    "value": "float32_info",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "final_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark.py": {
        "torch": {
            "DataParallel_110": {
                "variable": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, bench_task='predict', pretrained=args.pretrained, redundant_bias=args.redundant_bias, checkpoint_path=args.checkpoint, checkpoint_ema=args.use_ema)",
                            "Call"
                        ],
                        [
                            "bench.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(bench, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(bench, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Event_144": {
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset.py": {
        "torch": {}
    },
    "data/loader.py": {
        "torch": {}
    },
    "data/transforms.py": {
        "torch": {
            "from_numpy_37": {
                "ndarray": {
                    "value": "np_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np_img, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np_img, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector.py": {
        "torch": {
            "DataParallel_189": {
                "variable": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, bench_task='predict', pretrained=args.pretrained, redundant_bias=args.redundant_bias, checkpoint_path=args.checkpoint, checkpoint_ema=args.use_ema)",
                            "Call"
                        ],
                        [
                            "bench.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(bench, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(bench, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "effdet/anchors.py": {
        "torch": {
            "cat_167": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, scores, classes.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xmin, ymin, xmax, ymax]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[detections, torch.zeros((max_det_per_image - len(top_detection_idx), 6), device=detections.device, dtype=detections.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((yv - anchor_size_y_2, xv - anchor_size_x_2, yv + anchor_size_y_2, xv + anchor_size_x_2))",
                            "Call"
                        ],
                        [
                            "np.swapaxes(boxes, 0, 1)",
                            "Call"
                        ],
                        [
                            "boxes.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "boxes.min(size)",
                            "Call"
                        ],
                        [
                            "decode_box_outputs(box_outputs.float(), anchor_boxes, output_xyxy=True)",
                            "Call"
                        ],
                        [
                            "clip_boxes_xyxy(boxes, img_size / img_scale)",
                            "Call"
                        ],
                        [
                            "boxes[top_detection_idx]",
                            "Subscript"
                        ],
                        [
                            "boxes * img_scale",
                            "BinOp"
                        ],
                        [
                            "_generate_anchor_boxes(self.image_size, self.anchor_scale, self.config)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boxes).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_73": {
                "input": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_74": {
                "input": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_371": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "count + steps",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "count + steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_389": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "count + steps",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "count + steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_433": {
                "variable": {
                    "value": "num_positives_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "num_positives_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(num_positives_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "*size": {
                    "value": "(max_det_per_image - len(top_detection_idx), 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "detections.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "detections.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_374": {
                "input": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_targets - 1",
                            "BinOp"
                        ],
                        [
                            "cls_targets.long()",
                            "Call"
                        ],
                        [
                            "cls_targets.long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(count, count + steps, device=cls_targets.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(count, count + steps, device=device)",
                            "Call"
                        ],
                        [
                            "self._get_indices(cls_targets.device, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_376": {
                "input": {
                    "value": "box_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(count, count + steps, device=cls_targets.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(count, count + steps, device=device)",
                            "Call"
                        ],
                        [
                            "self._get_indices(cls_targets.device, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_428": {
                "variable": {
                    "value": "cls_targets_out[level_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_targets_out[level_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_429": {
                "variable": {
                    "value": "box_targets_out[level_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_targets_out[level_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_424": {
                "input": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_targets - 1",
                            "BinOp"
                        ],
                        [
                            "cls_targets.long()",
                            "Call"
                        ],
                        [
                            "cls_targets.long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(count, count + steps, device=cls_targets.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(count, count + steps, device=device)",
                            "Call"
                        ],
                        [
                            "self._get_indices(cls_targets.device, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_426": {
                "input": {
                    "value": "box_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(count, count + steps, device=cls_targets.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(count, count + steps, device=device)",
                            "Call"
                        ],
                        [
                            "self._get_indices(cls_targets.device, level)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/bench.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "cls_outputs_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_outputs[level].permute(0, 2, 3, 1).reshape([batch_size, -1, config.num_classes]) for level in range(config.num_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "box_outputs_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_outputs[level].permute(0, 2, 3, 1).reshape([batch_size, -1, 4]) for level in range(config.num_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_36": {
                "variable": {
                    "value": "(_, cls_topk_indices_all)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs_all.reshape(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "k": {
                    "value": "MAX_DETECTION_POINTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_40": {
                "variable": {
                    "value": "box_outputs_all_after_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_outputs_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([box_outputs[level].permute(0, 2, 3, 1).reshape([batch_size, -1, 4]) for level in range(config.num_levels)], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_all.unsqueeze(2).expand(-1, -1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_43": {
                "variable": {
                    "value": "cls_outputs_all_after_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cls_outputs[level].permute(0, 2, 3, 1).reshape([batch_size, -1, config.num_classes]) for level in range(config.num_levels)], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_all.unsqueeze(2).expand(-1, -1, config.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_45": {
                "variable": {
                    "value": "cls_outputs_all_after_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs_all_after_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(cls_outputs_all, 1, indices_all.unsqueeze(2).expand(-1, -1, config.num_classes))",
                            "Call"
                        ],
                        [
                            "torch.gather(cls_outputs_all_after_topk, 2, classes_all.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "classes_all.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "batch_detections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "effdet/distributed.py": {
        "torch": {
            "device_97": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_245": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_162": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_200": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_208": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_262": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_291": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "group or dist.group.WORLD",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_199": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_260": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_288": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/efficientdet.py": {
        "torch": {
            "ModuleDict_153": {
                "variable": {
                    "value": "self.resample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_195": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "torch.stack(nodes, dim=-1) * normalized_weights",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(nodes, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fnode(x)",
                            "Call"
                        ],
                        [
                            "self.resample(x)",
                            "Call"
                        ],
                        [
                            "self.cell(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.fpn(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_315": {
                "variable": {
                    "value": "self.conv_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_316": {
                "variable": {
                    "value": "self.bn_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.edge_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(len(inputs_offsets))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_weights.type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "fnode_layers[after_combine]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "after_combine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_weights.type(dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "weights_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.relu(self.edge_weights.type(dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "bn_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "len(inputs_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_185": {
                "tensors": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "*args": {
                    "value": "fnode_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_329": {
                "modules": {
                    "value": "bn_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "UpsamplingNearest2d_126": {
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(1 // reduction_ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/evaluator.py": {
        "torch": {
            "tensor_146": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.distributed_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_147": {
                "tensor": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=self.distributed_device)",
                            "Call"
                        ],
                        [
                            "metric.item()",
                            "Call"
                        ],
                        [
                            "sortedf1[0]['f1score']",
                            "Subscript"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_144": {
                "tensor": {
                    "value": "torch.tensor(metric, device=self.distributed_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=self.distributed_device)",
                            "Call"
                        ],
                        [
                            "metric.item()",
                            "Call"
                        ],
                        [
                            "sortedf1[0]['f1score']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.distributed_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "effdet/helpers.py": {
        "torch": {}
    },
    "effdet/loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_31": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.to(logits.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_62": {
                "input": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0 * logits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_64": {
                "variable": {
                    "value": "weighted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "positive_label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets == 1.0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "alpha * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(1.0 - alpha) * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "err.abs()",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_94": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_96": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "err < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * err.pow(2) / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "err - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(cls_losses, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "box_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(box_losses, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_171": {
                "variable": {
                    "value": "cls_targets_at_level_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_targets_at_level * cls_targets_non_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_172": {
                "variable": {
                    "value": "cls_targets_at_level_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cls_targets_non_neg.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_targets_at_level_oh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(cls_targets_at_level * cls_targets_non_neg, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.where(cls_targets_non_neg.unsqueeze(-1), cls_targets_at_level_oh, torch.zeros_like(cls_targets_at_level_oh))",
                            "Call"
                        ],
                        [
                            "cls_targets_at_level_oh.view(bs, height, width, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(cls_targets_at_level_oh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_193": {
                "tensors": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_194": {
                "tensors": {
                    "value": "box_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log1p_62": {
                "input": {
                    "value": "torch.exp(neg_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "cls_targets_at_level_oh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(cls_targets_at_level * cls_targets_non_neg, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.where(cls_targets_non_neg.unsqueeze(-1), cls_targets_at_level_oh, torch.zeros_like(cls_targets_at_level_oh))",
                            "Call"
                        ],
                        [
                            "cls_targets_at_level_oh.view(bs, height, width, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/object_detection/argmax_matcher.py": {
        "torch": {
            "argmax_118": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "variable": {
                    "value": "force_match_column_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_137": {
                "variable": {
                    "value": "force_match_column_indicators",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "force_match_column_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(similarity_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "similarity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_138": {
                "variable": {
                    "value": "force_match_row_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "force_match_column_indicators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot(force_match_column_ids, similarity_matrix.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_140": {
                "variable": {
                    "value": "final_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "force_match_column_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(force_match_column_indicators, 0)[0] != 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "force_match_row_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(force_match_column_indicators, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(similarity_matrix, 0)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -1)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_109": {
                "*size": {
                    "value": "similarity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_123": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_139": {
                "input": {
                    "value": "force_match_column_indicators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot(force_match_column_ids, similarity_matrix.shape[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/object_detection/box_coder.py": {
        "torch": {
            "stack_169": {
                "variable": {
                    "value": "decoded_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_coder.decode(boxes, anchors).boxes for boxes in encoded_boxes.unbind()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_102": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_103": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "[ty, tx, th, tw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_130": {
                "input": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(w / wa)",
                            "Call"
                        ],
                        [
                            "tw / self._scale_factors[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_131": {
                "input": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(h / ha)",
                            "Call"
                        ],
                        [
                            "th / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "effdet/object_detection/box_list.py": {
        "torch": {
            "cat_171": {
                "tensors": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "effdet/object_detection/matcher.py": {
        "torch": {
            "stack_170": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ignored_value, unmatched_value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ss, input_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "variable": {
                    "value": "gather_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.match_results + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_173": {
                "variable": {
                    "value": "gathered_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ss, input_tensor], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gather_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.match_results + 2, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_70": {
                "input": {
                    "value": "self.match_results > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_92": {
                "input": {
                    "value": "self.match_results == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_114": {
                "input": {
                    "value": "self.ignored_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_136": {
                "input": {
                    "value": "0 > self.match_results",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_149": {
                "input": {
                    "value": "self.match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "effdet/object_detection/region_similarity_calculator.py": {
        "torch": {
            "min_50": {
                "variable": {
                    "value": "all_pairs_min_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_max1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "all_pairs_max_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_min1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_pairs_min_ymax - all_pairs_max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_53": {
                "variable": {
                    "value": "all_pairs_min_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_max1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "all_pairs_max_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_min1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_pairs_min_xmax - all_pairs_max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_73": {
                "condition": {
                    "value": "intersections == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(intersections)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "intersections / unions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "input": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/object_detection/target_assigner.py": {
        "torch": {
            "zeros_167": {
                "variable": {
                    "value": "zero_box",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.device()",
                            "Call"
                        ],
                        [
                            "anchors.device()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_182": {
                "variable": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "matched_anchors_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "matched_reg_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._box_coder.encode(matched_gt_boxlist, anchors)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._default_regression_target(device).repeat(match.match_results.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_135": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "groundtruth_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.device()",
                            "Call"
                        ],
                        [
                            "anchors.device()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "variable": {
                    "value": "groundtruth_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.device()",
                            "Call"
                        ],
                        [
                            "anchors.device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "zero_kp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "groundtruth_keypoints.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.device()",
                            "Call"
                        ],
                        [
                            "anchors.device()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self._box_coder.code_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.device()",
                            "Call"
                        ],
                        [
                            "anchors.device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "effdet/soft_nms.py": {
        "torch": {
            "where_34": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "inter > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inter / (area1[:, None] + area2 - inter)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(1, dtype=inter.dtype, device=inter.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_83": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_remain.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "idxs_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_remain.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_remain.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "top_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_remain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone()",
                            "Call"
                        ],
                        [
                            "scores_remain * decay",
                            "BinOp"
                        ],
                        [
                            "scores_remain[keep]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "keep[top_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_26": {
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inter.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inter.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_98": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(ious, 2) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou(top_box.unsqueeze(0), boxes_remain)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_156": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_157": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_98": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou(top_box.unsqueeze(0), boxes_remain)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "infer.py": {
        "torch": {
            "DataParallel_149": {
                "variable": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, bench_task='predict', pretrained=args.pretrained, redundant_bias=args.redundant_bias, checkpoint_path=args.checkpoint, checkpoint_ema=args.use_ema)",
                            "Call"
                        ],
                        [
                            "bench.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(bench, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(bench, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sotabench.py": {
        "torch": {
            "empty_cache_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_246": {
                "seed": {
                    "value": "args.seed + args.rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_234": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__514": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__518": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/meanSTD.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_16": {
                "variable": {
                    "value": "custom_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "custom_train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CocoDetection(root='./data/train', annFile='./data/annotations/instances_train.json', transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "custom_val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "custom_val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CocoDetection(root='./data/val', annFile='./data/annotations/instances_val.json', transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "validate.py": {
        "torch": {
            "DataParallel_110": {
                "variable": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "bench",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, bench_task='predict', pretrained=args.pretrained, redundant_bias=args.redundant_bias, checkpoint_path=args.checkpoint, checkpoint_ema=args.use_ema)",
                            "Call"
                        ],
                        [
                            "bench.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(bench, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(bench, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Event_131": {
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}