{
    "cnn_cifar_affinity.py": {
        "sklearn": {
            "f1_score_64": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_22": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true_plusone[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_plusone[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "equals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.equal(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_75": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "tpu_grpc_url",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'grpc://' + os.environ['COLAB_TPU_ADDR']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LearningRateScheduler_79": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_39": {
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input((32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Conv2D(ch, 3, padding='same')(input)",
                            "Call"
                        ],
                        [
                            "layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "conv_bn_relu(x, 64)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 128)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 256)",
                            "Call"
                        ],
                        [
                            "layers.GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ClusteringAffinity(10, 1, 90.0)(x)",
                            "Call"
                        ],
                        [
                            "0.005",
                            "Constant"
                        ],
                        [
                            "x / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_45": {
                "a": {
                    "value": "equals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(K.equal(y_true, y_pred), 'float')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_72": {
                "level": {
                    "value": "tf.logging.FATAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_19": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling2D_26": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AveragePooling2D_29": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(y_true_plusone[:, :-1], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(y_pred_plusone[:, :-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.model.predict(self.X_test)[:, :10]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clear_session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cnn_cifar_optuna_affinity.py": {
        "sklearn": {
            "f1_score_61": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_22": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_39": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true_plusone[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_40": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_plusone[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "equals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.equal(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_78": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "tpu_grpc_url",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'grpc://' + os.environ['COLAB_TPU_ADDR']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LearningRateScheduler_82": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_36": {
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input((32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Conv2D(ch, 3, padding='same')(input)",
                            "Call"
                        ],
                        [
                            "layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "conv_bn_relu(x, 64)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 128)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 256)",
                            "Call"
                        ],
                        [
                            "layers.GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ClusteringAffinity(10, m, sigma)(x)",
                            "Call"
                        ],
                        [
                            "0.005",
                            "Constant"
                        ],
                        [
                            "x / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_42": {
                "a": {
                    "value": "equals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(K.equal(y_true, y_pred), 'float')",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_75": {
                "level": {
                    "value": "tf.logging.FATAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_19": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling2D_26": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AveragePooling2D_29": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(y_true_plusone[:, :-1], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(y_pred_plusone[:, :-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.model.predict(self.X_test)[:, :10]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cnn_cifar_softmax.py": {
        "sklearn": {
            "f1_score_55": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_22": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_67": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "tpu_grpc_url",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'grpc://' + os.environ['COLAB_TPU_ADDR']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LearningRateScheduler_71": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_35": {
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input((32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Conv2D(ch, 3, padding='same')(input)",
                            "Call"
                        ],
                        [
                            "layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "conv_bn_relu(x, 64)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 128)",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(2)(x)",
                            "Call"
                        ],
                        [
                            "conv_bn_relu(x, 256)",
                            "Call"
                        ],
                        [
                            "layers.GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(10, activation='softmax')(x)",
                            "Call"
                        ],
                        [
                            "0.005",
                            "Constant"
                        ],
                        [
                            "x / 5.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_64": {
                "level": {
                    "value": "tf.logging.FATAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_19": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling2D_26": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AveragePooling2D_29": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_33": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clear_session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cnn_mnist_affinity.py": {
        "sklearn": {
            "f1_score_56": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "cnn_mnist_softmax.py": {
        "sklearn": {
            "f1_score_47": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "affinity_loss.py": {
        "tensorflow": {
            "sign_24": {
                "variable": {
                    "value": "diagonal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.matrix_band_part(diagonal, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "variable": {
                    "value": "w_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_32": {
                "variable": {
                    "value": "fw_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(f_expand - w_expand) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-fw_norm / self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_34": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_plusone[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "tf.exp(-fw_norm / self.sigma)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(distance, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc, hidden_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "w_reshape_expand1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.W, [mc, hidden_layers])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "w_reshape_expand2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.W, [mc, hidden_layers])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "variable": {
                    "value": "w_norm_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(w_reshape_expand2 - w_reshape_expand1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[distance, rw_broadcast]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "rw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred_plusone[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "d_fi_wyi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "onehot * distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_71": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lambd + distance - d_fi_wyi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "L_mm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses * (1.0 - onehot)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_24": {
                "x": {
                    "value": "tf.matrix_band_part(diagonal, 0, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "w_norm_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_triangle(w_norm_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "residuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_triangle((w_norm_upper - mu) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_48": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_49": {
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "affinity_loss_tpu.py": {
        "tensorflow": {
            "sign_24": {
                "variable": {
                    "value": "diagonal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.matrix_band_part(diagonal, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "variable": {
                    "value": "w_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_32": {
                "variable": {
                    "value": "fw_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(f_expand - w_expand) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-fw_norm / self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_34": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_plusone[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "tf.exp(-fw_norm / self.sigma)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(distance, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc, hidden_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "w_reshape_expand1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.W, [mc, hidden_layers])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "w_reshape_expand2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.W, [mc, hidden_layers])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "variable": {
                    "value": "w_norm_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(w_reshape_expand2 - w_reshape_expand1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[distance, rw_broadcast]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "rw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred_plusone[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "d_fi_wyi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "onehot * distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_77": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lambd + distance - d_fi_wyi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "L_mm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses * (1.0 - onehot)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_24": {
                "x": {
                    "value": "tf.matrix_band_part(diagonal, 0, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "w_norm_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_triangle(w_norm_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "residuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_triangle((w_norm_upper - mu) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_48": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_49": {
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}