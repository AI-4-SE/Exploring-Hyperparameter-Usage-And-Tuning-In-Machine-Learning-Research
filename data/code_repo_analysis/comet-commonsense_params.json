{
    "scripts/classify/convert_conceptnet_generations_to_text.py": {
        "torch": {}
    },
    "scripts/classify/demo_bilinear.py": {
        "torch": {}
    },
    "scripts/data/make_atomic_data_loader.py": {
        "torch": {
            "save_73": {
                "obj": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.make_data_loader(opt, categories)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, '{}.pickle'.format(utils.make_name_string(opt.data)))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_path, '{}.pickle'.format(utils.make_name_string(opt.data)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/data/make_conceptnet_data_loader.py": {
        "torch": {
            "save_78": {
                "obj": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdata.GenerationDataLoader(opt)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, '{}.pickle'.format(utils.make_name_string(opt.data)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/evaluate/evaluate_atomic_generation_model.py": {
        "torch": {
            "set_device_22": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate/generate_atomic_beam_search.py": {
        "torch": {
            "manual_seed_59": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.sample_batch(split=split, bs=1, idxs=[idx])",
                            "Call"
                        ],
                        [
                            "np.stack([X, pos_enc], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks.unsqueeze(1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_112": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_168": {
                "*size": {
                    "value": "args.beam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.beam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_209": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_222": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_229": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "beam_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_seqs, beam_toks.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_224": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate/generate_atomic_greedy.py": {
        "torch": {
            "manual_seed_56": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_123": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.sample_batch(split=split, bs=1, idxs=[idx])",
                            "Call"
                        ],
                        [
                            "np.stack([X, pos_enc], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_idx, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_59": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices.view(1, -1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_207": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs, next_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_209": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate/generate_atomic_topk.py": {
        "torch": {
            "tensor_125": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.sample_batch(split=args.split, bs=1, idxs=[idx])",
                            "Call"
                        ],
                        [
                            "np.stack([X, pos_enc], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_idx, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_105": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices.view(args.k, -1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_208": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_222": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_probs[:, -1, :].topk(args.k)",
                            "Call"
                        ],
                        [
                            "lm_probs[:, -1, :].topk(args.k)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs, next_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate/generate_conceptnet_beam_search.py": {
        "torch": {
            "manual_seed_54": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_138": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.sample_batch(split=split, bs=1, idxs=[idx])",
                            "Call"
                        ],
                        [
                            "np.stack([X, pos_enc], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks.unsqueeze(1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_57": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_126": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "args.beam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.beam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_218": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_238": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "beam_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_seqs, beam_toks.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_233": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/interactive/atomic_single_example.py": {
        "torch": {
            "set_device_33": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/interactive/conceptnet_evaluate_single_example.py": {
        "torch": {
            "set_device_72": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/interactive/conceptnet_single_example.py": {
        "torch": {
            "set_device_33": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/atomic.py": {
        "torch": {}
    },
    "src/data/conceptnet.py": {
        "torch": {}
    },
    "src/data/data.py": {
        "torch": {
            "save_20": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_63": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/utils.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "old_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/evaluate/conceptnet_generate.py": {
        "torch": {
            "synchronize_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate/evaluate.py": {
        "torch": {
            "synchronize_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate/sampler.py": {
        "torch": {
            "cat_32": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_idx, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_43": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices.view(-1, 1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_idx, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices.view(self.opt.eval.k, -1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([X, pos_enc], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.long).to(device)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks.unsqueeze(1), next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "next_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, torch.ones(X.size(0), 1, device=mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_220": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_toks, next_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "variable": {
                    "value": "next_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(XMB, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[MMB, torch.ones(XMB.size(0), 1, device=MMB.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs, next_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_138": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_143": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs, next_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "lm_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(XMB.unsqueeze(1), sequence_mask=MMB)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "beam_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beam_seqs, beam_toks.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "opt.eval.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.eval.bs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "(X, next_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_235": {
                "*size": {
                    "value": "XMB.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "MMB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/interactive/functions.py": {
        "torch": {
            "zeros_150": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "data_loader.max_event + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "max_e1 + max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(e1_tokens) + max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "max_e1 + max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "max_e1 + max_r + len(e2_tokens)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/main_atomic.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_34": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_98": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/main_conceptnet.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_36": {
                "seed": {
                    "value": "opt.train.static.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_110": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/gpt.py": {
        "torch": {
            "from_numpy_271": {
                "variable": {
                    "value": "model.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.adpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.rdpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.rdpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_174": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "Method Argument"
                        ],
                        [
                            "40990",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "cfg.hSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.edpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(cfg.nL)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names[1:n_transfer], init_params[1:n_transfer])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_59": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.hSize",
                            "Attribute"
                        ],
                        [
                            "cfg.hSize",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b_subset + -1000000000.0 * (1 - b_subset)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b_subset + -1000000000.0 * (1 - b_subset)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "pos_emb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "Method Argument"
                        ],
                        [
                            "40990",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_210": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits + self.pos_emb_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_21": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "variable"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "variable"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_49": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_82": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_106": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_82": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/models.py": {
        "torch": {
            "DataParallel_24": {
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LMModel(opt.net, n_vocab, n_ctx, return_acts=return_acts, return_probs=return_probs)",
                            "Call"
                        ],
                        [
                            "ClfModel(opt.net, n_vocab, n_ctx, clf_token, answer_size)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/utils.py": {
        "torch": {}
    },
    "src/train/batch.py": {
        "torch": {
            "nll_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_dist.view(-1, word_dist.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_.squeeze(0)[:, 1:, 0].contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "input_.squeeze(0)[:, 1:, 0].contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "loss_reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/train/conceptnet_train.py": {
        "torch": {}
    },
    "src/train/opt.py": {
        "torch": {
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_11": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__100": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/train.py": {
        "torch": {
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.opt.train.static.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train/utils.py": {
        "torch": {
            "softmax_54": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_58": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(device_num))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}