{
    "linear_image2image_translation.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_35": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Z, W) + m",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pca_lowrank_37": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "X - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "q": {
                    "value": "self.n_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "niter": {
                    "value": "self.niter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pca_lowrank(X - m, self.n_components, center=False, niter=self.niter)",
                            "Call"
                        ],
                        [
                            "V * s[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "torch.svd(M)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Z_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.components_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.components_.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.components_).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.components_.T).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Y_GPU, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X_GPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_GPU",
                            "Method Argument"
                        ],
                        [
                            "X_GPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "svd_102": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.transpose(Y_GPU, 0, 1), X_GPU)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pca_lowrank(X - m, self.n_components, center=False, niter=self.niter)",
                            "Call"
                        ],
                        [
                            "torch.svd(M)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(V, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_107": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "X_GPU.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_CPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ],
                        [
                            "X_CPU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.matrix_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(U, torch.transpose(V, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.matrix_).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Z, W) + m",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_CPU).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_42": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(Z ** 3, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pca_lowrank(X - m, self.n_components, center=False, niter=self.niter)",
                            "Call"
                        ],
                        [
                            "V * s[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "torch.svd(M)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(X - m, V)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X - m, V)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Z_CPU).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X - m, W)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.components_).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.components_.T).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_101": {
                "input": {
                    "value": "Y_GPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_GPU",
                            "Method Argument"
                        ],
                        [
                            "Y_GPU",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pca_lowrank(X - m, self.n_components, center=False, niter=self.niter)",
                            "Call"
                        ],
                        [
                            "V * s[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "torch.svd(M)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_42": {
                "input": {
                    "value": "Z ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}