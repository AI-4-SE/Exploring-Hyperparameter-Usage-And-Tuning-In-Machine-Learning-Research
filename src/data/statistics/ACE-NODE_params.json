{
    "Physionet/lib/latent_ode.py": {
        "sklearn": {},
        "torch": {
            "zeros_97": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj_samples, n_traj, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "first_point_enc_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_point_enc, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "means_z0_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(means_z0, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_traj_samples",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_traj",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "starting_point_enc_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(starting_point_enc, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "truth_w_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(truth, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "first_point_std < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_106": {
                "input": {
                    "value": "time_steps_to_predict",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_107": {
                "input": {
                    "value": "first_point_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.sample_standard_gaussian(means_z0, sigma_z0)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_108": {
                "input": {
                    "value": "first_point_enc_aug",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((first_point_enc, zeros), -1)",
                            "Call"
                        ],
                        [
                            "first_point_enc",
                            "Name"
                        ]
                    ]
                }
            },
            "any_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "int_lambda[:, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "int_lambda[0, 0, -1, :] <= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/likelihood_eval.py": {
        "sklearn": {},
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor(0.0).to(get_device(mortality_label))",
                            "Call"
                        ],
                        [
                            "nn.BCEWithLogitsLoss()(label_predictions, mortality_label)",
                            "Call"
                        ],
                        [
                            "ce_loss / n_traj_samples",
                            "BinOp"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(label_predictions))",
                            "Call"
                        ],
                        [
                            "torch.mean(ce_loss)",
                            "Call"
                        ],
                        [
                            "nn.CrossEntropyLoss()(pred_masked, labels.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Independent_30": {
                "variable": {
                    "value": "gaussian",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Normal(loc=mu_2d, scale=obsrv_std.repeat(n_data_points))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "masked_select_127": {
                "variable": {
                    "value": "pred_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_predictions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "pred_mask[i].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_128": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "label_mask[i].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_212": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "poisson_log_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poisson_log_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(info['log_lambda_y'], 2) - info['int_lambda']",
                            "BinOp"
                        ],
                        [
                            "torch.mean(poisson_log_l, -1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(info['log_lambda_y'], truth_repeated, mask_repeated, f)",
                            "Call"
                        ],
                        [
                            "poisson_log_l.permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_63": {
                "input": {
                    "value": "mortality_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mortality_label.reshape(-1)",
                            "Call"
                        ],
                        [
                            "mortality_label[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "mortality_label.repeat(n_traj_samples, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_76": {
                "input": {
                    "value": "label_predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label_predictions.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "label_predictions.reshape(n_traj_samples, -1)",
                            "Call"
                        ],
                        [
                            "label_predictions[:, idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "label_predictions.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "label_predictions.reshape(n_traj_samples * n_traj * n_tp, n_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_77": {
                "input": {
                    "value": "mortality_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mortality_label.reshape(-1)",
                            "Call"
                        ],
                        [
                            "mortality_label[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "mortality_label.repeat(n_traj_samples, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1) > 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_31": {
                "loc": {
                    "value": "mu_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "obsrv_std.repeat(n_data_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "masked_log_lambdas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "mortality_label == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_153": {
                "variable": {
                    "value": "data_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data[i, k, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask[i, k, :, j].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_159": {
                "variable": {
                    "value": "mu_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu[i, k, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask[i, k, :, j].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_249": {
                "input": {
                    "value": "info['log_lambda_y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/parse_datasets copy.py": {
        "sklearn": {
            "train_test_split_125": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_dataset",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MinMaxScaler_538": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_877": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_obj",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_921": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_dataset",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Uniform_1058": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.Tensor([max_t_extrap])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1060": {
                "variable": {
                    "value": "time_steps_extrap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([0.0]), time_steps_extrap)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_1090": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/30/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/50/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/70/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1092": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/30/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/50/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/70/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_56": {
                "variable": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n_tp_data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dataset[:].shape[1]",
                            "Subscript"
                        ],
                        [
                            "dataset.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/30/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/50/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/70/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/30/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/50/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/0Stock_raw/70/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_164": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_165": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0UEA_base/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_240": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_241": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/30UEA_base/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_309": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_314": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_331": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_332": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_333": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_334": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_335": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/50UEA_base/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_404": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_406": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_409": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_427": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_428": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_429": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_430": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_431": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/70UEA_base/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_499": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_501": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_504": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_594": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_596": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_599": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_616": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_617": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_618": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_619": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_620": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_621": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/30/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_679": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_681": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_684": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_699": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_700": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_701": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_702": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_703": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_704": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/50/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_762": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_764": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_767": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_782": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_783": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_784": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_785": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_786": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_787": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0Stock_raw/70/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_845": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_847": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_850": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_887": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_889": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_908": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_909": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_910": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_911": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_912": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_913": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_935": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_938": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_957": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_958": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_959": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_960": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_961": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_962": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_1033": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1036": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1039": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sliced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_like_175": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_187": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_197": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_365": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_370": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_386": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_441": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_444": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_449": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_457": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_473": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_476": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_560": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_562": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_570": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_572": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_580": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_582": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_583": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_631": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_634": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_646": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_649": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_650": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_661": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_664": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_665": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_714": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_717": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_718": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_729": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_732": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_733": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_744": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_747": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_748": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_797": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_801": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_812": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_815": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_816": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_827": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_830": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_831": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_970": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_973": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_975": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_988": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_991": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_993": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1006": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1009": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1011": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1058": {},
            "sort_1061": {
                "input": {
                    "value": "time_steps_extrap",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "distribution.sample(torch.Size([n_total_tp - 1]))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((torch.Tensor([0.0]), time_steps_extrap))",
                            "Call"
                        ],
                        [
                            "torch.sort(time_steps_extrap)[0]",
                            "Subscript"
                        ],
                        [
                            "time_steps_extrap.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_550": {},
            "Tensor_551": {},
            "Tensor_552": {},
            "Tensor_1060": {},
            "isnan_253": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_269": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_285": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_348": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_364": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_380": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_443": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_459": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_475": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_633": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_648": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_663": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_716": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_731": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_746": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_799": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_814": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_829": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_972": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_990": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_1008": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Physionet/lib/parse_datasets.py": {
        "sklearn": {
            "train_test_split_150": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_dataset",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MinMaxScaler_641": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_761": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_901": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_1041": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_1174": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_obj",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Uniform_1474": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.Tensor([max_t_extrap])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1476": {
                "variable": {
                    "value": "time_steps_extrap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([0.0]), time_steps_extrap)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_1510": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(ROOT_PATH + '/0UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/30UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/50UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/70UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/train_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1518": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(ROOT_PATH + '/0UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/30UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/50UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/70UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/test_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_57": {
                "variable": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n_tp_data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dataset[:].shape[1]",
                            "Subscript"
                        ],
                        [
                            "dataset.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(ROOT_PATH + '/0UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/30UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/50UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/70UEA_base/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/train_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(ROOT_PATH + '/0UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/30UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/50UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ROOT_PATH + '/70UEA_base/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/test_y.pt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_207": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_209": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_210": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_212": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/0UEA_base/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_297": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_298": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_299": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_300": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_301": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/30UEA_base/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_371": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_380": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_404": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_405": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_406": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_407": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_408": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/50UEA_base/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_473": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_481": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_490": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_513": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/train_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_514": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/val_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_515": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/test_X.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_516": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/train_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_517": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/val_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_518": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + '/70UEA_base/test_y.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_582": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_590": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_599": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_704": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_712": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_721": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Generator_769": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_769": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "56789",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_843": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_852": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_861": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Generator_909": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_909": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "56789",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_983": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_992": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1001": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Generator_1049": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_1049": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "56789",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_1123": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1132": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1141": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1189": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1197": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_1224": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1227": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1228": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1231": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1234": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1235": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/IO/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_1292": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1305": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1318": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_1347": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/train_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1350": {
                "variable": {
                    "value": "val_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/val_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1353": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/test_X.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1356": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/train_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1359": {
                "variable": {
                    "value": "val_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/val_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1362": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/bigdyl/socar/ACE_NODE/latent_ode/0SEPSIS/NOIO/test_y.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_1419": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1432": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_data), args.batch_size), args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_1445": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_80": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sliced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_like_221": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_233": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_243": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_424": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_427": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_456": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_531": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_533": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_536": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_552": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_563": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_565": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_671": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_681": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_691": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[182, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_797": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_801": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_812": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_815": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_816": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_826": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_829": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_830": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_937": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_940": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_941": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_952": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_955": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_956": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_966": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_969": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_970": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1077": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1080": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1081": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1092": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1095": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1096": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1106": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1109": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1110": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1244": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1247": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1249": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1257": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1260": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1262": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1271": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1274": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1276": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1371": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1374": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1376": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1384": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1387": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1389": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1398": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1401": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "check.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1403": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan_to_num(np.array(v.cpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_1474": {},
            "sort_1477": {
                "input": {
                    "value": "time_steps_extrap",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "distribution.sample(torch.Size([n_total_tp - 1]))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((torch.Tensor([0.0]), time_steps_extrap))",
                            "Call"
                        ],
                        [
                            "torch.sort(time_steps_extrap)[0]",
                            "Subscript"
                        ],
                        [
                            "time_steps_extrap.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_659": {},
            "Tensor_660": {},
            "Tensor_661": {},
            "Tensor_768": {},
            "Tensor_908": {},
            "Tensor_1048": {},
            "Tensor_1476": {},
            "isnan_314": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_329": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_344": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_421": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_437": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_453": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_530": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_546": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_562": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_773": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_799": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_814": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_828": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_913": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_939": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_954": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_968": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_1053": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1079": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_1094": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_1108": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "train_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "val_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "test_X[i, :, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_773": {
                "n": {
                    "value": "seq_len",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_913": {
                "n": {
                    "value": "seq_len",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_1053": {
                "n": {
                    "value": "seq_len",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(56789)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Physionet/lib/utils.py": {
        "sklearn": {
            "accuracy_score_628": {
                "variable": {
                    "value": "total[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "class_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_class_id.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_646": {
                "variable": {
                    "value": "total[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "class_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_class_id.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_587": {
                "variable": {
                    "value": "total[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_test_labels.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "classif_predictions.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_610": {
                "variable": {
                    "value": "total[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_test_labels.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "classif_predictions.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_187": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor([0.0]).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.Tensor([1.0]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_253": {
                "variable": {
                    "value": "checkpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_654": {
                "variable": {
                    "value": "n_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask == 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_655": {
                "variable": {
                    "value": "n_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpt-%04d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_281": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.choice(np.arange(5, n_tp_in_batch - n_points_to_cut - 5), replace=False)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_284": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_288": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res.reshape(start.size(0), n_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_340": {
                "input": {
                    "value": "data_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ],
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_355": {
                "input": {
                    "value": "data_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ],
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_datapoint, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_435": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_dict['observed_data']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_187": {},
            "sum_218": {
                "input": {
                    "value": "data_dict['observed_data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "data_dict['data_to_predict']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res, torch.linspace(start[i], end[i], n_points))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_329": {
                "input": {
                    "value": "reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.reshape(-1, data.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_330": {
                "input": {
                    "value": "reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.reshape(-1, data.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_544": {
                "variable": {
                    "value": "classif_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(classif_predictions, results['label_predictions'].reshape(n_traj_samples, -1, n_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_546": {
                "variable": {
                    "value": "all_test_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_test_labels, batch_dict['labels'].reshape(-1, n_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_623": {
                "variable": {
                    "value": "(_, pred_class_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classif_predictions",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((classif_predictions, results['label_predictions'].reshape(n_traj_samples, -1, n_labels)), 1)",
                            "Call"
                        ],
                        [
                            "classif_predictions[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_624": {
                "variable": {
                    "value": "(_, class_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_641": {
                "variable": {
                    "value": "(_, pred_class_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classif_predictions",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((classif_predictions, results['label_predictions'].reshape(n_traj_samples, -1, n_labels)), 1)",
                            "Call"
                        ],
                        [
                            "classif_predictions[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_642": {
                "variable": {
                    "value": "(_, class_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_661": {
                "input": {
                    "value": "data[mask == 0.0] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_574": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_582": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_597": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_605": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_617": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_635": {
                "input": {
                    "value": "all_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_287": {
                "start": {
                    "value": "start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_584": {
                "input": {
                    "value": "all_test_labels == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_607": {
                "input": {
                    "value": "all_test_labels == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/run_models.py": {
        "sklearn": {},
        "torch": {
            "device_214": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adamax_427": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_221": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_545": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'seed_' + str(args.random_seed) + 'experiment_fc_obs_' + str(experimentID) + '.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_280": {},
            "save_515": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'seed_' + str(args.random_seed) + 'experiment_fc_obs_' + str(experimentID) + '.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/data_preproc/Climate/generate_folds.py": {
        "sklearn": {
            "train_test_split_13": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(N)",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_14": {
                "variable": {
                    "value": "(train_idx, val_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_idx",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/experiments/Climate/climate_gruode.py": {
        "sklearn": {
            "roc_auc_score_245": {
                "variable": {
                    "value": "auc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_105": {
                "y_true": {
                    "value": "labels.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_153": {
                "variable": {
                    "value": "auc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=train_idx)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "dl_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=val_idx, validation=validation, val_options=val_options)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(val_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=test_idx, validation=validation, val_options=val_options)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(test_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nnfwobj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params_dict['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params_dict['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_78": {
                "variable": {
                    "value": "class_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_288": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_282": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_284": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_285": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_289": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_255": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ],
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_163": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ],
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "nnfwobj.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'/home/bigdyl/gru_ode_bayes/experiments/Climate/trained_models/{simulation_name}_MAX.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "nnfwobj.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'/home/bigdyl/gru_ode_bayes/experiments/Climate/trained_models/{simulation_name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sigmoid_245": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_257": {
                "input": {
                    "value": "X_val - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_167": {
                "input": {
                    "value": "X_val - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/experiments/Climate/climate_gruode_atten.py": {
        "sklearn": {
            "roc_auc_score_263": {
                "variable": {
                    "value": "auc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_118": {
                "y_true": {
                    "value": "labels.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_168": {
                "variable": {
                    "value": "auc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(class_pred).cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_69": {
                "variable": {
                    "value": "dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=train_idx)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params_dict['batch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "dl_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=val_idx, validation=validation, val_options=val_options)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(val_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=test_idx, validation=validation, val_options=val_options)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(test_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nnfwobj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params_dict['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params_dict['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_90": {
                "variable": {
                    "value": "class_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_312": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_306": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_307": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_315": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_276": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ],
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_180": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ],
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "nnfwobj.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + f'/trained_models_atten/{simulation_name}_MAX.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "nnfwobj.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ROOT_PATH + f'/trained_models_atten/{simulation_name}.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_263": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "input": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_278": {
                "input": {
                    "value": "X_val - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "X_val - m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/gru_ode_bayes/logger.py": {
        "tensorflow": {
            "create_file_writer_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Summary_51": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_61": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_78": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/CIFAR10/atten_ode_cifar10.py": {
        "torch": {
            "DataLoader_309": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_436": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_472": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_477": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_495": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_69": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_195": {
                "variable": {
                    "value": "self.sigmoid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_207": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:size]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "a_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sigmoid1(a_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_264": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_439": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_440": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_441": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_466": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_467": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_173": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_529": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_531": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_552": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_556": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/CIFAR10/ode_cifar10.py": {
        "torch": {
            "DataLoader_212": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='.data/', train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_222": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='.data/', train=True, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='.data/', train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_335": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_379": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_384": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_401": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_55": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_168": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_343": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_344": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_373": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_374": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_376": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_113": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_355": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_358": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_443": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/MNIST/atten_ode_mnist.py": {
        "torch": {
            "DataLoader_282": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_402": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_421": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_427": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_441": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_64": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "variable": {
                    "value": "self.relu_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_177": {
                "variable": {
                    "value": "self.sigmoid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_186": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:size]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "a_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sigmoid1(a_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_205": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_244": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_389": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_390": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_391": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_419": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_419": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_473": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_475": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_244": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_500": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/MNIST/odenet_mnist.py": {
        "torch": {
            "DataLoader_219": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root='.data/mnist', train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_355": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_396": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_413": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_56": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_175": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_342": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_343": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_385": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_386": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_115": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_365": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_368": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_373": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_459": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/SVHN/atten_ode_svhn.py": {
        "torch": {
            "DataLoader_309": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='train', download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='extra', download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='test', download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_445": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_472": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_475": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_492": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_69": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_195": {
                "variable": {
                    "value": "self.sigmoid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_207": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:size]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "a_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sigmoid1(a_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_264": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_431": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_432": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_433": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_466": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_467": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_173": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_522": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_524": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits[size:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_549": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/examples/SVHN/ode_svhn.py": {
        "torch": {
            "DataLoader_217": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='train', download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "train_eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='extra', download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root='.data/', split='test', download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_353": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsampling_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_410": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_427": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_53": {
                "num_groups": {
                    "value": "min(32, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "ttx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "self.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_172": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_345": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_346": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_347": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_399": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_400": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_402": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_112": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_366": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_172": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_473": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/adams.py": {
        "torch": {
            "empty_30": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "k + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "error_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(local_error, tolerance)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_131": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/adaptive_heun.py": {
        "torch": {
            "mul_38": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_91": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "mean_sq_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(y1_error, atol=self.atol, rtol=self.rtol, y0=y0, y1=y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/adjoint.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_129": {
                "variable": {
                    "value": "time_vjps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_strided_106": {
                "variable": {
                    "value": "_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t_.requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_strided_107": {
                "variable": {
                    "value": "_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "odeint(func, y0, t, rtol=rtol, atol=atol, method=method, options=options)",
                            "Call"
                        ],
                        [
                            "y_aug[1]",
                            "Subscript"
                        ],
                        [
                            "y.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_111": {
                "variable": {
                    "value": "(vjp_t, vjp_y, *vjp_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "func_eval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "func(t[i], y[i])",
                            "Call"
                        ],
                        [
                            "func(t if t_requires_grad else t_, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(t, y) + adjoint_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "-adj_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "enable_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t_.requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "odeint(func, y0, t, rtol=rtol, atol=atol, method=method, options=options)",
                            "Call"
                        ],
                        [
                            "y_aug[1]",
                            "Subscript"
                        ],
                        [
                            "y.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_220": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_strided_108": {
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/bosh3.py": {
        "torch": {
            "abs_78": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_85": {
                "data": {
                    "value": "mean_sq_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(y1_error, atol=self.atol, rtol=self.rtol, y0=y0, y1=y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/dopri5.py": {
        "torch": {
            "mul_49": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_102": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "data": {
                    "value": "mean_sq_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(y1_error, atol=self.atol, rtol=self.rtol, y0=y0, y1=y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/dopri8.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1 / 18, 1 / 12, 1 / 8, 5 / 16, 3 / 8, 59 / 400, 93 / 200, 5490023248 / 9719169821, 13 / 20, 1201146811 / 1299019798, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "torch.tensor(A, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "C_sol",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "C_sol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[14005451 / 335480064, 0, 0, 0, 0, -59238493 / 1068277825, 181606767 / 758867731, 561292985 / 797845732, -1041891430 / 1371343529, 760417239 / 1151165299, 118820643 / 751138087, -528747749 / 2220607170, 1 / 4, 0]",
                            "List"
                        ],
                        [
                            "torch.tensor(C_sol, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "C_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "C_err",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[14005451 / 335480064 - 13451932 / 455176623, 0, 0, 0, 0, -59238493 / 1068277825 - -808719846 / 976000145, 181606767 / 758867731 - 1757004468 / 5645159321, 561292985 / 797845732 - 656045339 / 265891186, -1041891430 / 1371343529 - -3867574721 / 1518517206, 760417239 / 1151165299 - 465885868 / 322736535, 118820643 / 751138087 - 53011238 / 667516719, -528747749 / 2220607170 - 2 / 45, 1 / 4, 0]",
                            "List"
                        ],
                        [
                            "torch.tensor(C_err, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "_C_mid",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "C_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.0] * 14",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/interp.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/misc.py": {
        "torch": {
            "sqrt_167": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(mean_error_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(a)",
                            "Call"
                        ],
                        [
                            "a.type(dtype)",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1e-06).to(h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_143": {
                "input": {
                    "value": "100 * h0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_175": {
                "obj": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y0,)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_7": {
                "tensors": {
                    "value": "flat",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_7": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "flat",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_51": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "input": {
                    "value": "sum((x_.norm() ** 2 for x_ in x)) / sum((x_.numel() for x_ in x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_169": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "is_floating_point_192": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-t",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "y0_ - y1_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_156": {
                "input": {
                    "value": "error_ratio_ * error_ratio_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_floating_point_190": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "max_35": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_35": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_152": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/scipy_wrapper.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(t).to(device, dtype)",
                            "Call"
                        ],
                        [
                            "t.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(y).to(device, dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(torch.tensor(y).to(device, dtype), shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "sol.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "self.y0",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/solvers.py": {
        "torch": {
            "ceil_61": {
                "variable": {
                    "value": "niters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(end_time - start_time) / step_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "niters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ceil((end_time - start_time) / step_size + 1).item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Image_Classification/torchdiffeq/_impl/tsit5.py": {
        "torch": {
            "sqrt_56": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((torch.sum(sq_error_ratio_) for sq_error_ratio_ in sq_error_ratio)) / sum((sq_error_ratio_.numel() for sq_error_ratio_ in sq_error_ratio))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_58": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "mul_122": {
                "input": {
                    "value": "tensor_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "sq_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_119": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/generate_timeseries.py": {
        "torch": {
            "Tensor_91": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "traj_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_102": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/attentive_latent_ode_model.py": {
        "torch": {}
    },
    "Physionet/lib/base_models.py": {
        "torch": {
            "Sequential_20": {
                "*args": {
                    "value": "nn.Linear(z0_dim, 300)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "self.obsrv_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "log_density",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_density_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "results[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ]
                    ]
                }
            },
            "mean_181": {
                "variable": {
                    "value": "results[likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_182": {
                "variable": {
                    "value": "results[mse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_183": {
                "variable": {
                    "value": "results[pois_likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "results[ce_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_217": {
                "variable": {
                    "value": "self.obsrv_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "log_density",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_density_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_288": {
                "variable": {
                    "value": "fp_distr",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "fp_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "fp_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fp_std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_303": {
                "variable": {
                    "value": "kldiv_z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kldiv_z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_318": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_334": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_367": {
                "variable": {
                    "value": "results[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ]
                    ]
                }
            },
            "mean_368": {
                "variable": {
                    "value": "results[likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_369": {
                "variable": {
                    "value": "results[mse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_370": {
                "variable": {
                    "value": "results[pois_likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_371": {
                "variable": {
                    "value": "results[ce_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_372": {
                "variable": {
                    "value": "results[kl_first_p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "kldiv_z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_373": {
                "variable": {
                    "value": "results[std_first_p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "fp_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fp_std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Name"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_97": {
                "input": {
                    "value": "log_density_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_165": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_270": {
                "input": {
                    "value": "log_density_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_294": {
                "input": {
                    "value": "kldiv_z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_329": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_354": {
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z0_dim, n_labels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_147": {
                "input": {
                    "value": "ce_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_167": {
                "input": {
                    "value": "likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z0_dim, n_labels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_290": {
                "input": {
                    "value": "fp_std < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logsumexp_353": {
                "input": {
                    "value": "rec_likelihood - kl_coef * kldiv_z0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_355": {
                "input": {
                    "value": "rec_likelihood - kl_coef * kldiv_z0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Name"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_232": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Name"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Physionet/lib/create_augmented_latent_ode_model.py": {
        "torch": {}
    },
    "Physionet/lib/create_latent_ode_model.py": {
        "torch": {}
    },
    "Physionet/lib/create_latent_ode_model_org.py": {
        "torch": {}
    },
    "Physionet/lib/diffeq_solver.py": {
        "torch": {
            "zeros_120": {
                "variable": {
                    "value": "aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "traj",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "first_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_point, aug]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_point, att0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_24": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_97": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_170": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "att0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att0, att]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "pred_y[:, :, 0, :] - first_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_132": {
                "input": {
                    "value": "pred_y[:, :, 0, :] - first_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_227": {
                "input": {
                    "value": "pred_y_h[:, :, 0, :] - first_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/encoder_decoder.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "y_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_mean, y_std, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_mean * reset_gate, y_std * reset_gate, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.hiddens_to_z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.gru_rnn_output_size, 50)",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_134": {
                "variable": {
                    "value": "self.gru_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.transform_z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2, 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "prev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "prev_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_331": {
                "variable": {
                    "value": "latent_ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latent_ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(latent_ys, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, input_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.update_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.reset_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.new_state_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_111": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "delta_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_t, torch.zeros(1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_t, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_192": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "prev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "prev_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_77": {
                "input": {
                    "value": "new_y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1 - update_gate) * new_state + update_gate * y_mean",
                            "BinOp"
                        ],
                        [
                            "mask * new_y + (1 - mask) * y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_93": {
                "input": {
                    "value": "new_y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1 - update_gate) * new_state + update_gate * y_mean",
                            "BinOp"
                        ],
                        [
                            "mask * new_y + (1 - mask) * y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "self.gru_rnn_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_144": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_145": {
                "input": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_173": {
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_174": {
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z0_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_225": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_226": {
                "input": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_277": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_278": {
                "input": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_288": {
                "variable": {
                    "value": "time_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_t, t_i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_294": {
                "variable": {
                    "value": "ode_sol",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_y, ode_sol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_333": {
                "input": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_334": {
                "input": {
                    "value": "yi_std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_345": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_88": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, n_data_dims:]",
                            "Subscript"
                        ],
                        [
                            "(torch.sum(mask, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_247": {
                "tensors": {
                    "value": "(means_z0, std_z0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_305": {
                "input": {
                    "value": "ode_sol[:, :, 0, :] - prev_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_291": {
                "input": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver.ode_func(prev_t, prev_y) * (t_i - prev_t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_296": {
                "input": {
                    "value": "ode_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver(prev_y, time_points)",
                            "Call"
                        ],
                        [
                            "prev_y + inc",
                            "BinOp"
                        ],
                        [
                            "torch.stack((prev_y, ode_sol), 2).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_303": {
                "input": {
                    "value": "ode_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver(prev_y, time_points)",
                            "Call"
                        ],
                        [
                            "prev_y + inc",
                            "BinOp"
                        ],
                        [
                            "torch.stack((prev_y, ode_sol), 2).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_307": {
                "input": {
                    "value": "ode_sol[:, :, 0, :] - prev_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, n_data_dims:]",
                            "Subscript"
                        ],
                        [
                            "(torch.sum(mask, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/ode_func.py": {
        "torch": {
            "Tensor_81": {
                "variable": {
                    "value": "self.const_for_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_146": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size * size2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size2 * size2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "grad2_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-grad2",
                            "UnaryOp"
                        ],
                        [
                            "self.fc(grad2_fc)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad2, (self.n_traj_samples, size2, size2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.n_traj_samples, size * size2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "grad2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-grad2",
                            "UnaryOp"
                        ],
                        [
                            "self.fc(grad2_fc)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad2, (self.n_traj_samples, size2, size2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.n_traj_samples, size2, size2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad, grad2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "variable": {
                    "value": "h_yT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[:, :size0 - size, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[:, size0 - size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "h_yT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(h_y, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(a_y, h_yT)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_58": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(dydt_dldt, torch.exp(log_lam))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_130": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "self.const_for_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_120": {
                "input": {
                    "value": "log_lam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_lam - torch.log(self.const_for_lambda)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Physionet/lib/ode_rnn.py": {
        "torch": {
            "Sequential_66": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "data_and_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "time_steps_to_predict - truth_time_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/plotting.py": {
        "torch": {
            "from_numpy_145": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([x, y], -1).reshape(K * K, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flat_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(xx.flatten(), 1), np.expand_dims(yy.flatten(), 1)), 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flat_inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zs, torch.zeros(K * K, latent_dim - 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "prior_density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_density_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.z0_prior.log_prob(z0_grid.unsqueeze(0)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.sum(prior_density_grid, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_337": {
                "variable": {
                    "value": "density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_joint_density",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "prior_density_grid + masked_gaussian_log_density_grid",
                            "BinOp"
                        ],
                        [
                            "log_joint_density + poisson_log_density_grid",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(log_joint_density)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(q_density_grid)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(xx.shape[0], xx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_361": {
                "variable": {
                    "value": "q_z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z0_mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0_mu[:, :, :model.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "z0_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0_std[:, :, :model.latent_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_365": {
                "variable": {
                    "value": "q_density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_density_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q_z0.log_prob(z0_grid)",
                            "Call"
                        ],
                        [
                            "torch.sum(q_density_grid, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_366": {
                "variable": {
                    "value": "density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_density_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q_z0.log_prob(z0_grid)",
                            "Call"
                        ],
                        [
                            "torch.sum(q_density_grid, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_368": {
                "variable": {
                    "value": "density_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(log_joint_density)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(q_density_grid)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(xx.shape[0], xx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "z0_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0_grid, torch.zeros(z0_grid.size(0), model.latent_dim - 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj, model.input_dim + model.latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "z0_grid_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0_grid, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "data_w_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_w_mask, observed_mask[traj_id].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_485": {
                "seed": {
                    "value": "1991",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "K * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "int_lambda[:, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_288": {
                "input": {
                    "value": "int_lambda[0, 0, -1, :] <= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "z0_grid.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "model.latent_dim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/lib/rnn_baselines.py": {
        "torch": {
            "zeros_134": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj, n_tp, n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_135": {
                "variable": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.min(torch.max(zeros, w_input_decay * cum_delta_ts + b_input_decay), zeros + 1000)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_141": {
                "variable": {
                    "value": "data_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[:, :-self.input_size_for_decay]",
                            "Subscript"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "data_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "all_hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hiddens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_hiddens, 0)",
                            "Call"
                        ],
                        [
                            "all_hiddens.permute(1, 0, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size_for_decay, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_53": {
                "variable": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.min(torch.max(torch.zeros([1]).to(self.device), self.decay(cum_delta_ts)), torch.ones([1]).to(self.device) * 1000)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "resetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "inputgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "newgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_172": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(inputs.size(0), n_steps, inputs.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "delta_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_ts, zero_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "self.z0_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(rec_dims, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_435": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "delta_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_ts, zero_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "delta_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_delta_t, time_steps_to_predict[1:] - time_steps_to_predict[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, mask_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "input_w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, cum_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "input_w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "input_w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "input_w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_279": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.w_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "self.b_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_410": {
                "variable": {
                    "value": "self.rnn_cell_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rec_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_411": {
                "variable": {
                    "value": "self.rnn_cell_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_445": {
                "variable": {
                    "value": "self.w_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_448": {
                "variable": {
                    "value": "self.b_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "input_size_for_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_62": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[:, :-self.input_size_for_decay]",
                            "Subscript"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_ih.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_63": {
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "first_hidden",
                            "Name"
                        ],
                        [
                            "cell(input_w_t, hidden)",
                            "Call"
                        ],
                        [
                            "summed_mask * hidden + (1 - summed_mask) * prev_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * decay",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_hh.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_136": {
                "input": {
                    "value": "torch.max(zeros, w_input_decay * cum_delta_ts + b_input_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_272": {
                "in_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "in_features": {
                    "value": "rec_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_431": {
                "in_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_438": {
                "in_features": {
                    "value": "n_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_54": {
                "input": {
                    "value": "torch.max(torch.zeros([1]).to(self.device), self.decay(cum_delta_ts))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_137": {
                "input": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([n_traj, n_tp, n_dims]).to(get_device(data))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_223": {
                "input": {
                    "value": "summed_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.sum(mask_i, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_315": {
                "input": {
                    "value": "time_steps_to_predict - truth_time_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_55": {
                "input": {
                    "value": "torch.zeros([1]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "mask_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask[:, i, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_294": {},
            "Tensor_445": {},
            "Tensor_448": {}
        }
    },
    "Physionet/mujoco_physics.py": {
        "torch": {
            "Tensor_33": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._generate_random_trajectories(self.n_training_samples)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.data_folder, self.training_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "data_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.data_folder, self.training_file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Physionet/person_activity.py": {
        "torch": {
            "unique_284": {
                "variable": {
                    "value": "(combined_tt, inverse_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([ex[1] for ex in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "combined_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "combined_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_292": {
                "variable": {
                    "value": "combined_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_327": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PersonActivity('data/PersonActivity', download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "variable_time_collate_fn_activity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_93": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_267": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_324": {
                "seed": {
                    "value": "1991",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.data_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.data_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tt.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[torch.zeros(1).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.tensor(tt).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_101": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vals.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.tag_ids), 3).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(vals)",
                            "Call"
                        ],
                        [
                            "vals.reshape(vals.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_102": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.tag_ids), 3).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask.reshape(mask.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_103": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.label_names)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "[ex[1] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_309": {
                "input": {
                    "value": "combined_tt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt.float()",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_79": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "records",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, 'data.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_310": {
                "input": {
                    "value": "combined_tt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt.float()",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "value_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "len(self.label_names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "len(self.label_names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "labels[-1][self.label_dict[label]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Physionet/physionet.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unique_384": {
                "variable": {
                    "value": "(combined_tt, inverse_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([ex[1] for ex in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "combined_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_391": {
                "variable": {
                    "value": "combined_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_437": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PhysioNet('data/physionet', train=False, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "variable_time_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "batch_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_48": {
                "variable": {
                    "value": "batch_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_167": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_366": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_434": {
                "seed": {
                    "value": "1991",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_54": {
                "variable": {
                    "value": "data_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_min",
                            "Name"
                        ],
                        [
                            "torch.min(data_min, batch_min)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_55": {
                "variable": {
                    "value": "data_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_max",
                            "Name"
                        ],
                        [
                            "torch.max(data_max, batch_max)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_125": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, data_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.label_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_154": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, data_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.label_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "[ex[1] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "*size": {
                    "value": "len(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "N_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_396": {
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_419": {
                "input": {
                    "value": "combined_tt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_146": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "tt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tt.to(device)",
                            "Call"
                        ],
                        [
                            "[0.0]",
                            "List"
                        ],
                        [
                            "torch.tensor(tt).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_248": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vals.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_249": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, non_zero_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_260": {
                "obj": {
                    "value": "patients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, filename.split('.')[0] + '_' + str(self.quantization) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_420": {
                "input": {
                    "value": "combined_tt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_184": {
                "variable": {
                    "value": "outcomes[record_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "labels",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "['SAPS-I', 'SOFA', 'Length_of_stay', 'Survival', 'In-hospital_death']",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outcomes[record_id]",
                            "Subscript"
                        ],
                        [
                            "labels[4]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, filename.split('.')[0] + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_44": {
                "input": {
                    "value": "non_missing_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vals[:, i][mask[:, i] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_45": {
                "input": {
                    "value": "non_missing_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vals[:, i][mask[:, i] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_325": {
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, non_zero_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/gru_ode_bayes/data_utils.py": {
        "torch": {
            "Tensor_232": {
                "variable": {
                    "value": "df_cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[b['y'] for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "res[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "df.iloc[:, value_cols].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "res[M]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "df.iloc[:, mask_cols].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "res[obs_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_ids",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "idx2batch[df.index.values].values",
                            "Attribute"
                        ],
                        [
                            "idx2batch[df.index.values].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_313": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_328": {
                "variable": {
                    "value": "Xsplit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.from_numpy(X[M])",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(-df.num_obs.values).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_329": {
                "variable": {
                    "value": "Fsplit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.from_numpy(np.where(M)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(-df.num_obs.values).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_331": {
                "variable": {
                    "value": "Xpadded",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Xsplit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.split(torch.from_numpy(X[M]), lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_332": {
                "variable": {
                    "value": "Fpadded",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Fsplit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.split(torch.from_numpy(np.where(M)[1]), lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "res[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "df.iloc[:, value_cols].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_355": {
                "variable": {
                    "value": "res[M]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "M.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "res[obs_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_ids",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "idx2batch[df.index.values].values",
                            "Attribute"
                        ],
                        [
                            "idx2batch[df.index.values].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "res[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[b['y'] for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df_after.iloc[:, value_cols_val].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "M_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df_after.iloc[:, mask_cols_val].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df_after.iloc[:, value_cols_val].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "M_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df_after.iloc[:, mask_cols_val].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "tens_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df_last.iloc[:, value_cols].values[perm_last, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "ndarray": {
                    "value": "X[M]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "np.where(M)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/gru_ode_bayes/models.py": {
        "torch": {
            "tensor_975": {
                "variable": {
                    "value": "obs_noise_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_noise_std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.tensor(obs_noise_std)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.lin_xz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.lin_xn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.lin_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_xz(x) + self.lin_hz(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_xn(x) + self.lin_hn(z * h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.lin_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "temp",
                            "Name"
                        ],
                        [
                            "temp",
                            "Name"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(pk, k)",
                            "BinOp"
                        ],
                        [
                            "solution",
                            "Name"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "h[:sol_size]",
                            "Subscript"
                        ],
                        [
                            "h + delta_t * solution[:sol_size]",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(pk, k)",
                            "BinOp"
                        ],
                        [
                            "solution[:size]",
                            "Subscript"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hz(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hn(z * h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.lin_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.lin_hz_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.lin_hn_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "a_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(a0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "torch.matmul(aT, a0)",
                            "Call"
                        ],
                        [
                            "h[size0:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "solution[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(h0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "h[:size0]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(h0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "self.softmax(a0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.mul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_s, h0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hz(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hn(z * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "xa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.mul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_s, h0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_131": {
                "variable": {
                    "value": "za",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xa + self.lin_hz_at(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "variable": {
                    "value": "na",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xa + self.lin_hn_at(za * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dh, dha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.lin_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.lin_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.lin_hr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_171": {
                "variable": {
                    "value": "(xr, xz, xh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_x(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xr + self.lin_hr(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_173": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xz + self.lin_hz(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_174": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xh + self.lin_hh(r * h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.lin_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.lin_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.lin_hr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.lin_x_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.lin_hh_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.lin_hz_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.lin_hr_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(h0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "h[:size0]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(h0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 25000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(a0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "torch.matmul(aT, a0)",
                            "Call"
                        ],
                        [
                            "h[size0:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "solution[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 25000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "aT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(a0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "torch.matmul(aT, a0)",
                            "Call"
                        ],
                        [
                            "h[size0:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "solution[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(a0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(a0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "torch.matmul(aT, a0)",
                            "Call"
                        ],
                        [
                            "h[size0:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "solution[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_224": {
                "variable": {
                    "value": "a_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "h[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(a0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "torch.matmul(aT, a0)",
                            "Call"
                        ],
                        [
                            "h[size0:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "solution[size:]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(corr)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_225": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(h0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "h[:size0]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(h0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "self.softmax(a0)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_227": {
                "variable": {
                    "value": "(xr, xz, xh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_x(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_229": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xr + self.lin_hr(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_230": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xz + self.lin_hz(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_231": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xh + self.lin_hh(r * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_233": {
                "variable": {
                    "value": "(xra, xza, xha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_x(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_235": {
                "variable": {
                    "value": "ra",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xra + self.lin_hr(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_236": {
                "variable": {
                    "value": "za",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xza + self.lin_hz(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_237": {
                "variable": {
                    "value": "ua",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xha + self.lin_hh(ra * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1 - z) * (n - h)",
                            "BinOp"
                        ],
                        [
                            "(1 - z) * (n - h)",
                            "BinOp"
                        ],
                        [
                            "(1 - z) * (n - h_)",
                            "BinOp"
                        ],
                        [
                            "(1 - z) * (u - h)",
                            "BinOp"
                        ],
                        [
                            "(1 - z) * (u - h_)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(dh, (500, 50))",
                            "Call"
                        ],
                        [
                            "(1 - z) * (u - h)",
                            "BinOp"
                        ],
                        [
                            "(1 - z) * (u - h_)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(500, 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "dha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1 - za) * (na - h_)",
                            "BinOp"
                        ],
                        [
                            "(1 - za) * (ua - h_)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(dha, (500, 50))",
                            "Call"
                        ],
                        [
                            "(1 - za) * (ua - h_)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(500, 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dh, dha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.lin_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.lin_hr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "temp",
                            "Name"
                        ],
                        [
                            "temp",
                            "Name"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(pk, k)",
                            "BinOp"
                        ],
                        [
                            "solution",
                            "Name"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "h[:sol_size]",
                            "Subscript"
                        ],
                        [
                            "h + delta_t * solution[:sol_size]",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(pk, k)",
                            "BinOp"
                        ],
                        [
                            "solution[:size]",
                            "Subscript"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "h + delta_t * self.gru_c(p, h)",
                            "BinOp"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ],
                        [
                            "self.covariates_map(cov)",
                            "Call"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ],
                        [
                            "self.gru(p, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_278": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hr(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_279": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hz(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hh(r * h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.lin_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.lin_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.lin_hr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.lin_hh_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.lin_hz_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.lin_hr_at",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_303": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_332": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(h0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "h[:size0]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(h0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(a0)",
                            "Call"
                        ],
                        [
                            "self.softmax(a0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h0",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "h[:size]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(h0, (1, 25000))",
                            "Call"
                        ],
                        [
                            "h[:size0]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(h0, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.mul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_s, h0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_336": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.mul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_s, h0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_337": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hr(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_338": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hz(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_339": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.lin_hh(r * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_341": {
                "variable": {
                    "value": "xa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.mul(h0, a_s)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_s, h0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h_, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_342": {
                "variable": {
                    "value": "ra",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xa + self.lin_hr_at(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_343": {
                "variable": {
                    "value": "za",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xa + self.lin_hz_at(h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_344": {
                "variable": {
                    "value": "ua",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xa + self.lin_hh_at(ra * h_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dh, dha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_358": {
                "variable": {
                    "value": "self.gru_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prep_hidden * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRUCell_359": {
                "variable": {
                    "value": "self.gru_debug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prep_hidden * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_363": {
                "variable": {
                    "value": "self.w_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std * torch.randn(input_size, 4, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_364": {
                "variable": {
                    "value": "self.bias_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1 + torch.zeros(input_size, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_374": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_obs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "p[i_obs]",
                            "Subscript"
                        ],
                        [
                            "p[i_obs]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_375": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_386": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_obs, mean, logvar, error]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_404": {
                "variable": {
                    "value": "self.gru_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prep_hidden * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRUCell_405": {
                "variable": {
                    "value": "self.gru_debug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prep_hidden * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_409": {
                "variable": {
                    "value": "self.w_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std * torch.randn(input_size, 4, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "variable": {
                    "value": "self.bias_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1 + torch.zeros(input_size, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_419": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_obs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "p[i_obs]",
                            "Subscript"
                        ],
                        [
                            "p[i_obs]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_429": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_obs, mean, var, error]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_429": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "variable": {
                    "value": "self.p_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, p_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_467": {
                "variable": {
                    "value": "self.classification_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, classification_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.covariates_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(cov_size, cov_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_510": {
                "variable": {
                    "value": "eval_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "variable": {
                    "value": "eval_ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_688": {
                "variable": {
                    "value": "self.p_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, p_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_695": {
                "variable": {
                    "value": "self.classification_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, classification_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_720": {
                "variable": {
                    "value": "self.covariates_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(cov_size, cov_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_744": {
                "variable": {
                    "value": "eval_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_745": {
                "variable": {
                    "value": "eval_ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_822": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_829": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_853": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_854": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_922": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_977": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_obs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "p[i_obs]",
                            "Subscript"
                        ],
                        [
                            "p[i_obs]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_978": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_980": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_obs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "p[i_obs]",
                            "Subscript"
                        ],
                        [
                            "p[i_obs]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_982": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(var) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_995": {
                "variable": {
                    "value": "self.classification_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, classification_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1008": {
                "variable": {
                    "value": "self.covariates_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(cov_size, cov_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1121": {
                "variable": {
                    "value": "self.p_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, p_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_1126": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_1130": {
                "variable": {
                    "value": "self.w_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std * torch.randn(input_size, 4, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_1131": {
                "variable": {
                    "value": "self.bias_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1 + torch.zeros(input_size, prep_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_1139": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_1146": {
                "variable": {
                    "value": "hrange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "hidden.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_1150": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1157": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_step, mean, logvar, error]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_1157": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_1198": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1222": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1239": {
                "variable": {
                    "value": "self.p_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, p_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1246": {
                "variable": {
                    "value": "self.classification_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size, classification_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_1253": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_1260": {
                "variable": {
                    "value": "self.covariates_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(cov_size, cov_hidden, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_513": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_581": {
                "variable": {
                    "value": "class_loss_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_582": {
                "variable": {
                    "value": "num_evals_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_times_total, eval_times)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_vals_total, eval_ps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_749": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_760": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_845": {
                "variable": {
                    "value": "class_loss_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "variable": {
                    "value": "num_evals_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_893": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_900": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_913": {
                "variable": {
                    "value": "theta_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a0.cuda()",
                            "Call"
                        ],
                        [
                            "a0",
                            "Name"
                        ],
                        [
                            "a0.cuda()",
                            "Call"
                        ],
                        [
                            "a0",
                            "Name"
                        ],
                        [
                            "a0.cuda()",
                            "Call"
                        ],
                        [
                            "a0",
                            "Name"
                        ],
                        [
                            "a0.cuda()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_932": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_times_total, eval_times)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_933": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_vals_total, eval_ps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_939": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_945": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_1073": {
                "variable": {
                    "value": "X_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xpadded[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "L_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_1074": {
                "variable": {
                    "value": "F_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fpadded[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "L_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1316": {
                "variable": {
                    "value": "class_loss_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1317": {
                "variable": {
                    "value": "num_evals_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_387": {
                "input": {
                    "value": "gru_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([X_obs, mean, logvar, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_obs, mean, var, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_step, mean, logvar, error], dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, W).squeeze(1) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w_prep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_387": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_421": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(var) + self.var_eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_422": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(var) + self.var_eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_430": {
                "input": {
                    "value": "gru_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([X_obs, mean, logvar, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_obs, mean, var, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_step, mean, logvar, error], dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, W).squeeze(1) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w_prep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_430": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_463": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_464": {
                "in_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_468": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_470": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_471": {
                "in_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_491": {
                "in_features": {
                    "value": "cov_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_493": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_494": {
                "in_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_601": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_times_total, eval_times)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_602": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_vals_total, eval_ps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_689": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_691": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_692": {
                "in_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_696": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_698": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_699": {
                "in_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_721": {
                "in_features": {
                    "value": "cov_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_723": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_724": {
                "in_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_725": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_868": {
                "variable": {
                    "value": "eval_times_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_times_total, eval_times)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_869": {
                "variable": {
                    "value": "eval_vals_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_vals_total, eval_ps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_996": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_998": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_999": {
                "in_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1009": {
                "in_features": {
                    "value": "cov_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_1010": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1011": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1012": {
                "in_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1122": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_1123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1124": {
                "in_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_1161": {
                "input": {
                    "value": "gru_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([X_obs, mean, logvar, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_obs, mean, var, error], dim=2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, self.w_prep).squeeze(2) + self.bias_prep",
                            "BinOp"
                        ],
                        [
                            "gru_input.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(gru_input * M_obs).permute(1, 2, 0).contiguous().view(-1, self.prep_hidden * self.input_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([X_step, mean, logvar, error], dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gru_input, W).squeeze(1) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_prep[F_step, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_1161": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1240": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_1241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1242": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1243": {
                "in_features": {
                    "value": "p_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1247": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_1248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1249": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1250": {
                "in_features": {
                    "value": "classification_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1261": {
                "in_features": {
                    "value": "cov_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_1262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1263": {
                "p": {
                    "value": "dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1264": {
                "in_features": {
                    "value": "cov_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias_prep[F_step]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_1265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_1370": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_363": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_409": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_982": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(var) + self.var_eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_988": {
                "input": {
                    "value": "sigma_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_1104": {
                "tensors": {
                    "value": "path_p",
                    "type": "List",
                    "possible_values": [
                        [
                            "[p]",
                            "List"
                        ],
                        [
                            "[p]",
                            "List"
                        ],
                        [
                            "[p]",
                            "List"
                        ],
                        [
                            "[p]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_1130": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1131": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "prep_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_1329": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.gru_bayes.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "self.p_model(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_665": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_667": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_962": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_964": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "pow_988": {
                "input": {
                    "value": "mu_1 - mu_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_1200": {
                "input": {
                    "value": "error",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X_obs - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X_obs - mean) / torch.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "(X_step - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1392": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1394": {
                "tensors": {
                    "value": "path_h",
                    "type": "List",
                    "possible_values": [
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ],
                        [
                            "[h]",
                            "List"
                        ]
                    ]
                }
            },
            "pow_381": {
                "input": {
                    "value": "error",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X_obs - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X_obs - mean) / torch.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "(X_step - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_531": {
                "data": {
                    "value": "[0, delta_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_534": {
                "tensors": {
                    "value": "[eval_times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_776": {
                "data": {
                    "value": "[0, delta_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_778": {
                "tensors": {
                    "value": "[eval_times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_1154": {
                "input": {
                    "value": "error",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X_obs - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X_obs - mean) / torch.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "(X_step - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_425": {
                "input": {
                    "value": "error",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X_obs - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X_obs - mean) / torch.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "(X_step - mean) / sigma",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_425": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(var) + self.var_eps",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "USHCN-daily/gru_ode_bayes/paper_plotting.py": {
        "torch": {
            "DataLoader_85": {
                "variable": {
                    "value": "dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.ODE_Dataset(csv_file=csv_file_path, label_file=csv_file_tags, cov_file=csv_file_cov, idx=test_idx, validation=validation, val_options=val_options)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_utils.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(data_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_163": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_61": {
                "f": {
                    "value": "f'/home/bigdyl/gru_ode_bayes/experiments/Climate/trained_models/{model_name}_MAX.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "f'/home/bigdyl/gru_ode_bayes/experiments/Climate/trained_models_atten/{model_name2}_MAX.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_114": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec, p_vec, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_116": {
                "variable": {
                    "value": "(m2, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_val2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.extract_from_path(t_vec2, p_vec2, times_val, times_idx)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_132": {
                "input": {
                    "value": "m_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ob_10 - m2_10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_133": {
                "input": {
                    "value": "m_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ob_10 - m_10",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/adams.py": {
        "torch": {
            "empty_30": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "k + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "error_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(local_error, tolerance)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_127": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_127": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/adjoint.py": {
        "torch": {
            "is_tensor_113": {
                "obj": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y0,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "adj_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_flatten(func.parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "adj_time",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "time_vjps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "time_vjps[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_41": {
                "variable": {
                    "value": "(vjp_t, *vjp_y_and_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "func_eval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "func(t, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(t,) + y + f_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "tuple((-adj_y_ for adj_y_ in adj_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "vjp_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.to(y[0].device).detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "adj_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[t[i], t[i - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_71": {
                "input": {
                    "value": "func_i_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output_i_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/dopri5.py": {
        "torch": {
            "mul_50": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "data": {
                    "value": "mean_sq_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(y1_error, atol=self.atol, rtol=self.rtol, y0=y0, y1=y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/interp.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/misc.py": {
        "torch": {
            "sqrt_167": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(mean_error_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(a)",
                            "Call"
                        ],
                        [
                            "a.type(dtype)",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1e-06).to(h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_143": {
                "input": {
                    "value": "100 * h0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_175": {
                "obj": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y0,)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_7": {
                "tensors": {
                    "value": "flat",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_7": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "flat",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_51": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "input": {
                    "value": "sum((x_.norm() ** 2 for x_ in x)) / sum((x_.numel() for x_ in x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_169": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "is_floating_point_192": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-t",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "y0_ - y1_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_156": {
                "input": {
                    "value": "error_ratio_ * error_ratio_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_floating_point_190": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "max_35": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_35": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_152": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/solvers.py": {
        "torch": {
            "ceil_63": {
                "variable": {
                    "value": "niters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(end_time - start_time) / step_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "niters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ceil((end_time - start_time) / step_size + 1).item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "USHCN-daily/torchdiffeq/torchdiffeq/_impl/tsit5.py": {
        "torch": {
            "sqrt_56": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((torch.sum(sq_error_ratio_) for sq_error_ratio_ in sq_error_ratio)) / sum((sq_error_ratio_.numel() for sq_error_ratio_ in sq_error_ratio))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_58": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "y0_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "mul_122": {
                "input": {
                    "value": "tensor_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "sq_error_ratio_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_119": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "y1_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}