{
    "src/analysis.py": {
        "sklearn": {
            "log_loss_37": {
                "variable": {
                    "value": "current_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[tr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "clf.predict_proba(X_tr).T[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_51": {
                "y_true": {
                    "value": "y_te",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[te_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(X_te)",
                            "Call"
                        ],
                        [
                            "probas.T[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_52": {
                "y_true": {
                    "value": "y_te",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[te_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(X_te)",
                            "Call"
                        ],
                        [
                            "probas.T[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/focal_loss.py": {
        "tensorflow": {
            "where_13": {
                "variable": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_14": {
                "variable": {
                    "value": "pt_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_13": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_13": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_14": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_14": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_15": {
                "a": {
                    "value": "alpha * K.pow(1.0 - pt_1, gamma) * K.log(pt_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "x": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(y_true, 1), y_pred, tf.ones_like(y_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_15": {
                "x": {
                    "value": "1.0 - pt_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/keras_model.py": {
        "tensorflow": {
            "Sequential_5": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_7": {
                "units": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "input_dim": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_9": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_10": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "final_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_20": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_13": {
                "units": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_15": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}