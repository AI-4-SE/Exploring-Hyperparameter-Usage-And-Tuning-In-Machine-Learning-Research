{
    "weight_share/data.py": {
        "sklearn": {
            "shuffle_212": {
                "variable": {
                    "value": "(x_aug, y_aug)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_aug",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "weight_share_demo.py": {
        "sklearn": {
            "train_test_split_47": {
                "variable": {
                    "value": "(XTrain_2019, XVal_2019, YTrain_2019, YVal_2019)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "checkmate/checkmate.py": {
        "tensorflow": {
            "Saver_38": {
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "weight_share/build_graphs.py": {
        "tensorflow": {
            "get_collection_53": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_66": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_121": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{v.name.split(':')[0]: v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "get_collection_210": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_215": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_384": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_399": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore(tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, name))",
                            "Call"
                        ],
                        [
                            "ema.variables_to_restore(tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, name))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_400": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_424": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_438": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore(tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, name))",
                            "Call"
                        ],
                        [
                            "ema.variables_to_restore(tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, name))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_439": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_620": {
                "variable": {
                    "value": "x_pl_small",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dims_small, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_small",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_621": {
                "variable": {
                    "value": "x_pl_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dims_2019, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_2019",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_638": {
                "variable": {
                    "value": "x_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dims, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_45": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_113": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_202": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "ema + /ema_variables",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_47": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "opt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "ema + /ema_variables",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_115": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_134": {
                "name": {
                    "value": "opt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "ema + /ema_variables",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_204": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ],
                        [
                            "ema.apply(original_trainable_vars.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_217": {
                "name": {
                    "value": "opt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_385": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_466": {
                "name_or_scope": {
                    "value": "Teacher_graph",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_504": {
                "name_or_scope": {
                    "value": "Teacher_graph",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_540": {
                "name_or_scope": {
                    "value": "Teacher_graph",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var[:, 0], var[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_69": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var[:, 0], var[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_135": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_174": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_177": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_249": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var[:, 0], var[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var_MT[:, 0], var_MT[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_303": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var[:, 0], var[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_304": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(var_MT[:, 0], var_MT[:, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_453": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CNN_weight_sharing/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_491": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CNN_Chim_2019/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_527": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_27": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_42": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CNN_weight_sharing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_59": {
                "x": {
                    "value": "tf.multiply(var[:, 0], var[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_110": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CNN_Chim_2019",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_127": {
                "x": {
                    "value": "tf.multiply(var[:, 0], var[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_165": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_199": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "f'CNN_{net}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_249": {
                "x": {
                    "value": "tf.multiply(var[:, 0], var[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_250": {
                "x": {
                    "value": "tf.multiply(var_MT[:, 0], var_MT[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_303": {
                "x": {
                    "value": "tf.multiply(var[:, 0], var[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_304": {
                "x": {
                    "value": "tf.multiply(var_MT[:, 0], var_MT[:, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_59": {
                "x": {
                    "value": "var[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "var[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_249": {
                "x": {
                    "value": "var[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_250": {
                "x": {
                    "value": "var_MT[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var_MT[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_303": {
                "x": {
                    "value": "var[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_304": {
                "x": {
                    "value": "var_MT[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "var_MT[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "weight_share/cnn.py": {
        "tensorflow": {
            "flatten_58": {
                "variable": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d(x, name='c1', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p1')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn1' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c2', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p2')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do1', keep_rate=keep_prob_pl[0])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn2' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c3', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p3')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn3' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c4', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p4')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do2', keep_rate=keep_prob_pl[1])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn4' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c5', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p5')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn5' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c6', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p6')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do3', keep_rate=keep_prob_pl[2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(Input)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn6' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(f1, name='bn7' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(x, name='c1', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p1')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn1' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c2', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p2')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do1', keep_rate=keep_prob_pl[0])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn2' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c3', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p3')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn3' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c4', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p4')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do2', keep_rate=keep_prob_pl[1])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn4' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c5', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p5')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn5' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c6', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p6')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do3', keep_rate=keep_prob_pl[2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(Input)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn6' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_120": {
                "variable": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d(x, name='c1', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p1')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn1' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c2', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p2')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do1', keep_rate=keep_prob_pl[0])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn2' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c3', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p3')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn3' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c4', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p4')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do2', keep_rate=keep_prob_pl[1])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn4' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c5', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p5')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn5' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c6', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p6')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do3', keep_rate=keep_prob_pl[2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(Input)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn6' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(f1, name='bn7' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(x, name='c1', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p1')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn1' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c2', kernel_length=11, n_outputs=8, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p2')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do1', keep_rate=keep_prob_pl[0])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn2' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c3', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p3')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn3' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c4', kernel_length=8, n_outputs=16, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p4')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do2', keep_rate=keep_prob_pl[1])",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn4' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c5', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p5')",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn5' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "conv1d(Input, name='c6', kernel_length=6, n_outputs=24, strides=1, activation='relu', padding=padding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "maxpool1d(Input, name='p6')",
                            "Call"
                        ],
                        [
                            "spatialdropout1d(Input, name='do3', keep_rate=keep_prob_pl[2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(Input)",
                            "Call"
                        ],
                        [
                            "batch_normalization1d(Input, name='bn6' + net, is_training=is_training_pl, axis=-1, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "weight_share/layers.py": {
        "tensorflow": {
            "get_variable_16": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_length, n_filters_in, n_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling1d_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "kernel_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "[tf.shape(x)[0], 1, x.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "center": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b_' + name, shape=[n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='b_' + name, shape=[output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b_' + name, shape=[n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='b_' + name, shape=[output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b_' + name, shape=[n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='b_' + name, shape=[output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b_' + name, shape=[n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='b_' + name, shape=[output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(Input, W, stride=strides, padding=padding, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.add(out, b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(x, W), b, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out, alpha=alpha, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(out, name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(x, pool_size=kernel_length, strides=strides, padding='SAME', name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_rate, noise_shape=[tf.shape(x)[0], 1, x.shape[2]], name='out_' + name)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, axis=axis, training=is_training, name=name, center=center, scale=scale)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'out_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_' + name, shape=[kernel_length, n_filters_in, n_outputs], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w_' + name, shape=[input_size, output_size], initializer=tf.contrib.layers.xavier_initializer(uniform=uniform))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_size])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "weight_share/misc.py": {
        "tensorflow": {
            "sqrt_30": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.subtract(y, yhat)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "weights * RMSE(y, yhat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(y, yhat))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "tf.subtract(y, yhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_30": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "weight_share/training.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "x_pl_small",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain_small.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_small",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "x_pl_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain_2019.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_2019",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "y_pl_small",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_small",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "y_pl_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_2019",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_45": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "x_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "y_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_264": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_267": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_448": {
                "variable": {
                    "value": "x_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_449": {
                "variable": {
                    "value": "y_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_461": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_463": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_464": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_71": {
                "variable": {
                    "value": "keep_prob_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1.0] * len(keep_prob)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_73": {
                "variable": {
                    "value": "learning_rate_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_122": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "x_pl_small",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain_small.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_small",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "x_pl_2019",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain_2019.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl_2019",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_287": {
                "variable": {
                    "value": "keep_prob_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1.0] * len(keep_prob)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_289": {
                "variable": {
                    "value": "learning_rate_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_330": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reset_default_graph_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_484": {
                "variable": {
                    "value": "keep_prob_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1.0] * len(keep_prob)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_485": {
                "variable": {
                    "value": "learning_rate_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_527": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ],
                        [
                            "[n for n in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name) if 'ExponentialMovingAverage' in n.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_51": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_70": {
                "device_name": {
                    "value": "device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_270": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_286": {
                "device_name": {
                    "value": "device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_421": {
                "variable": {
                    "value": "x_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_467": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_483": {
                "device_name": {
                    "value": "device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_612": {
                "variable": {
                    "value": "x_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, XTrain.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_117": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_325": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_522": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_616": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'CNN_{name_small}_NIR'",
                            "JoinedStr"
                        ],
                        [
                            "'CNN_weight_sharing'",
                            "Method Argument"
                        ],
                        [
                            "'CNN_Chim_2019'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}