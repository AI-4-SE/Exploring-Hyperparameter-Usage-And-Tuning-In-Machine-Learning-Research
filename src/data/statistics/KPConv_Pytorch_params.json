{
    "plot_convergence.py": {
        "sklearn": {},
        "torch": {
            "Conv1d_52": {
                "variable": {
                    "value": "torch_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * n + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "torch_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "signal.reshape([1, 1, -1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/mayavi_visu.py": {
        "sklearn": {},
        "torch": {}
    },
    "utils/tester.py": {
        "sklearn": {},
        "torch": {
            "load_73": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_91": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_188": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_478": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_303": {
                "variable": {
                    "value": "new_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loader.dataset.min_potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_692": {
                "variable": {
                    "value": "new_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loader.dataset.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_262": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_549": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_680": {
                "variable": {
                    "value": "pot_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loader.dataset.potentials > min_pot + 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "synchronize_135": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_679": {
                "input": {
                    "value": "torch.min(test_loader.dataset.potentials)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_679": {
                "input": {
                    "value": "test_loader.dataset.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/trainer.py": {
        "sklearn": {},
        "torch": {
            "SGD_83": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': other_params}, {'params': deform_params, 'lr': deform_lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_312": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_428": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_671": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_91": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_93": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_107": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "synchronize_347": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_488": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_720": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_203": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'saving_path': config.saving_path}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(checkpoint_directory, 'current_chkp.tar')",
                            "Call"
                        ],
                        [
                            "join(checkpoint_directory, 'chkp_{:04d}.tar'.format(self.epoch + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__201": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.grad_clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'saving_path': config.saving_path}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(checkpoint_directory, 'current_chkp.tar')",
                            "Call"
                        ],
                        [
                            "join(checkpoint_directory, 'chkp_{:04d}.tar'.format(self.epoch + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/visualizer.py": {
        "sklearn": {
            "KDTree_185": {
                "X": {
                    "value": "points[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_81": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkp_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_72": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_74": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_156": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ModelNet40.py": {
        "torch": {
            "from_numpy_702": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_704": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_706": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_708": {
                "variable": {
                    "value": "self.rots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_710": {
                "variable": {
                    "value": "self.model_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_694": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_696": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_698": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_700": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_792": {
                "input": {
                    "value": "self.lengths[layer_i][:b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/S3DIS.py": {
        "torch": {
            "tensor_178": {
                "variable": {
                    "value": "self.batch_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1314": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1316": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1318": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1320": {
                "variable": {
                    "value": "self.rots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1322": {
                "variable": {
                    "value": "self.cloud_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1324": {
                "variable": {
                    "value": "self.center_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1326": {
                "variable": {
                    "value": "self.input_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "self.argmin_potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.argmin_potentials, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "self.min_potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.min_potentials, dtype=np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "self.worker_waiting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for _ in range(config.input_threads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "self.epoch_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((2, N), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "self.epoch_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((1,), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "self.batch_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_949": {
                "ndarray": {
                    "value": "all_epoch_inds[:, :num_centers]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1304": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1306": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1308": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1310": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1312": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmin_324": {
                "variable": {
                    "value": "min_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials[cloud_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "np.random.rand(tree.data.shape[0]) * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_188": {
                "input": {
                    "value": "self.potentials[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmin_298": {
                "input": {
                    "value": "self.min_potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_1414": {
                "input": {
                    "value": "self.lengths[layer_i][:b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/SemanticKitti.py": {
        "torch": {
            "tensor_156": {
                "variable": {
                    "value": "self.batch_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.rand(self.all_inds.shape[0]) * 0.1 + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "self.epoch_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((1,), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "self.epoch_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((N,), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "self.epoch_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((N,), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "self.worker_waiting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for _ in range(config.input_threads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1252": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1254": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1256": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1258": {
                "variable": {
                    "value": "self.rots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1260": {
                "variable": {
                    "value": "self.frame_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1262": {
                "variable": {
                    "value": "self.frame_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_788": {
                "variable": {
                    "value": "gen_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gen_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.randperm(self.dataset.potentials.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.cat(gen_indices, dim=0)",
                            "Call"
                        ],
                        [
                            "gen_indices[rand_order]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_789": {
                "variable": {
                    "value": "gen_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gen_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gen_classes, dim=0)",
                            "Call"
                        ],
                        [
                            "gen_classes[rand_order]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_821": {
                "variable": {
                    "value": "self.dataset.potentials[gen_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dataset.potentials[gen_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_816": {
                "variable": {
                    "value": "(_, gen_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dataset.potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "num_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset.epoch_inds.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.dataset.epoch_inds.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_818": {
                "variable": {
                    "value": "gen_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dataset.potentials.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_822": {
                "ndarray": {
                    "value": "np.random.rand(gen_indices.shape[0]) * 0.1 + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_1242": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1244": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1246": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1248": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1250": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_783": {
                "variable": {
                    "value": "update_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((0,), dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "self.dataset.class_frames[i][class_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((class_indices, new_class_inds), dim=0)",
                            "Call"
                        ],
                        [
                            "class_indices[:class_n]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_784": {
                "variable": {
                    "value": "self.dataset.potentials[update_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dataset.potentials[update_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_792": {
                "n": {
                    "value": "gen_indices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_769": {
                "variable": {
                    "value": "(_, class_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_potentials",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset.potentials[self.dataset.class_frames[i]]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "class_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_centers // used_classes + 1",
                            "BinOp"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_771": {
                "variable": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_785": {
                "ndarray": {
                    "value": "np.random.rand(update_inds.shape[0]) * 0.1 + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1106": {
                "input": {
                    "value": "are_cropped.type(torch.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_645": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_648": {
                "ndarray": {
                    "value": "integer_inds.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_773": {
                "variable": {
                    "value": "new_class_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "class_potentials.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(class_indices, new_class_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1354": {
                "input": {
                    "value": "self.lengths[layer_i][:b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/common.py": {
        "torch": {}
    },
    "datasets/shapenet_part.py": {
        "torch": {
            "tensor_192": {
                "variable": {
                    "value": "self.batch_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1267": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1269": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1271": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1273": {
                "variable": {
                    "value": "self.rots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1275": {
                "variable": {
                    "value": "self.cloud_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1277": {
                "variable": {
                    "value": "self.center_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1279": {
                "variable": {
                    "value": "self.input_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_list[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "self.argmin_potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.argmin_potentials, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "self.min_potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.min_potentials, dtype=np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "self.worker_waiting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for _ in range(config.input_threads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "self.epoch_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((2, N), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "self.epoch_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((1,), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "self.batch_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_885": {
                "ndarray": {
                    "value": "all_epoch_inds[:, :num_centers]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1252": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1255": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1258": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1261": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_1264": {
                "ndarray": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmin_349": {
                "variable": {
                    "value": "min_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials[cloud_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "ndarray": {
                    "value": "np.random.rand(tree.data.shape[0]) * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_203": {
                "input": {
                    "value": "self.potentials[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmin_318": {
                "input": {
                    "value": "self.min_potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_1369": {
                "input": {
                    "value": "self.lengths[layer_i][:b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/blocks.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_109": {
                "variable": {
                    "value": "(max_features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather(x, inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_76": {
                "input": {
                    "value": "-sq_r / (2 * sig ** 2 + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "tensors": {
                    "value": "averaged_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((self.K, in_channels, out_channels), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "s_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_pts, torch.zeros_like(s_pts[:1, :]) + 1000000.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_297": {
                "variable": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros_like(x[:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_362": {
                "variable": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "neighb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather(x, new_neighb_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_370": {
                "variable": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(all_weights, neighb_x)",
                            "Call"
                        ],
                        [
                            "weighted_features * modulations.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weighted_features.permute((1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_490": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_546": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_618": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_201": {
                "variable": {
                    "value": "self.offset_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.offset_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "data": {
                    "value": "torch.tensor(K_points_numpy, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_303": {
                "variable": {
                    "value": "(self.min_d2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_306": {
                "variable": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances < self.KP_extent ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_309": {
                "variable": {
                    "value": "new_max_neighb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_range, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_312": {
                "variable": {
                    "value": "(neighb_row_bool, neighb_row_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.any(sq_distances < self.KP_extent ** 2, dim=2).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "new_max_neighb.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_331": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_332": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_349": {
                "variable": {
                    "value": "neighbors_1nn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_373": {
                "input": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weighted_features, self.weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_443": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_446": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_489": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_592": {
                "variable": {
                    "value": "self.unary1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_615": {
                "variable": {
                    "value": "self.unary_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_88": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_103": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "x[i0:i0 + length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "(self.K, in_channels, out_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "data": {
                    "value": "K_points_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_kernels(self.radius, self.K, dimension=self.p_dim, fixed=self.fixed_kernel_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.sqrt(sq_distances) / self.KP_extent",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_337": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_350": {
                "input": {
                    "value": "nn.functional.one_hot(neighbors_1nn, self.K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "self.offset_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_309": {
                "input": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.any(sq_distances < self.KP_extent ** 2, dim=2).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_343": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(1 - torch.sqrt(sq_distances) / self.KP_extent, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ],
                        [
                            "all_weights * torch.transpose(nn.functional.one_hot(neighbors_1nn, self.K), 1, 2)",
                            "BinOp"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "torch.transpose(all_weights, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_350": {
                "tensor": {
                    "value": "neighbors_1nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(sq_distances, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_356": {
                "input": {
                    "value": "x[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "*size": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "input": {
                    "value": "self.offset_features[:, self.p_dim * self.K:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "input": {
                    "value": "s_pts[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_336": {
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(differences ** 2, dim=3)",
                            "Call"
                        ],
                        [
                            "sq_distances.gather(1, neighb_row_inds, sparse_grad=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_models.py": {
        "torch": {
            "DataLoader_181": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(config, train=False)",
                            "Call"
                        ],
                        [
                            "S3DISDataset(config, set='validation', use_potentials=True)",
                            "Call"
                        ],
                        [
                            "SemanticKittiDataset(config, set=set, balance_classes=False)",
                            "Call"
                        ],
                        [
                            "'_'.join(chosen_log.split('_')[1:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Sampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "S3DISSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "SemanticKittiSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Collate",
                            "Name"
                        ],
                        [
                            "S3DISCollate",
                            "Name"
                        ],
                        [
                            "SemanticKittiCollate",
                            "Name"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_ModelNet40.py": {
        "torch": {
            "DataLoader_247": {
                "variable": {
                    "value": "training_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(config, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Sampler(training_dataset, balance_labels=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ModelNet40Collate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(config, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Sampler(test_dataset, balance_labels=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ModelNet40Collate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_S3DIS.py": {
        "torch": {
            "DataLoader_255": {
                "variable": {
                    "value": "training_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISDataset(config, set='training', use_potentials=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISSampler(training_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "S3DISCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_261": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISDataset(config, set='validation', use_potentials=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "S3DISCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_SemanticKitti.py": {
        "torch": {
            "DataLoader_272": {
                "variable": {
                    "value": "training_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticKittiDataset(config, set='training', balance_classes=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticKittiSampler(training_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "SemanticKittiCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticKittiDataset(config, set='validation', balance_classes=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticKittiSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "SemanticKittiCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_shapnet_part.py": {
        "torch": {
            "DataLoader_263": {
                "variable": {
                    "value": "training_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNetPartDataset(config, set='training', use_potentials=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNetPartSampler(training_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ShapeNetPartCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNetPartDataset(config, set='validation', use_potentials=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNetPartSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ShapeNetPartCollate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "visualize_deformations.py": {
        "torch": {
            "DataLoader_169": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(config, train=False)",
                            "Call"
                        ],
                        [
                            "S3DISDataset(config, set='validation', use_potentials=True)",
                            "Call"
                        ],
                        [
                            "'_'.join(chosen_log.split('_')[1:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Sampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "S3DISSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Collate",
                            "Name"
                        ],
                        [
                            "S3DISCollate",
                            "Name"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.input_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}