{
    "realworld_benchmark/train/metrics.py": {
        "sklearn": {
            "confusion_matrix_40": {
                "variable": {
                    "value": "CM",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(torch.nn.Softmax(dim=0)(scores).cpu().detach().numpy(), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_70": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1).cpu()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_64": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.argmax(dim=1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "l1_loss_15": {
                "variable": {
                    "value": "MAE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1).cpu()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_39": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgl/aggregators.py": {
        "torch": {
            "mean_25": {
                "variable": {
                    "value": "h_mean_squares",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "h_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mean_squares - h_mean * h_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_36": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_51": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_58": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_70": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_9": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "input": {
                    "value": "aggregate_var(h, eig_s, eig_d, h_in) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "h_mod",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(h, (torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1)))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "h_mod",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(h, (torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1)))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "torch.sum(h_mod, dim=1) - torch.sum(eig_w, dim=1) * h_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "torch.sum(h_mod, dim=1) - torch.sum(eig_w, dim=1) * h_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_13": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_17": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_43": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_63": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "input": {
                    "value": "eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "torch.abs(torch.relu(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "torch.abs(-torch.relu(eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "torch.relu(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "-torch.relu(eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_67": {
                "input": {
                    "value": "eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgl/dgn_layer.py": {
        "torch": {
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_105": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_160": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_176": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_234": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(self, h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_259": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h'], edges.data['ef']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h'], edges.data['ef']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "h_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h[:, n_tower * self.input_tower:(n_tower + 1) * self.input_tower], e, snorm_n) for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "h_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h, e, snorm_n) for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.b_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/pytorch/aggregators.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, torch.eye(N).reshape(1, N, N, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "X_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_30": {
                "variable": {
                    "value": "X_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(X_exp, dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_41": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(min_value, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(max_value, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregate_var(X, adj, self_loop, device) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "X_sum_squares",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(torch.mul(X, X), adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_74": {
                "variable": {
                    "value": "X_mean_squares",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_sum_squares",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(torch.mul(X, X), adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_mean_squares - torch.mul(X_mean, X_mean)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "X_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_98": {
                "variable": {
                    "value": "rD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(torch.sum(adj, -1, keepdim=True), -0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.eye(N, device=device).unsqueeze(0).repeat(B, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "input": {
                    "value": "rD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(torch.pow(torch.sum(adj, -1, keepdim=True), -0.5), torch.eye(N, device=device).unsqueeze(0).repeat(B, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "X_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_113": {
                "variable": {
                    "value": "X_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_115": {
                "variable": {
                    "value": "X_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(X)",
                            "Call"
                        ],
                        [
                            "torch.mul(X_exp, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_116": {
                "variable": {
                    "value": "X_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(X)",
                            "Call"
                        ],
                        [
                            "torch.mul(X_exp, adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(torch.div(X_exp, X_sum), X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "avg_d": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_132": {
                "variable": {
                    "value": "X_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_141": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "X_agg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_17": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.eye(N).reshape(1, N, N, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_29": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "min_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-math.inf",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_42": {
                "input": {
                    "value": "M",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0.0, X, torch.tensor(min_value, device=device))",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0.0, X, torch.tensor(max_value, device=device))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_53": {
                "data": {
                    "value": "max_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.inf",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_54": {
                "input": {
                    "value": "M",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0.0, X, torch.tensor(min_value, device=device))",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0.0, X, torch.tensor(max_value, device=device))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_73": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_87": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_98": {
                "input": {
                    "value": "torch.sum(adj, -1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_98": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_102": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_117": {
                "input": {
                    "value": "torch.div(X_exp, X_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_amplification(X, adj, avg_d)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop, device)",
                            "Call"
                        ],
                        [
                            "scale_attenuation(X, adj, avg_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_132": {
                "input": {
                    "value": "torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_133": {
                "input": {
                    "value": "X_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2), D)",
                            "Call"
                        ],
                        [
                            "torch.div(torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2), D) / (torch.pow(aggregate_std(X, adj, self_loop=self_loop, device=device), n) + EPS)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_133": {
                "input": {
                    "value": "torch.abs(X_n) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_143": {
                "input": {
                    "value": "torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(adj, -1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_17": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_26": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_38": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_38": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_50": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_70": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_76": {
                "input": {
                    "value": "X_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.div(X_sum, D)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop=self_loop, device=device)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop=self_loop, device=device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.div(X_sum, D)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop=self_loop, device=device)",
                            "Call"
                        ],
                        [
                            "aggregate_mean(X, adj, self_loop=self_loop, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_85": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_96": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.matmul(rD, adj), rD)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_111": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_111": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_117": {
                "input": {
                    "value": "X_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(X)",
                            "Call"
                        ],
                        [
                            "torch.mul(X_exp, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(X, adj.unsqueeze(-1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(X_exp, dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_129": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_129": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_132": {
                "input": {
                    "value": "torch.pow(X - X_mean.unsqueeze(2), n)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_140": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_140": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_144": {
                "input": {
                    "value": "aggregate_std(X, adj, self_loop=self_loop, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "acos_191": {
                "variable": {
                    "value": "this_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_eigvec / torch.max(torch.abs(this_eigvec))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_132": {
                "input": {
                    "value": "X - X_mean.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_133": {
                "input": {
                    "value": "X_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2), D)",
                            "Call"
                        ],
                        [
                            "torch.div(torch.sum(torch.mul(torch.pow(X - X_mean.unsqueeze(2), n), adj.unsqueeze(-1)), dim=2), D) / (torch.pow(aggregate_std(X, adj, self_loop=self_loop, device=device), n) + EPS)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_143": {
                "input": {
                    "value": "torch.pow(X - X_mean.unsqueeze(2), n)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "X - X_mean.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_198": {
                "input": {
                    "value": "adj.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_191": {
                "input": {
                    "value": "torch.abs(this_eigvec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_191": {
                "input": {
                    "value": "this_eigvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigvec[..., ii]",
                            "Subscript"
                        ],
                        [
                            "torch.acos(this_eigvec / torch.max(torch.abs(this_eigvec)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/pytorch/dgn_layer.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "agg_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[agg(torch.ones(1, 10, 10, 1, device=device), torch.rand(1, 10, 10, device=device), eigvec=torch.rand(1, 10, 23, device=device), device=self.device) for agg in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "h_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_i, h_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h_mod, adj, eigvec=eigvec, self_loop=self.self_loop, device=self.device, avg_d=self.avg_d) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(m, adj, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "m_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(input[:, :, n_tower * self.input_tower:(n_tower + 1) * self.input_tower], adj, eigvec) for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(input, adj, eigvec) for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_27": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_28": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/pytorch/eigen_agg.py": {
        "torch": {
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_31": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "adj.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "adj.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_33": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "adj.view(-1, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "adj.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "adj.view(-1, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "adj.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "adj.view(-1, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(N, device=device).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "symeig_87": {
                "variable": {
                    "value": "(eigval_all, eigvec_all)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "L.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_90": {
                "variable": {
                    "value": "sort_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigval_all.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_92": {
                "variable": {
                    "value": "eigval_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigval_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigval_all.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argsort(eigval_all.abs(), dim=-1, descending=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_93": {
                "variable": {
                    "value": "eigvec_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigvec_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigvec_all.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_idx_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sort_idx.unsqueeze(-2).expand(eigvec_all.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "k_lowest_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "k_lowest_eigvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(k_lowest_eigvec, dim=0).view(*shape[:-2] + [-1, k])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "adj.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_289": {
                "variable": {
                    "value": "eigval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "eigval",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(eigval, dim=0).view(*shape[:-2] + [k])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "eigvec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(adj.shape[0], adj.shape[-1], k).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(eigvec, dim=0).view(*shape[:-2] + [-1, k])",
                            "Call"
                        ],
                        [
                            "get_k_lowest_eig(adj, max(eig_idx) + 1, normalize_L=normalize_L)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_496": {
                "variable": {
                    "value": "X_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(X, adj.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_9": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "Dinv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-adj",
                            "UnaryOp"
                        ],
                        [
                            "torch.matmul(Dinv, L)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=False)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=False)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=normalize_L)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Dinv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(L)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "L",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-adj",
                            "UnaryOp"
                        ],
                        [
                            "torch.matmul(Dinv, L)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=False)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=False)",
                            "Call"
                        ],
                        [
                            "get_laplacian_matrix(adj, normalize_L=normalize_L)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "num_connected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_eigval.abs() < EPS",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "svd_198": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "L[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_202": {
                "variable": {
                    "value": "zero_eig_vect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v[null_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "ii_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "adj.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_377": {
                "variable": {
                    "value": "grad_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj * (features.unsqueeze(-2) - features.unsqueeze(-1) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj / (torch.sum(grad_norm, dim=-1, keepdims=True) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj - eye * torch.sum(grad_adj, dim=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "pos_adj / in_out_field + neg_adj / in_out_field",
                            "BinOp"
                        ],
                        [
                            "torch.abs(grad_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_598": {
                "tensors": {
                    "value": "X_agg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_210": {
                "variable": {
                    "value": "compo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_eig_vect[:, jj]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_210": {
                "variable": {
                    "value": "compo",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_354": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj * (features.unsqueeze(-2) - features.unsqueeze(-1) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj / (torch.sum(grad_norm, dim=-1, keepdims=True) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj - eye * torch.sum(grad_adj, dim=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "pos_adj / in_out_field + neg_adj / in_out_field",
                            "BinOp"
                        ],
                        [
                            "torch.abs(grad_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_496": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "adj.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "temp_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "this_eigvec.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "unique_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "sub_graph_factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_connected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(this_eigval.abs() < EPS)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(this_eigval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "this_k_lowest_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(this_eigval)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "compo_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_372": {
                "n": {
                    "value": "adj.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "acos_465": {
                "variable": {
                    "value": "this_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_eigvec / torch.max(torch.abs(this_eigvec))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_494": {
                "n": {
                    "value": "N",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "adj.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "adj.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_494": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "round_124": {
                "variable": {
                    "value": "eigvec0_round",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigvec0 / (factor * EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_125": {
                "variable": {
                    "value": "(_, unique_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "eigvec0_round",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.round(eigvec0 / (factor * EPS))",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "sub_graph_factors[sub_ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eigvec_sort[ii, sub_idx, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "compo_eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(compo_eigvec, torch.zeros(1, dim, k - dim, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_373": {
                "input": {
                    "value": "grad_adj",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "adj * (features.unsqueeze(-2) - features.unsqueeze(-1) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj / (torch.sum(grad_norm, dim=-1, keepdims=True) + EPS)",
                            "BinOp"
                        ],
                        [
                            "grad_adj - eye * torch.sum(grad_adj, dim=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "pos_adj / in_out_field + neg_adj / in_out_field",
                            "BinOp"
                        ],
                        [
                            "torch.abs(grad_adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_137": {
                "input": {
                    "value": "sub_graph_factors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(num_connected, len(this_eigval))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_356": {
                "input": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(grad_adj)",
                            "Call"
                        ],
                        [
                            "grad_norm * (grad_norm > EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_362": {
                "input": {
                    "value": "torch.sum(pos_adj ** 2, dim=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_363": {
                "input": {
                    "value": "torch.sum(neg_adj ** 2, dim=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_471": {
                "input": {
                    "value": "adj.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "unique_idx == sub_ii",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_136": {
                "input": {
                    "value": "eigvec_sort[ii, sub_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_143": {
                "condition": {
                    "value": "unique_idx == sub_ii",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_362": {
                "input": {
                    "value": "pos_adj ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_363": {
                "input": {
                    "value": "neg_adj ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_465": {
                "input": {
                    "value": "torch.abs(this_eigvec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sub_adj.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "k - dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "adj.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_465": {
                "input": {
                    "value": "this_eigvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigvec_sort[ii, :, :k]",
                            "Subscript"
                        ],
                        [
                            "temp_eigvec",
                            "Name"
                        ],
                        [
                            "eigvec[..., ii]",
                            "Subscript"
                        ],
                        [
                            "torch.acos(this_eigvec / torch.max(torch.abs(this_eigvec)))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_144": {
                "condition": {
                    "value": "max_idx == sub_ii",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "models/pytorch/scalers.py": {
        "torch": {
            "sum_13": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_15": {
                "variable": {
                    "value": "X_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.log(D + 1) / avg_d['log']).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(avg_d['log'] / torch.log(D + 1)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_23": {
                "variable": {
                    "value": "X_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.log(D + 1) / avg_d['log']).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(avg_d['log'] / torch.log(D + 1)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_14": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/data/HIV.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "g.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_n]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_119": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_e]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_122": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/data/PCBA.py": {
        "torch": {
            "zeros_42": {
                "variable": {
                    "value": "EigVec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(L.shape[0], pos_enc_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "g.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "this_Eigvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(this_EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label.unsqueeze(0) for label in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_n]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_273": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_e]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_276": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pd.read_csv(osp.join(raw_dir, 'graph-label.csv.gz'), compression='gzip', header=None).values",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([label.unsqueeze(0) for label in labels])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pd.read_csv(osp.join(raw_dir, 'graph-label.csv.gz'), compression='gzip', header=None).values",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([label.unsqueeze(0) for label in labels])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pd.read_csv(osp.join(raw_dir, 'graph-label.csv.gz'), compression='gzip', header=None).values",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([label.unsqueeze(0) for label in labels])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "data": {
                    "value": "valid_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pd.read_csv(osp.join(path, 'valid.csv.gz'), compression='gzip', header=None).values.T[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "test_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pd.read_csv(osp.join(path, 'test.csv.gz'), compression='gzip', header=None).values.T[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_171": {
                "obj": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/data/SBMs.py": {
        "torch": {
            "zeros_106": {
                "variable": {
                    "value": "new_g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "g.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(labels).long()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_n]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_173": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_e]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_176": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(labels).long()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_203": {
                "variable": {
                    "value": "zero_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_211": {
                "variable": {
                    "value": "adj_node_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_adj for j in range(self.num_node_type)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "adj_node_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adj.unsqueeze(0), adj_node_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_222": {
                "variable": {
                    "value": "deg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_223": {
                "variable": {
                    "value": "deg_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "deg > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / torch.sqrt(deg)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(deg.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_224": {
                "variable": {
                    "value": "deg_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deg_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(deg > 0, 1.0 / torch.sqrt(deg), torch.zeros(deg.size()))",
                            "Call"
                        ],
                        [
                            "torch.diag(deg_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_45": {
                "variable": {
                    "value": "g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "mm_225": {
                "input": {
                    "value": "adj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "deg_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(deg > 0, 1.0 / torch.sqrt(deg), torch.zeros(deg.size()))",
                            "Call"
                        ],
                        [
                            "torch.diag(deg_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "deg.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_223": {
                "input": {
                    "value": "deg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(adj, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/data/molecules.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "g.ndata[pos_enc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "EigVec[:, 1:pos_enc_dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "new_g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_222": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_n]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_225": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_e]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_228": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "g.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/data/superpixels.py": {
        "torch": {
            "zeros_276": {
                "variable": {
                    "value": "new_g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "g.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(EigVec[:, :pos_enc_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "null",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "graph.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[null, x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_n]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_322": {
                "variable": {
                    "value": "snorm_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tab_snorm_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(size, 1).fill_(1.0 / float(size)) for size in tab_sizes_e]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_325": {
                "variable": {
                    "value": "snorm_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_137": {
                "variable": {
                    "value": "g.ndata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_150": {
                "variable": {
                    "value": "g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/main_HIV.py": {
        "torch": {
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_99": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_device_name_43": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_312": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_314": {
                "input": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_315": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_316": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_316": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_315": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_315": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/main_PCBA.py": {
        "torch": {
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_device_name_43": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_309": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_311": {
                "input": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_312": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_313": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_313": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_312": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_312": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/main_SBMs_node_classification.py": {
        "torch": {
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_87": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_285": {
                "variable": {
                    "value": "net_params[in_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset.train[0][0].ndata['feat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unique_286": {
                "variable": {
                    "value": "net_params[n_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset.train[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_device_name_39": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_289": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_291": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_291": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/main_molecules.py": {
        "torch": {
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_89": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_device_name_41": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_300": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_302": {
                "input": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_303": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_304": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_304": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_303": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_303": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/main_superpixels.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_device_name_45": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_306": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_308": {
                "input": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_309": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_310": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_310": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_309": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_309": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train.graph_lists])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/nets/HIV_graph_classification/dgn_net.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DGNLayer(in_dim=hidden_dim, out_dim=hidden_dim, dropout=dropout, graph_norm=self.graph_norm, batch_norm=self.batch_norm, residual=self.residual, aggregators=self.aggregators, scalers=self.scalers, avg_d=self.avg_d, type_net=self.type_net, edge_features=self.edge_feat, edge_dim=edge_dim, pretrans_layers=pretrans_layers, posttrans_layers=posttrans_layers).model for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.embedding_pos_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pos_enc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/PCBA_graph_classification/dgn_net.py": {
        "torch": {
            "Dropout_34": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DGNLayer(in_dim=hidden_dim, out_dim=hidden_dim, dropout=dropout, graph_norm=self.graph_norm, batch_norm=self.batch_norm, residual=self.residual, aggregators=self.aggregators, scalers=self.scalers, avg_d=self.avg_d, type_net=self.type_net, edge_features=self.edge_feat, edge_dim=edge_dim, pretrans_layers=pretrans_layers, posttrans_layers=posttrans_layers, towers=self.towers).model for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.virtual_node_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VirtualNode(dim=hidden_dim, dropout=dropout, batch_norm=self.batch_norm, bias=True, vn_type=self.virtual_node, residual=self.residual) for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/SBMs_node_classification/dgn_net.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_dim_node",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DGNLayer(in_dim=hidden_dim, out_dim=hidden_dim, dropout=dropout, graph_norm=self.graph_norm, batch_norm=self.batch_norm, residual=self.residual, aggregators=self.aggregators, scalers=self.scalers, avg_d=self.avg_d, type_net=self.type_net, edge_features=self.edge_feat, edge_dim=edge_dim, pretrans_layers=pretrans_layers, posttrans_layers=posttrans_layers).model for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "bincount_70": {
                "variable": {
                    "value": "label_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "cluster_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(V - cluster_sizes).float() / V",
                            "BinOp"
                        ],
                        [
                            "weight * (cluster_sizes > 0).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.embedding_pos_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pos_enc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_73": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/aggregators.py": {
        "torch": {
            "mean_25": {
                "variable": {
                    "value": "h_mean_squares",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "h_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mean_squares - h_mean * h_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_36": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_51": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_58": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_70": {
                "variable": {
                    "value": "h_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_9": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "input": {
                    "value": "aggregate_var(h, eig_s, eig_d, h_in) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "h_mod",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(h, (torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1)))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "h_mod",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(h, (torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, torch.nn.Softmax(1)(alpha * torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]).unsqueeze(-1)))",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ],
                        [
                            "torch.mul(h, eig_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "torch.sum(h_mod, dim=1) - torch.sum(eig_w, dim=1) * h_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "torch.sum(h_mod, dim=1) - torch.sum(eig_w, dim=1) * h_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_13": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_17": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_43": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "eig_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "((eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]) / (torch.sum(torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]), keepdim=True, dim=1) + EPS)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "(eig_front + eig_back) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_63": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "input": {
                    "value": "eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "torch.abs(torch.relu(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "torch.abs(-torch.relu(eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.abs(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "torch.relu(eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "-torch.relu(eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "eig_s[:, :, eig_idx] - eig_d[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_67": {
                "input": {
                    "value": "eig_d[:, :, eig_idx] - eig_s[:, :, eig_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/dgn_layer.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "temp_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vn_h[ii:ii + 1].repeat(num_nodes, 1) for (ii, num_nodes) in enumerate(g.batch_num_nodes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h + temp_h",
                            "BinOp"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h + temp_h",
                            "BinOp"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_146": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h + temp_h",
                            "BinOp"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_201": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h + temp_h",
                            "BinOp"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_217": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_275": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h + temp_h",
                            "BinOp"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['e']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([aggregate(h, eig_s, eig_d, h_in) for aggregate in self.aggregators], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, g.ndata['h']], dim=1)",
                            "Call"
                        ],
                        [
                            "self.posttrans(h)",
                            "Call"
                        ],
                        [
                            "h * snorm_n",
                            "BinOp"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_300": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h'], edges.data['ef']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h'], edges.data['ef']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "h_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h[:, n_tower * self.input_tower:(n_tower + 1) * self.input_tower], e, snorm_n) for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "h_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h, e, snorm_n) for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_31": {
                "variable": {
                    "value": "lognum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(g.batch_num_nodes, dtype=h.dtype, device=h.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "g.batch_num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/layers.py": {
        "torch": {
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.b_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/mlp_readout_layer.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.FC_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list_FC_layers",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[nn.Linear(input_dim // 2 ** l, input_dim // 2 ** (l + 1), bias=True) for l in range(L)]",
                            "ListComp"
                        ],
                        [
                            "[nn.Linear(input_dim, input_dim, bias=True) for _ in range(L)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.FC_layers[l](y)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.FC_layers[self.L](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "input_dim // 2 ** l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2 ** (l + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "input_dim // 2 ** L",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/molecules_graph_regression/dgn_net.py": {
        "torch": {
            "Dropout_35": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_atom_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['num_atom_type']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DGNLayer(in_dim=hidden_dim, out_dim=hidden_dim, dropout=dropout, graph_norm=self.graph_norm, batch_norm=self.batch_norm, residual=self.residual, aggregators=self.aggregators, scalers=self.scalers, avg_d=self.avg_d, type_net=self.type_net, edge_features=self.edge_feat, edge_dim=edge_dim, pretrans_layers=pretrans_layers, posttrans_layers=posttrans_layers).model for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.embedding_pos_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pos_enc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_38": {
                "variable": {
                    "value": "self.embedding_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_bond_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['num_bond_type']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "edge_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['edge_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "L1Loss_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dgl.mean_nodes(g, 'dir'), dgl.mean_nodes(g, 'h')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.abs(dgl.mean_nodes(g, 'dir')), dgl.mean_nodes(g, 'h')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "torch.abs(g.ndata['eig'][:, 1:2].to(self.device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "g.ndata['eig'][:, 1:2].to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "g.ndata['eig'][:, 1:2].to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "torch.abs(g.ndata['eig'][:, 1:2].to(self.device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "g.ndata['eig'][:, 1:2].to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "dgl.mean_nodes(g, 'dir')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/nets/superpixels_graph_classification/dgn_net.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DGNLayer(in_dim=hidden_dim, out_dim=hidden_dim, dropout=dropout, graph_norm=self.graph_norm, batch_norm=self.batch_norm, residual=self.residual, aggregators=self.aggregators, scalers=self.scalers, avg_d=self.avg_d, type_net=self.type_net, edge_features=self.edge_feat, edge_dim=edge_dim, pretrans_layers=pretrans_layers, posttrans_layers=posttrans_layers).model for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.embedding_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim_edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['in_dim_edge']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "edge_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_params['edge_dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/train/train_COLLAB_edge_classification.py": {
        "torch": {
            "DataLoader_25": {
                "dataset": {
                    "value": "range(train_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_49": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "edge.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "pos_train_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_train_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos_train_preds + [model.edge_predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "pos_valid_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_valid_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos_valid_preds + [model.edge_predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "neg_valid_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_valid_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "neg_valid_preds + [model.edge_predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "pos_test_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos_test_preds + [model.edge_predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "neg_test_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "neg_test_preds + [model.edge_predictor(h[edge[0]], h[edge[1]]).squeeze().cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_34": {
                "variable": {
                    "value": "sine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "dataset": {
                    "value": "range(pos_train_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "dataset": {
                    "value": "range(pos_valid_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "dataset": {
                    "value": "range(pos_valid_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "dataset": {
                    "value": "range(pos_test_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "dataset": {
                    "value": "range(pos_test_edges.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_35": {
                "input": {
                    "value": "(1 - sine ** 2) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "graph_eig[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_36": {
                "input": {
                    "value": "sine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sin(angle * math.pi / 180).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_eig[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_37": {
                "input": {
                    "value": "(1 - sine ** 2) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "graph_eig[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_38": {
                "input": {
                    "value": "sine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sin(angle * math.pi / 180).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_eig[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "x[:, 0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/train/train_HIV_graph_classification.py": {
        "torch": {
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "list_scores",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "list_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "list_scores",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "list_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/train/train_PCBA_graph_classification.py": {
        "torch": {
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "list_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "list_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "realworld_benchmark/train/train_SBMs_node_classification.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/train/train_molecules_graph_regression.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "sign_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_graphs_eig.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_33": {
                "variable": {
                    "value": "batch_graphs.ndata[eig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sign_flip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(batch_graphs_eig.size()).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_graphs_eig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_graphs.ndata['eig'].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "realworld_benchmark/train/train_superpixels_graph_classification.py": {
        "torch": {
            "sin_33": {
                "variable": {
                    "value": "sine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "sign_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_graphs_eig.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_42": {
                "variable": {
                    "value": "batch_graphs.ndata[eig][:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sign_flip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(batch_graphs_eig.size()).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_graphs_eig",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_graphs.ndata['eig'].clone()",
                            "Call"
                        ],
                        [
                            "batch_graphs.ndata['eig'][:, 2].to(device)",
                            "Call"
                        ],
                        [
                            "batch_graphs.ndata['eig'].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_34": {
                "input": {
                    "value": "(1 - sine ** 2) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "batch_graphs_eig[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_35": {
                "input": {
                    "value": "sine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sin(angle * math.pi / 180)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_graphs_eig[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_36": {
                "input": {
                    "value": "(1 - sine ** 2) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "batch_graphs_eig[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_37": {
                "input": {
                    "value": "sine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sin(angle * math.pi / 180)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_graphs_eig[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_47": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.rand(batch_x[:, 0].shape) - 0.5) * 2 * distortion",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mean(torch.abs(batch_graphs_eig[:, 1]), dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_48": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.rand(batch_x[:, 0].shape) - 0.5) * 2 * distortion",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mean(torch.abs(batch_graphs_eig[:, 2]), dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "torch.abs(batch_graphs_eig[:, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "torch.abs(batch_graphs_eig[:, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "batch_x[:, 0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_46": {
                "*size": {
                    "value": "batch_x[:, 0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "batch_graphs_eig[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "batch_graphs_eig[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}