{
    "model.py": {
        "torch": {
            "Adam_47": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_224": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_293": {
                "variable": {
                    "value": "all_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "embedding_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_glove_matrix(self.reader.vocab, initial_arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_353": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_354": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_288": {
                "obj": {
                    "value": "all_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'lstd': self.m.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_349": {
                "device": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.lr",
                            "Attribute"
                        ],
                        [
                            "lr * cfg.lr_decay",
                            "BinOp"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "degree_input_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(py_batch['degree'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "z_input_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['bspan'], padding='post').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "m_input_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['response'], cfg.max_ts, padding='post', truncating='post').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "prev_z_input_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequences(prev_z_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tsd_net.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_100": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_113": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_132": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_135": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_145": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_150": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embed_size",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "gru_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_z, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_197": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy1(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_199": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_202": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_277": {
                "variable": {
                    "value": "gru_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_embed, u_context, z_context, degree_input.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_284": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score - z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, z_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_303": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_304": {
                "variable": {
                    "value": "self.dec_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "degree_size + embed_size + hidden_size * 2",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_317": {
                "variable": {
                    "value": "self.pr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_318": {
                "variable": {
                    "value": "self.dec_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_475": {
                "variable": {
                    "value": "last_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_476": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_476": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_494": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_733": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_739": {
                "variable": {
                    "value": "policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "policy_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(policy_loss).sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_739": {
                "variable": {
                    "value": "policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_147": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "cfg.max_ts + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * (j // 2) / d_pos_vec) for j in range(d_pos_vec)] if pos != 0 else np.zeros(d_pos_vec) for pos in range(n_position)])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_215": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(pv_z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_219": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score - pv_z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score, pv_z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_402": {
                "variable": {
                    "value": "last_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_407": {
                "variable": {
                    "value": "pz_proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_proba",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pz_proba, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_424": {
                "variable": {
                    "value": "pm_dec_proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pm_dec_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_461": {
                "variable": {
                    "value": "(z_proba, z_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_487": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_713": {
                "variable": {
                    "value": "dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "orthogonal_58": {
                "module": {
                    "value": "hh[i:i + gru.hidden_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_201": {
                "input": {
                    "value": "u_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_283": {
                "input": {
                    "value": "z_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_285": {
                "input": {
                    "value": "torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_289": {
                "tensors": {
                    "value": "[gen_score, z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_555": {
                "variable": {
                    "value": "proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_556": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size - dead_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_595": {
                "tensors": {
                    "value": "finished[0].decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_599": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_600": {
                "tensor": {
                    "value": "degree_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_674": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_675": {
                "tensor": {
                    "value": "degree_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[pv_z_enc_out, u_enc_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_218": {
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_220": {
                "input": {
                    "value": "torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "[gen_score, u_copy_score, pv_z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_333": {
                "input": {
                    "value": "pm_dec_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_380": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_419": {
                "variable": {
                    "value": "(_, m_tm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "[gru_out, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "[z_context, u_context, gru_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_379": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_433": {
                "ndarray": {
                    "value": "degree_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_203": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(get_sparse_input_aug(u_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_285": {
                "input": {
                    "value": "z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_z_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(self.get_sparse_selective_input(z_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_220": {
                "input": {
                    "value": "pv_z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_pv_z_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(get_sparse_input_aug(prev_z_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}