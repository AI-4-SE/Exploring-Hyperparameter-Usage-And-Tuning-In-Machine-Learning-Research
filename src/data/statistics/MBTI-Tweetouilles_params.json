{
    "PythonBasics/Content/Models/Word2VecPCA.py": {
        "sklearn": {
            "PCA_56": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_61": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Variable_23": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([number_of_tweets, doc_embedding_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': embeddings, 'doc_embeddings': doc_embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "word_indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(random.uniform(0, vocabulary_size)) for x in range(k_words)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_74": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ],
                        [
                            "sess.run(embeddings / norm)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(word_indexes, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ],
                        [
                            "sess.run(embeddings / norm)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "word_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "word_dictionnary[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_106": {
                "variable": {
                    "value": "word_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size, embedding_size]))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "word_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(word_dictionnary[word], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[vocabulary_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[number_of_tweets, doc_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size, embedding_size]))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size, embedding_size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_93": {
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size, embedding_size]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PythonBasics/Content/Managers/DataManager.py": {
        "tensorflow": {
            "Session_30": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.configman.vocabulary_size, self.configman.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_105": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.configman.doc_embedding_size, self.configman.num_class])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'weights': weights}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sess.run(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PythonBasics/Content/Models/TrainingWord2Vec.py": {
        "tensorflow": {
            "Session_35": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([len(texts), doc_embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, window_size + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_88": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[word_dictionary[x] for x in valid_words]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_96": {
                "variable": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, window_size + 1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_97": {
                "variable": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([len(texts), doc_embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(x_inputs, [0, window_size], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_100": {
                "variable": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embed, tf.squeeze(doc_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.nce_loss(nce_weights, nce_biases, y_target, final_embed, num_sampled, vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "sqrt_110": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_112": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(valid_examples, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_116": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': embeddings, 'doc_embeddings': doc_embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "global_variables_initializer_119": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_82": {
                "shape": {
                    "value": "[vocabulary_size, concatenated_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(concatenated_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[vocabulary_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_94": {
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_inputs[:, element]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nce_loss_103": {
                "weights": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size)))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([embed, tf.squeeze(doc_embed)], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(batch_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200000",
                            "int"
                        ]
                    ]
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "input": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(doc_embeddings, doc_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_110": {
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PythonBasics/Content/Models/TweetToType.py": {
        "tensorflow": {
            "Variable_33": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.confman.doc_embedding_size, self.confman.num_class])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.class_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.confman.num_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.tweet_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.confman.doc_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([len(text_tweets), doc_embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, window_size + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_75": {
                "variable": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, window_size + 1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([len(text_tweets), doc_embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(x_inputs, [0, window_size], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_79": {
                "variable": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embed, tf.squeeze(doc_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.nce_loss(nce_weights, nce_biases, y_target, final_embed, num_sampled, vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.confman.model_learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.tweet_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.tweet_vectors, self.weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.tweet_vectors, self.weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(tf.cast(self.class_target, tf.float32), prediction))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.logistic_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.tweet_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.tweet_vectors, self.weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.tweet_vectors, self.weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "arg_max_160": {
                "variable": {
                    "value": "mostProbableClass",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'weights': self.weights}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "truncated_normal_61": {
                "shape": {
                    "value": "[vocabulary_size, concatenated_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(concatenated_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_73": {
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "x_inputs[:, element]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nce_loss_82": {
                "weights": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size)))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([vocabulary_size]))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([embed, tf.squeeze(doc_embed)], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.confman.num_sampled",
                            "Attribute"
                        ],
                        [
                            "int(batch_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.confman.vocabulary_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_119": {
                "x": {
                    "value": "tf.subtract(tf.cast(self.class_target, tf.float32), prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(doc_embeddings, doc_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_119": {
                "x": {
                    "value": "tf.cast(self.class_target, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_130": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_119": {
                "x": {
                    "value": "self.class_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PythonBasics/Content/Models/TweetToVec.py": {
        "tensorflow": {
            "Session_17": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.confman.vocabulary_size, self.confman.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_38": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([number_of_tweets, doc_embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "doc_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "nce_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "nce_biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, window_size + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.dataman.word_dictionary[x] for x in valid_words]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_65": {
                "variable": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, window_size + 1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "variable": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([number_of_tweets, doc_embedding_size], -1.0, 1.0), name='doc_embeddings')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(x_inputs, [0, window_size], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_68": {
                "variable": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embed, tf.squeeze(doc_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.nce_loss(nce_weights, nce_biases, y_target, final_embed, num_sampled, vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.confman.DTVlearning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_77": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(valid_examples, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_81": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_82": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "/mnt/m/hihi",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_88": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_89": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_85": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.nce_loss(nce_weights, nce_biases, y_target, final_embed, num_sampled, vocabulary_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_86": {
                "name": {
                    "value": "nce_weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size)), name='nce_weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_87": {
                "name": {
                    "value": "nce_biases",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]), name='nce_biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_53": {
                "shape": {
                    "value": "[vocabulary_size, concatenated_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(concatenated_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[vocabulary_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([self.confman.vocabulary_size, self.confman.embedding_size], -1.0, 1.0), name='word_embeddings')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_inputs[:, element]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nce_loss_70": {
                "weights": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size)), name='nce_weights')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]), name='nce_biases')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([embed, tf.squeeze(doc_embed)], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(batch_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.confman.vocabulary_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "input": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(doc_embeddings, doc_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_75": {
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([self.confman.vocabulary_size, self.confman.embedding_size], -1.0, 1.0), name='word_embeddings')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PythonBasics/Content/Models/Word2VecOptimization.py": {
        "tensorflow": {
            "Session_39": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([number_of_tweets, doc_embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, window_size + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_89": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[word_dictionary[x] for x in valid_words]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_97": {
                "variable": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, window_size + 1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "variable": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([number_of_tweets, doc_embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "doc_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(x_inputs, [0, window_size], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_101": {
                "variable": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embed, tf.squeeze(doc_embed)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.nce_loss(nce_weights, nce_biases, y_target, final_embed, num_sampled, vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_113": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(valid_examples, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_117": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': embeddings, 'doc_embeddings': doc_embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "global_variables_initializer_120": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_83": {
                "shape": {
                    "value": "[vocabulary_size, concatenated_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(concatenated_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[vocabulary_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_95": {
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_inputs[:, element]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nce_loss_104": {
                "weights": {
                    "value": "nce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, concatenated_size], stddev=1.0 / np.sqrt(concatenated_size)))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "nce_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "final_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([embed, tf.squeeze(doc_embed)], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(batch_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200000",
                            "int"
                        ]
                    ]
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "input": {
                    "value": "doc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(doc_embeddings, doc_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_111": {
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PythonBasics/Content/Tests/TestWordToVec.py": {
        "tensorflow": {
            "Variable_23": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([confman.vocabulary_size, confman.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_24": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'embeddings': word_embeddings}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}