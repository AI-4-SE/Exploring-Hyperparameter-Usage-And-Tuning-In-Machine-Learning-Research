{
    "ZSSR_Cycle.py": {
        "torch": {
            "interpolate_213": {
                "variable": {
                    "value": "fake_H_224",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Gen_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_L2H(lr_son_input)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "variable": {
                    "value": "real_H_224",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hr_father",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.Tensor(hr_father).unsqueeze_(0).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(hr_father).permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "hr_father.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_219": {
                "variable": {
                    "value": "fake_L_224",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Gen_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_H2L(hr_father, z)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_220": {
                "variable": {
                    "value": "real_L_224",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_son_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(interpolated_lr_son).unsqueeze_(0).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(interpolated_lr_son).permute(2, 0, 1).unsqueeze_(0)",
                            "Call"
                        ],
                        [
                            "lr_son_input.requires_grad_()",
                            "Call"
                        ],
                        [
                            "lr_son_input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_360": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_361": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.model_L2H.parameters(), self.model_H2L.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_362": {
                "variable": {
                    "value": "optimizer_D_L",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Discriminator_L.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_363": {
                "variable": {
                    "value": "optimizer_D_H",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Discriminator_H.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "lr_son_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_192": {
                "variable": {
                    "value": "hr_father",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_194": {
                "variable": {
                    "value": "lr_son_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_194": {
                "variable": {
                    "value": "lr_son_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "hr_father",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_195": {
                "variable": {
                    "value": "hr_father",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 1, 64).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(z).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_287": {
                "variable": {
                    "value": "interpolated_lr_son",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_289": {
                "variable": {
                    "value": "interpolated_lr_son",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_289": {
                "variable": {
                    "value": "interpolated_lr_son",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "from_numpy_143": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 16, 16).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.layers_set_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.layers_set_final_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 128, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 96, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_35": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "inp_res_units[-1][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_units[ru]",
                            "Subscript"
                        ],
                        [
                            "res_units[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_units[ru]",
                            "Subscript"
                        ],
                        [
                            "res_units[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_28": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_100": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_units[ru]",
                            "Subscript"
                        ],
                        [
                            "res_units[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_104": {
                "in_channels": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_units[ru]",
                            "Subscript"
                        ],
                        [
                            "res_units[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_units[ru]",
                            "Subscript"
                        ],
                        [
                            "res_units[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*self.layers_set[ru]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*self.layers_set_up[ru]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "us_model.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 64, 64).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rec1, rec2, rec3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clamp_67": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([rec1, rec2, rec3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.final_conv(outputs)",
                            "Call"
                        ],
                        [
                            "self.tanh(outputs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "unsqueeze_49": {
                "variable": {
                    "value": "element",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.data",
                            "Attribute"
                        ],
                        [
                            "torch.unsqueeze(element, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "to_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "vgg.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(32, 3, 224, 224).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "yoon_model.py": {
        "torch": {
            "from_numpy_126": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, in_size, in_size).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 3, 64, 64).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 1, 64).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Z).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, in_size, in_size).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 3, 64, 64).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(nn.Linear(16 * self.blocks[-1], self.blocks[-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rbs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.noise_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.in_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "blocks[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(blocks[-1], 8, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.down_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ups",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, noises)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.residual_blocks(x)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * self.blocks[-1])",
                            "Call"
                        ],
                        [
                            "self.out_layer(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, noises), 1)",
                            "Call"
                        ],
                        [
                            "self.in_layer(out)",
                            "Call"
                        ],
                        [
                            "self.down_layers(out)",
                            "Call"
                        ],
                        [
                            "self.up_layers(out)",
                            "Call"
                        ],
                        [
                            "self.out_layer(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(out, scale_factor=4, mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.residual_blocks(x)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 16 * self.blocks[-1])",
                            "Call"
                        ],
                        [
                            "self.out_layer(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, noises), 1)",
                            "Call"
                        ],
                        [
                            "self.in_layer(out)",
                            "Call"
                        ],
                        [
                            "self.down_layers(out)",
                            "Call"
                        ],
                        [
                            "self.up_layers(out)",
                            "Call"
                        ],
                        [
                            "self.out_layer(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(out, scale_factor=4, mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "16 * self.blocks[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "self.blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_104": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_29": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yoon_snlayer.py": {
        "torch": {
            "Parameter_58": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_35": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_36": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_35": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}