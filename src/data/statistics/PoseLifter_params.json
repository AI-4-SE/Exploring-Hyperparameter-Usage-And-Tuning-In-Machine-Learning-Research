{
    "src/utils/logger.py": {
        "tensorflow": {
            "Summary_63": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_73": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_90": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_21": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_40": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/analysis_error_mixture.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/result.pth' % exp_dir",
                            "BinOp"
                        ],
                        [
                            "'%s/analysis/stat_2d_em1.pth' % exp_dir",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((num_joint, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((num_joint, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_joint)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_161": {
                "obj": {
                    "value": "stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mean': mean, 'std': std, 'weight': weight}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/result.pth' % exp_dir",
                            "BinOp"
                        ],
                        [
                            "'%s/analysis/stat_2d_em1.pth' % exp_dir",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/analysis_error_simple.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/result.pth' % exp_dir",
                            "BinOp"
                        ],
                        [
                            "'%s/analysis/stat_simple.pth' % exp_dir",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((3, num_joint, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((3, num_joint, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mean': mean, 'std': std}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/result.pth' % exp_dir",
                            "BinOp"
                        ],
                        [
                            "'%s/analysis/stat_simple.pth' % exp_dir",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets_2d/h36m17.py": {
        "torch": {}
    },
    "src/datasets_2d/h36m17_mpii.py": {
        "torch": {}
    },
    "src/datasets_2d/mpii.py": {
        "torch": {}
    },
    "src/datasets_2d/mpiinf.py": {
        "torch": {}
    },
    "src/datasets_2d/mpiinf_mpii.py": {
        "torch": {}
    },
    "src/datasets_lift/h36m17.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_85": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets_lift/h36m17_mpiinf.py": {
        "torch": {
            "load_73": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_77": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_84": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_90": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_98": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_104": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_simple.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_1d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em1.pth'",
                            "Constant"
                        ],
                        [
                            "'../pose2d-hmap-resnet/analysis/stat_fusion_protocol0_2d_em2.pth'",
                            "Constant"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets_lift/mpiinf.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_59": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_66": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_protocol%d/resnet152-int/fusion/rmsprop_lr1.0e-05_batch48/test_train.pth' % (conf.exp_dir, self.protocol)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ],
                        [
                            "'%s/%s' % (conf.exp_dir, self.noise_path)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/main_2d.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNetLift(opt.network, conf.num_joints, opt.num_layers, opt.num_features, opt.mode, filename_2d, filename_lift).cuda()",
                            "Call"
                        ],
                        [
                            "ResNet(opt.network, conf.num_joints).cuda()",
                            "Call"
                        ],
                        [
                            "ResNetInt(opt.network, conf.num_joints).cuda()",
                            "Call"
                        ],
                        [
                            "ResNetInt(opt.network, conf.num_joints, filename).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNetLift(opt.network, conf.num_joints, opt.num_layers, opt.num_features, opt.mode, filename_2d, filename_lift).cuda()",
                            "Call"
                        ],
                        [
                            "ResNet(opt.network, conf.num_joints).cuda()",
                            "Call"
                        ],
                        [
                            "ResNetInt(opt.network, conf.num_joints).cuda()",
                            "Call"
                        ],
                        [
                            "ResNetInt(opt.network, conf.num_joints, filename).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_123": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_275": {
                "variable": {
                    "value": "test_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'test_train', dense=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPII()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_119": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_121": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file_name)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'model_{}.pth'.format(idx_start))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'final_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_263": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17_MPII(opt.protocol, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'model_{}.pth'.format(idx_start))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'final_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_161": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(idx_start + 1, opt.num_epochs + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(idx_start + 1, opt.num_epochs + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file_name)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(opt.save_dir, 'model_%d.pth' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF_MPII('train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/main_lift.py": {
        "torch": {
            "MultiStepLR_89": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(model.parameters(), lr=opt.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[200, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'train', True, opt.scale, opt.noise, opt.std_train, opt.std_test, opt.noise_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'val', False, False, opt.noise, opt.std_train, opt.std_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(opt.mode, conf.num_joints, opt.num_layers, opt.num_features).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(opt.mode, conf.num_joints, opt.num_layers, opt.num_features).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSprop_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file_name)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'model_{}.pth'.format(idx_start))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'final_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17(opt.protocol, 'test', True, False, opt.noise, opt.std_train, opt.std_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('train', opt.noise, opt.std_train, opt.std_test, opt.noise_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('val', opt.noise, opt.std_train, opt.std_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'model_{}.pth'.format(idx_start))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'final_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_start + 1",
                            "BinOp"
                        ],
                        [
                            "range(idx_start + 1, opt.num_epochs + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_start + 1",
                            "BinOp"
                        ],
                        [
                            "range(idx_start + 1, opt.num_epochs + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MPIINF('val', opt.noise, opt.std_train, opt.std_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "H36M17_MPIINF('train', opt)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(conf.num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file_name)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(opt.save_dir, 'model_{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.submod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_67": {
                "variable": {
                    "value": "self.mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flip_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 4, 5, 6, 1, 2, 3, 7, 8, 9, 10, 14, 15, 16, 11, 12, 13]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "index_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flip_index_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 4, 5, 0, 1, 2, 6, 7, 8, 9, 13, 14, 15, 10, 11, 12]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_85": {
                "variable": {
                    "value": "mean2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp[0].clone()",
                            "Call"
                        ],
                        [
                            "pose2d / 255.0",
                            "BinOp"
                        ],
                        [
                            "pose2d * torch.reshape(bbox[:, 2:4], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d + torch.reshape(bbox[:, 0:2], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d - torch.reshape(cam_c, (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "(pose2d - mean2d) / std2d",
                            "BinOp"
                        ],
                        [
                            "pose2d_orig.clone()",
                            "Call"
                        ],
                        [
                            "pose2d / 255.0",
                            "BinOp"
                        ],
                        [
                            "pose2d * torch.reshape(bbox[:, 2:4], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d + torch.reshape(bbox[:, 0:2], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d - torch.reshape(cam_c, (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "(pose2d - mean2d) / std2d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_87": {
                "variable": {
                    "value": "std2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_141": {
                "variable": {
                    "value": "mean2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp[0].clone()",
                            "Call"
                        ],
                        [
                            "pose2d / 255.0",
                            "BinOp"
                        ],
                        [
                            "pose2d * torch.reshape(bbox[:, 2:4], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d + torch.reshape(bbox[:, 0:2], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d - torch.reshape(cam_c, (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "(pose2d - mean2d) / std2d",
                            "BinOp"
                        ],
                        [
                            "pose2d_orig.clone()",
                            "Call"
                        ],
                        [
                            "pose2d / 255.0",
                            "BinOp"
                        ],
                        [
                            "pose2d * torch.reshape(bbox[:, 2:4], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d + torch.reshape(bbox[:, 0:2], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pose2d - torch.reshape(cam_c, (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "(pose2d - mean2d) / std2d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_143": {
                "variable": {
                    "value": "std2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum((pose2d - mean2d) ** 2.0, 2, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_14": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.num_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "input": {
                    "value": "bbox[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "input": {
                    "value": "bbox[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "input": {
                    "value": "cam_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp[2].clone()",
                            "Call"
                        ],
                        [
                            "inp[2].clone()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "(pose2d - mean2d) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), mean2d.reshape(nb, -1), std2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "input": {
                    "value": "bbox[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "input": {
                    "value": "bbox[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "input": {
                    "value": "cam_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp[2].clone()",
                            "Call"
                        ],
                        [
                            "inp[2].clone()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "(pose2d - mean2d) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), mean2d.reshape(nb, -1), std2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), mean2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), mean2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), std2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose2d.reshape(nb, -1), std2d.reshape(nb, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet2d.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(pretrained.children())[:-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flip_79": {
                "variable": {
                    "value": "img_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_92": {
                "variable": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_flipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module[8](C5_flipped)",
                            "Call"
                        ],
                        [
                            "self.module[9](H_flipped)",
                            "Call"
                        ],
                        [
                            "self.module[10](H_flipped)",
                            "Call"
                        ],
                        [
                            "self.module[11](H_flipped)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flip_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 4, 5, 6, 1, 2, 3, 7, 8, 9, 10, 14, 15, 16, 11, 12, 13]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "nn.ConvTranspose2d(2048, 256, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.ConvTranspose2d(256, 256, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "nn.ConvTranspose2d(256, 256, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_joints",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_41": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_46": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet2d_int.py": {
        "torch": {
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(hmap, (num_batch, self.num_joints, 64 * 64))",
                            "Call"
                        ],
                        [
                            "self.relu(hmap)",
                            "Call"
                        ],
                        [
                            "hmap / denom",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_batch, self.num_joints, 64 * 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(hmap, (num_batch, self.num_joints, 64 * 64))",
                            "Call"
                        ],
                        [
                            "self.relu(hmap)",
                            "Call"
                        ],
                        [
                            "hmap / denom",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(hmap, (num_batch, self.num_joints, 64 * 64))",
                            "Call"
                        ],
                        [
                            "self.relu(hmap)",
                            "Call"
                        ],
                        [
                            "hmap / denom",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.wx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(hmap, (num_batch, self.num_joints, 64 * 64))",
                            "Call"
                        ],
                        [
                            "self.relu(hmap)",
                            "Call"
                        ],
                        [
                            "hmap / denom",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_59": {
                "variable": {
                    "value": "img_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_61": {
                "variable": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_flipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet(img_flipped)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flip_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 4, 5, 6, 1, 2, 3, 7, 8, 9, 10, 14, 15, 16, 11, 12, 13]",
                            "List"
                        ]
                    ]
                }
            },
            "load_35": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_46": {
                "start": {
                    "value": "64.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "64.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet2d_lift.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_2d_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_lift_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_2d.py": {
        "torch": {
            "cat_189": {
                "variable": {
                    "value": "pred2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred2d, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "gt2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt2d, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "outputs[1].detach()",
                            "Call"
                        ],
                        [
                            "pred / 255.0",
                            "BinOp"
                        ],
                        [
                            "pred * torch.reshape(bbox[:, 2:4], (nb, 1, 2))",
                            "BinOp"
                        ],
                        [
                            "pred + torch.reshape(bbox[:, 0:2], (nb, 1, 2))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "weight * (prediction - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "weight * torch.abs(prediction - target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pred3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred3d, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "gt3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt3d, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'pred2d': pred2d, 'gt2d': gt2d}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d, 'gt2d': gt2d, 'pred3d': pred3d, 'gt3d': gt3d}",
                            "Dict"
                        ],
                        [
                            "{'pred': pred, 'gt': gt}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d.cpu().numpy(), 'gt2d': gt2d.cpu().numpy()}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d.cpu().numpy(), 'gt2d': gt2d.cpu().numpy(), 'pred3d': pred3d.cpu().numpy(), 'gt3d': gt3d.cpu().numpy()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'test_train.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'result.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'result.mat')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_213": {
                "obj": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'pred2d': pred2d, 'gt2d': gt2d}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d, 'gt2d': gt2d, 'pred3d': pred3d, 'gt3d': gt3d}",
                            "Dict"
                        ],
                        [
                            "{'pred': pred, 'gt': gt}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d.cpu().numpy(), 'gt2d': gt2d.cpu().numpy()}",
                            "Dict"
                        ],
                        [
                            "{'pred2d': pred2d.cpu().numpy(), 'gt2d': gt2d.cpu().numpy(), 'pred3d': pred3d.cpu().numpy(), 'gt3d': gt3d.cpu().numpy()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_dir, 'test_train.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'result.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_dir, 'result.mat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.prod(cam_f.detach(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "pred_root",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.view(nb, 1), Y.view(nb, 1), Z.view(nb, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "nj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.num_joints",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_17": {
                "input": {
                    "value": "prediction - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "input": {
                    "value": "bbox[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "input": {
                    "value": "bbox[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "pred_root",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.view(nb, 1), Y.view(nb, 1), Z.view(nb, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_125": {
                "input": {
                    "value": "cam_f.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "torch.abs(pred_root[:, 0] - coords_root[:, 0].detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "torch.abs(pred_root[:, 1] - coords_root[:, 1].detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "torch.abs(pred_root[:, 2] - coords_root[:, 2].detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_133": {
                "input": {
                    "value": "torch.prod(cam_f.detach(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "pred_root[:, 0] - coords_root[:, 0].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_148": {
                "input": {
                    "value": "pred_root[:, 1] - coords_root[:, 1].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_149": {
                "input": {
                    "value": "pred_root[:, 2] - coords_root[:, 2].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_133": {
                "input": {
                    "value": "cam_f.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_lift.py": {
        "torch": {
            "sum_12": {
                "input": {
                    "value": "weight * (prediction - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "weight * torch.abs(prediction - target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.prod(cam_f.detach(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "pred_root",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.view(nb, 1), Y.view(nb, 1), Z.view(nb, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "pred_root",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.view(nb, 1), Y.view(nb, 1), Z.view(nb, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "input": {
                    "value": "bbox[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "input": {
                    "value": "bbox[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_15": {
                "input": {
                    "value": "prediction - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_85": {
                "input": {
                    "value": "cam_f.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "input": {
                    "value": "torch.prod(cam_f.detach(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "std2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(std2d, dim=0).squeeze().cpu().numpy() * 1000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(depth, dim=0).squeeze().cpu().numpy() / 1000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_93": {
                "input": {
                    "value": "cam_f.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/eval.py": {
        "torch": {
            "argmax_12": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hmap.reshape(num_batch, num_joint, h * w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hmap.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_joint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hmap.shape[1]",
                            "Subscript"
                        ],
                        [
                            "output.shape[1]",
                            "Subscript"
                        ],
                        [
                            "output.shape[1]",
                            "Subscript"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ],
                        [
                            "output.shape[1] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(((pred - target) ** 2).sum(2), weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(((output - target) ** 2).sum(2), weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_56": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, 0] - target[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, 1] - target[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_72": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, 2] - target[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb, nj, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb, nj, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "pred_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred ** 2.0).sum(dim=2, keepdim=True).sum(dim=1, keepdim=True) / nj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "pose3d_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pose3d ** 2.0).sum(dim=2, keepdim=True).sum(dim=1, keepdim=True) / nj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_109": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((pred_pa - pose3d) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "variable": {
                    "value": "output_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(output ** 2.0).sum(dim=2, keepdim=True).sum(dim=1, keepdim=True) / num_joint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "variable": {
                    "value": "target_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(target ** 2.0).sum(dim=2, keepdim=True).sum(dim=1, keepdim=True) / num_joint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((output_pa - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((output_pa - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_179": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((output - target) ** 2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((output - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(((output - target) ** 2).sum(2), weight.reshape(num_batch, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_102": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose3d[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_103": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_104": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "V.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_105": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_136": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose3d[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_137": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_138": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "V.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_139": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_164": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose3d[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ],
                        [
                            "target[i].t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_165": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(B, A.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_166": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "V.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_167": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(U, V.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ],
                        [
                            "output[i].t()",
                            "Call"
                        ],
                        [
                            "torch.mm(R, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_28": {
                "input": {
                    "value": "((pred - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_36": {
                "input": {
                    "value": "((output - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_48": {
                "input": {
                    "value": "((output - target) ** 2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight.reshape(num_batch, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/img.py": {
        "torch": {
            "from_numpy_60": {
                "ndarray": {
                    "value": "newImg.transpose(2, 0, 1).astype(np.float32) / 256.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}