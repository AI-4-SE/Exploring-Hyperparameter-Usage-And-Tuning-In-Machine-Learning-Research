{
    "parlai/agents/tfidf_retriever/tfidf_retriever.py": {
        "sklearn": {}
    },
    "parlai/agents/tfidf_retriever/utils.py": {
        "sklearn": {
            "murmurhash3_32_68": {
                "positive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_54": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data': matrix.data, 'indices': matrix.indices, 'indptr': matrix.indptr, 'shape': matrix.shape, 'metadata': metadata}",
                            "Dict"
                        ],
                        [
                            "{'indices': matrix._indices(), 'values': matrix._values(), 'size': matrix.size(), 'metadata': metadata}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "agents/common/bert_optimizer.py": {
        "torch": {
            "zeros_like_110": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__119": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "agents/common/gpt_dictionary.py": {
        "torch": {}
    },
    "agents/psquare/psquare.py": {
        "torch": {
            "SGD_463": {
                "variable": {
                    "value": "self.super_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.transmitter.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1056": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adagrad_456": {
                "variable": {
                    "value": "self.transmitter_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.transmitter.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.get('lr', 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_467": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.transmitter_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_726": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_726": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_841": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_937": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_357": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_730": {
                "variable": {
                    "value": "reward_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([o['reward'] for o in obs])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "log_probs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_816": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1085": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': component.state_dict(), 'longest_label': component.longest_label, 'optimizer': optimizer.state_dict() if optimizer is not None else None, 'optimizer_type': self.opt['optimizer_transmitter'], 'opt': self.opt}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "detect_anomaly_728": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_792": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs.view(-1) * reward_tensor",
                            "BinOp"
                        ],
                        [
                            "out[1]",
                            "Subscript"
                        ],
                        [
                            "sorted_score[desorted_ind]",
                            "Subscript"
                        ],
                        [
                            "scores.data.cpu().numpy() - 0.5",
                            "BinOp"
                        ],
                        [
                            "sorted_score[desorted_ind]",
                            "Subscript"
                        ],
                        [
                            "scores.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.nan_to_num(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_795": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "predictions.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_795": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/psquare/utils.py": {
        "torch": {
            "log_softmax_34": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_logits[..., :-1, :].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_34": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "golden_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_tokens[:, 1:].unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "agents/receiver/receiver.py": {
        "torch": {
            "mean_668": {
                "variable": {
                    "value": "sparse_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(replaced_vector), dim=1).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "sparse_loss / value_count",
                            "BinOp"
                        ],
                        [
                            "sparse_loss.view(persona_shape[0], persona_shape[1])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(replaced_vector), dim=1).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "sparse_loss / value_count",
                            "BinOp"
                        ],
                        [
                            "sparse_loss.view(persona_shape[0], persona_shape[1])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(replaced_vector), dim=2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "sparse_loss / value_count",
                            "BinOp"
                        ],
                        [
                            "sparse_loss.view(persona_shape[0], persona_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_724": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_857": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_859": {
                "variable": {
                    "value": "self.bilinear_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_877": {
                "variable": {
                    "value": "enc_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs.ne(0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ne_877": {
                "variable": {
                    "value": "enc_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1190": {
                "variable": {
                    "value": "valid_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ind for (ind, value) in enumerate(valid_mask) if value[0] == 1]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(valid_ind, device=dialog_input.device).long()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "dialog_input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_1192": {
                "variable": {
                    "value": "dialog_receive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialog_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_dialog_input[desorted_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ind for (ind, value) in enumerate(valid_mask) if value[0] == 1]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(valid_ind, device=dialog_input.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1206": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(key_size, key_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1207": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(key_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1208": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(key_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_1209": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_1239": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(xes, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.active(squish)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj.unsqueeze(0).expand(xes.size(0), hs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_1239": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_221": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_921": {
                "variable": {
                    "value": "value_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_922": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1093": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expand_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear_weight.expand(persona_shape[0] * persona_shape[1], hidden_size, hidden_size)",
                            "Call"
                        ],
                        [
                            "self.bilinear_weight.expand(persona_shape[0], hidden_size, hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1095": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(dialogue_features, expand_weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, expand_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1275": {
                "variable": {
                    "value": "self.additional_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bert_model.embeddings.word_embeddings.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiMarginLoss_223": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "opt['marginloss_margin']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_716": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.encoder.state_dict(), 'optimizer': self.optimizer.state_dict(), 'optimizer_type': self.opt['optimizer']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_964": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expand_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear_weight.expand(persona_shape[0] * persona_shape[1], hidden_size, hidden_size)",
                            "Call"
                        ],
                        [
                            "self.bilinear_weight.expand(persona_shape[0], hidden_size, hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_966": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(dialogue_features, expand_weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, expand_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "candidate_persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ne_1024": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "persona_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros(persona_count.size(), device=whole_mask.device).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1024": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1031": {
                "variable": {
                    "value": "sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1097": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1109": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(intermediate, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intermediate, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_1208": {},
            "bmm_1236": {
                "input": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xes.transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.unsqueeze(0).expand(xes.size(0), hs, hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_342": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(pretrained_dim, opt['embeddingsize']).normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_968": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "candidate_persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_980": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(intermediate, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intermediate, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1039": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replaced_vector * temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ne_1044": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "persona_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros(persona_count.size(), device=whole_mask.device).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1044": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1051": {
                "variable": {
                    "value": "sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1100": {
                "variable": {
                    "value": "norm_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features.norm(p=2, dim=2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "persona_features.norm(p=2, dim=2, keepdim=True).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1112": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(intermediate, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intermediate, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_971": {
                "variable": {
                    "value": "norm_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue_features.norm(p=2, dim=2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "candidate_persona_features.norm(p=2, dim=2, keepdim=True).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_983": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(intermediate, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intermediate, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "ne_1066": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "persona_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "whole_mask.sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros(persona_count.size(), device=whole_mask.device).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1066": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1074": {
                "variable": {
                    "value": "sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1121": {
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(intermediate, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, candidate_persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intermediate, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dialogue_features, persona_features.transpose(1, 2)) / norm_res",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ],
                        [
                            "feature_map / self.scaled_value",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(feature_map)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1061": {
                "variable": {
                    "value": "value_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.step / 10000) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1102": {
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_679": {
                "input": {
                    "value": "cand_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_973": {
                "input": {
                    "value": "dialogue_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dialogue_features.unsqueeze(1).expand(persona_shape[0], persona_shape[1], dialogue_shape[1], dialogue_shape[2])",
                            "Call"
                        ],
                        [
                            "dialogue_features.contiguous().view(persona_shape[0] * persona_shape[1], dialogue_shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "candidate_persona_features.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1031": {
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1051": {
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1059": {
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1025": {
                "*size": {
                    "value": "persona_count.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "whole_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1074": {
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_output.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "feature_map.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1045": {
                "*size": {
                    "value": "persona_count.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "whole_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1067": {
                "*size": {
                    "value": "persona_count.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "whole_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/transmitter/gpt/loss.py": {
        "torch": {
            "CrossEntropyLoss_11": {
                "variable": {
                    "value": "self.base_loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "pad_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_44": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_45": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_48": {
                "variable": {
                    "value": "smoothed_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(vocabulary_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (vocabulary_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_25": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_loss_function(outputs_flat, targets_flat)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "agents/transmitter/gpt/model.py": {
        "torch": {
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "pred_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.longest_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "pred_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.longest_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "pred_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.longest_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_398": {
                "variable": {
                    "value": "beam_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "diversity_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_405": {
                "variable": {
                    "value": "prevs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size * self.beam_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_545": {
                "variable": {
                    "value": "all_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(receive_tokens, start_tensor, send_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_seq, start_tensor, tgt_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "prior_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_seq, start_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "cand_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_seq, start_tensor, sampling_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_272": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_probs.view(batch_size, self.beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "past_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_input, predict_tok.view(batch_size, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_342": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_353": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "past_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_input, predict_tok]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_572": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "dis_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(input_seq.size())",
                            "Call"
                        ],
                        [
                            "np.zeros(prior_context.size())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "input_seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "prior_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(input_seq.size())",
                            "Call"
                        ],
                        [
                            "np.zeros(prior_context.size())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "prior_context.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_204": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_probs.view(batch_size, self.beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "past_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_input, predict_tok.view(batch_size, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_303": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_probs.view(batch_size, self.beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "past_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_dis, new_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_374": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "past_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_dis, new_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_415": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_492": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._length_penalty(beam_lens.float() + 1 - is_end.float())",
                            "Call"
                        ],
                        [
                            "penalty.unsqueeze(-1).repeat(1, 1, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "penalty[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "penalty.view(batch_size, self.diversity_groups, group_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(penalty, 1, idxs)",
                            "Call"
                        ],
                        [
                            "penalty.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_idxs, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "fmod_493": {
                "variable": {
                    "value": "sym_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_idxs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "log_probs.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_494": {
                "variable": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, dtype=torch.uint8, device=device)",
                            "Call"
                        ],
                        [
                            "is_end | (predict_tok == self.end_idx).view(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch_size, dtype=torch.uint8, device=device)",
                            "Call"
                        ],
                        [
                            "is_end | (predict_tok == self.end_idx).view(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch_size, dtype=torch.uint8, device=device)",
                            "Call"
                        ],
                        [
                            "is_end | (predict_tok == self.end_idx).view(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch_size, self.beam_size, dtype=torch.uint8, device=device)",
                            "Call"
                        ],
                        [
                            "torch.gather(is_end, 1, beam_idxs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.beam_size), dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "(idxs.float() / self.vocab_size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_495": {
                "variable": {
                    "value": "beam_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, self.beam_size, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "torch.gather(beam_lens, 1, beam_idxs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.beam_size), dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "(idxs.float() / self.vocab_size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_503": {
                "variable": {
                    "value": "prevs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prevs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size * self.beam_size, 1), fill_value=self.start_idx, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "prevs.view(batch_size, self.beam_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(prevs, 1, beam_idxs.unsqueeze(-1).repeat(1, 1, prevs.shape[-1]))",
                            "Call"
                        ],
                        [
                            "prevs.view(batch_size * self.beam_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([prevs, sym_idxs], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "beam_idxs.unsqueeze(-1).repeat(1, 1, prevs.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "prevs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prevs, sym_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_tensor, prevs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_550": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_570": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cand_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "variable": {
                    "value": "predict_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_probs.view(batch_size, self.beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "past_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_dis, new_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "beam_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_487": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_556": {
                "input": {
                    "value": "self.linear(last_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_572": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / self.temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=topk)",
                            "Call"
                        ],
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "cand_inp_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cand_src_seq, cand_start, current_cs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_logits[..., src_seq_len:-1, :].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "cand_label.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_476": {
                "variable": {
                    "value": "g_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_scores[:, g, :, :].view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(beam_probas, group_size, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.gather(sample_idxs, 1, g_idxs)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(beam_probas, group_size)",
                            "Call"
                        ],
                        [
                            "g_idxs + g * group_size * self.vocab_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_466": {
                "variable": {
                    "value": "beam_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores[:, g, :, :]",
                            "Subscript"
                        ],
                        [
                            "g_beam_scores - self.diversity_coef * diversity_penalty.unsqueeze(1) / g_penalty",
                            "BinOp"
                        ],
                        [
                            "g_beam_scores.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_178": {
                "input": {
                    "value": "self.linear(last_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_469": {
                "variable": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(g_beam_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size // self.diversity_groups",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_470": {
                "variable": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(beam_probas, group_size, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.gather(sample_idxs, 1, g_idxs)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(beam_probas, group_size)",
                            "Call"
                        ],
                        [
                            "g_idxs + g * group_size * self.vocab_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multinomial_472": {
                "variable": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(g_beam_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size // self.diversity_groups",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fmod_482": {
                "input": {
                    "value": "g_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(beam_probas, group_size, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.gather(sample_idxs, 1, g_idxs)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(beam_probas, group_size)",
                            "Call"
                        ],
                        [
                            "g_idxs + g * group_size * self.vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_483": {
                "*size": {
                    "value": "(batch_size, group_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "agents/transmitter/seq2seq/model.py": {
        "torch": {
            "zeros_100": {
                "variable": {
                    "value": "self.persona_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['encoder_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "self.persona_gate_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['encoder_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_295": {
                "variable": {
                    "value": "self.in_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "inp_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_296": {
                "variable": {
                    "value": "self.out_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "oup_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_394": {
                "variable": {
                    "value": "self.in_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "inp_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_395": {
                "variable": {
                    "value": "self.out_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "oup_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_401": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_554": {
                "variable": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_616": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_707": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.unsqueeze(1).repeat(1, beam_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.unbeamize_enc_out(enc_out, beam_size, bsz)",
                            "Call"
                        ],
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_708": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_709": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).zero_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 1)",
                            "Call"
                        ],
                        [
                            "beam_pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "out[1]",
                            "Subscript"
                        ],
                        [
                            "scores.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "beam_scores",
                            "Name"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores + true_score.squeeze(2).squeeze(1) * nonzero",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_302": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_309": {
                "variable": {
                    "value": "self.turn_state_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "turn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "turn_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_314": {
                "variable": {
                    "value": "self.dis_state_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "turn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "turn_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.input2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Name"
                        ],
                        [
                            "input_size + turn_emb_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_358": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_dropout(self.src_word_emb(src_seq))",
                            "Call"
                        ],
                        [
                            "self.input2emb(torch.cat(embedd, dim=2))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout(self.tgt_word_emb(xs))",
                            "Call"
                        ],
                        [
                            "self.attention(xes, hidden, encoder_output, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in torch.sum((src_seq > 0).int(), dim=1).data]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_366": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_dropout(encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_431": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_434": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_573": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_601": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.detach()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_627": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_647": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_678": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_679": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_705": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attn_w_premask - (1 - attn_mask) * 1e+20",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_469": {
                "variable": {
                    "value": "(max_score, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores.narrow(2, 1, scores.size(2) - 1), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_471": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_472": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prob * prior.unsqueeze(2)).sum(1).view(bsz, seqlen, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx), 2).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_529": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, c_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_534": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_534": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_656": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_688": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_689": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_top_hyp()[1] for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_255": {
                "variable": {
                    "value": "beam_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(t, length=pad_length, dim=0) for t in beam_pred]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "embedd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[xes]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_544": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_544": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "ci.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_659": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_660": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_696": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_696": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_469": {
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_663": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_694": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_700": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_700": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "(src_seq > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_238": {
                "input": {
                    "value": "scores[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "agents/transmitter/transmitter.py": {
        "torch": {
            "CrossEntropyLoss_432": {
                "variable": {
                    "value": "self.class_criter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_487": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_499": {
                "variable": {
                    "value": "status",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "receiver_model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_929": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_484": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__549": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_691": {
                "variable": {
                    "value": "positive_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_692": {
                "variable": {
                    "value": "negative_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_698": {
                "variable": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * positive_score.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "positive_score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_699": {
                "variable": {
                    "value": "neg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * negative_score.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "positive_score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_840": {
                "variable": {
                    "value": "input_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('batchsize', batchsize)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.encode_max_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_841": {
                "variable": {
                    "value": "output_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('batchsize', batchsize)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_305": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_914": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_agent.encoder",
                            "Attribute"
                        ],
                        [
                            "{'model': self.model.state_dict(), 'longest_label': self.model.longest_label, 'optimizer': self.optimizer.state_dict(), 'optimizer_type': self.opt['optimizer']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_390": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_744": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_391": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(pretrained_dim, opt['encoder_embed_dim']).normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "agents/transmitter/utils.py": {
        "torch": {
            "topk_115": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "hypothesis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_822": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_823": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_791": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_78": {},
            "mm_376": {
                "input": {
                    "value": "dialog_encoding[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "persona_encoding.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/bert_ranker/bi_encoder_ranker.py": {
        "torch": {
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_174": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_ctxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_ctxt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.context_encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedding_cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_cands.view(csize[0], csize[1], -1)",
                            "Call"
                        ],
                        [
                            "embedding_cands.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.cand_encoder(token_idx_cands, segment_idx_cands, mask_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "self.vocab_candidate_encs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cand_encs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/bert_ranker/cross_encoder_ranker.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "all_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens_context, tokens_cands]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "all_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[segments_context, segments_cands]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_37": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/bert_ranker/helpers.py": {
        "torch": {
            "Linear_90": {
                "variable": {
                    "value": "self.additional_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bert_model.embeddings.word_embeddings.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[start_tensor, idx_vector, end_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "sumed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_of_interest * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "nb_elems",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[:, 1:].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "nb_elems",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_121": {
                "variable": {
                    "value": "(embeddings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_of_interest + mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "output_pooler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_260": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__269": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/coopgame_agent/coopgame_agent.py": {
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_85": {
                "device": {
                    "value": "opt['gpuid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "token_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(token_embeds, observation['image'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/coopgame_agent/modules.py": {
        "torch": {
            "Embedding_35": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeds.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_64": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_79": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_93": {
                "variable": {
                    "value": "self.net_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.net_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_95": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/drqa/drqa.py": {
        "torch": {
            "load_151": {
                "variable": {
                    "value": "saved_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if fname is None else fname",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_132": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/drqa/layers.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_87": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_88": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_101": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "alpha_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, y.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_proj.bmm(y_proj.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_162": {
                "variable": {
                    "value": "x_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x.view(-1, x.size(2))).view(x.size())",
                            "Call"
                        ],
                        [
                            "F.relu(x_proj)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_164": {
                "variable": {
                    "value": "y_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(y.view(-1, y.size(2))).view(y.size())",
                            "Call"
                        ],
                        [
                            "F.relu(y_proj)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_210": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xWy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_248": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(rnn_input, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lengths)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.PackedSequence(dropout_input, rnn_input.batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_113": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_119": {
                "sequence": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/drqa/model.py": {
        "torch": {
            "SGD_44": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.network.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ger_144": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_s[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "score_e[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adamax_48": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.network.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "opt['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_101": {
                "input": {
                    "value": "score_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_e.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(ex[6].cuda(non_blocking=True))",
                            "Call"
                        ],
                        [
                            "Variable(ex[6])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_171": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': {'network': self.network.state_dict()}, 'feature_dict': self.feature_dict, 'config': self.opt}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/drqa/rnn_reader.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "opt['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_108": {
                "variable": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x1)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x1_emb, p=self.opt['dropout_emb'], training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_emb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x2)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x2_emb, p=self.opt['dropout_emb'], training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_emb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "drnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1_emb, x2_weighted_emb, x1_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "drnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1_emb, x1_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/drqa/utils.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(ex['document'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "features[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[3] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[4] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/example_seq2seq/example_seq2seq.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_32": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "numlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_60": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "numlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_63": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "rel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_140": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_145": {
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learningrate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_146": {
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learningrate']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/fairseq/fairseq.py": {
        "torch": {
            "arange_679": {
                "variable": {
                    "value": "sample[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(xs) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_339": {
                "seed": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_capability_373": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/ibm_seq2seq/ibm_seq2seq.py": {
        "torch": {
            "NLLLoss_199": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_455": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_233": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, ys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, ys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_139": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_342": {
                "input": {
                    "value": "(xs > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/ir_baseline/ir_baseline.py": {
        "torch": {
            "save_307": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/language_model/language_model.py": {
        "torch": {
            "CrossEntropyLoss_183": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_196": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_618": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_202": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.lr_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__243": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_447": {
                "tensors": {
                    "value": "token_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_626": {
                "variable": {
                    "value": "self.states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_418": {
                "variable": {
                    "value": "(_, word_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_124": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_426": {
                "variable": {
                    "value": "ww_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_429": {
                "variable": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_431": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_436": {
                "variable": {
                    "value": "(_, word_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_500": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_600": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_434": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/language_model/modules.py": {
        "torch": {
            "Dropout_28": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['embeddingsize']",
                            "Subscript"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['hiddensize']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RNN_40": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_75": {
                "variable": {
                    "value": "emb_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(self.encoder(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "emb_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in torch.sum((input > 0).int(), dim=0).data]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_77": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "(input > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/memnn/memnn_v0.py": {
        "torch": {
            "CrossEntropyLoss_106": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "self.gen_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.LongTensor(m) for m in memory]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_312": {
                "variable": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "memories",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "query_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[2] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_380": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "unsqueeze_326": {
                "variable": {
                    "value": "label_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat((p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))) for p in parsed]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "type": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_num_threads_90": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_118": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_328": {
                "tensors": {
                    "value": "(p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_377": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_116": {
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_120": {
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/legacy_agents/memnn/modules_v0.py": {
        "torch": {
            "stack_124": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_158": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_memory_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "in_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query_embeddings.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(in_memory_embeddings, query_embeddings.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attention_mask.float() * attention + (1 - attention_mask.float()) * -1e+20",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_163": {
                "variable": {
                    "value": "memory_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(attention, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out_memory_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "out_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "memory_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.h2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_175": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(input[i, :, :])",
                            "Call"
                        ],
                        [
                            "emb * self.position_tensor(row, emb)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(emb, dim=1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_102": {
                "input": {
                    "value": "lengths_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.data",
                            "Attribute"
                        ],
                        [
                            "lengths_mat.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/modules_v0.py": {
        "torch": {
            "Dropout_273": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_340": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_492": {
                "variable": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_552": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_643": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.unsqueeze(1).repeat(1, beam_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.unbeamize_enc_out(enc_out, beam_size, bsz)",
                            "Call"
                        ],
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_644": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_645": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_20": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).zero_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 1)",
                            "Call"
                        ],
                        [
                            "beam_pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "out[1]",
                            "Subscript"
                        ],
                        [
                            "scores.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "beam_scores",
                            "Name"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores + true_score.squeeze(2).squeeze(1) * nonzero",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_279": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_301": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "self.attention(xes, hidden, encoder_output, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in torch.sum((xs > 0).int(), dim=1).data]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_309": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_370": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_373": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_510": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_519": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_538": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.detach()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_563": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_615": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_641": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attn_w_premask - (1 - attn_mask) * 1e+20",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_408": {
                "variable": {
                    "value": "(max_score, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores.narrow(2, 1, scores.size(2) - 1), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_409": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_409": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_410": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prob * prior.unsqueeze(2)).sum(1).view(bsz, seqlen, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx), 2).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_467": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, c_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_472": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_472": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_625": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_231": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_top_hyp()[1] for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "beam_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(t, length=pad_length, dim=0) for t in beam_pred]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_482": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_482": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "ci.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_595": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_596": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_632": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_632": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_217": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_408": {
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_599": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_636": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_636": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_300": {
                "input": {
                    "value": "(xs > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_216": {
                "input": {
                    "value": "scores[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/modules_v1.py": {
        "torch": {
            "cat_122": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._starts(bsz), y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len, pad=self.NULL_IDX).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_415": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_420": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_495": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_695": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_697": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_699": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).fill_(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_226": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self._decode_forced(curr_cs, cur_enc_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_226": {
                "variable": {
                    "value": "true_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_349": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_381": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_382": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(attn_mask.int(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_390": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.e2s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_510": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "shared_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.lt.weight if lookuptable in ('dec_out', 'all') else None",
                            "IfExp"
                        ],
                        [
                            "shared_weight.narrow(0, 1, num_features)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_511": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_518": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_521": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad_score, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_607": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_655": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_656": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_692": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_292": {
                "variable": {
                    "value": "out_pad_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_states[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len - encoder_states[0].size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encoder_states[0].size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "new_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_states[0], out_pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_526": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_616": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_670": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_672": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_513": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_619": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_620": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_680": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_680": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_623": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_678": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_686": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_686": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/seq2seq_v0.py": {
        "torch": {
            "load_731": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_798": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.select(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_798": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_363": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_366": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_411": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_247": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__462": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_645": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('batchsize', batchsize)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.truncate or 180",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "set_device_270": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_716": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_338": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_339": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(pretrained_dim, opt['embeddingsize']).normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/seq2seq_v1.py": {
        "torch": {
            "cat_405": {
                "variable": {
                    "value": "cands",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch.candidate_vecs[i] for i in cand_inds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cands, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_460": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "text_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.text_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_665": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_753": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.select(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_753": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_186": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_189": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_494": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.output(output)",
                            "Call"
                        ],
                        [
                            "score.view(batch_size, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "hyp.score",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_498": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_539": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.label_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "label_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.label_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_241": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__268": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_335": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_655": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_551": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/torch_agent_v1.py": {
        "torch": {
            "ReduceLROnPlateau_308": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_867": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_1096": {
                "variable": {
                    "value": "hypothesis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_1025": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_num_threads_230": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1024": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_240": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_377": {
                "variable": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_381": {
                "input": {
                    "value": "vec.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1103": {},
            "save_854": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/utils_v0.py": {
        "torch": {
            "stack_154": {
                "variable": {
                    "value": "hypothesis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_88": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_638": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_51": {},
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/legacy_agents/seq2seq/utils_v1.py": {
        "torch": {}
    },
    "parlai/agents/memnn/memnn.py": {
        "torch": {}
    },
    "parlai/agents/memnn/modules.py": {
        "torch": {
            "Tensor_176": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_202": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_216": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "in_mem_embs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_218": {
                "variable": {
                    "value": "memory_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "out_mem_embs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "memory_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.rotate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_output + self.rotate(query_embs)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "cands.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_71": {
                "input": {
                    "value": "output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cands.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/mlb_vqa/dropout.py": {
        "torch": {
            "ones_88": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "dist_total",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "dist_total",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_108": {
                "input": {
                    "value": "dist_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1)",
                            "Call"
                        ],
                        [
                            "dist_total + torch.dist(output_last, dp(input))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_94": {
                "input": {
                    "value": "output_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dp(input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dp(input)",
                            "Call"
                        ],
                        [
                            "output_new",
                            "Name"
                        ]
                    ]
                }
            },
            "equal_97": {
                "input": {
                    "value": "dist_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1)",
                            "Call"
                        ],
                        [
                            "dist_total + torch.dist(output_last, dp(input))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_105": {
                "input": {
                    "value": "output_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dp(input)",
                            "Call"
                        ],
                        [
                            "output_new",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "dp(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(input[i].numpy())",
                            "Call"
                        ],
                        [
                            "np.nonzero(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.mul(noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/mlb_vqa/gru.py": {
        "torch": {}
    },
    "parlai/agents/mlb_vqa/loadstates.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "620",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "s[bias_ih_l0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "7200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "s[bias_hh_l0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "7200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "s[weight_ih_l0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "7200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "620",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "s[weight_hh_l0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "7200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "s[weight_ih_l0][:4800]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_W']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_76": {
                "variable": {
                    "value": "s[weight_ih_l0][:4800]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "s[weight_ih_l0][4800:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_Wx']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_77": {
                "variable": {
                    "value": "s[weight_ih_l0][4800:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "s[bias_ih_l0][:4800]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "s[bias_ih_l0][4800:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_bx']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "s[weight_hh_l0][:4800]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_U']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_80": {
                "variable": {
                    "value": "s[weight_hh_l0][:4800]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "s[weight_hh_l0][4800:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_Ux']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_81": {
                "variable": {
                    "value": "s[weight_hh_l0][4800:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "s[gru_cell.weight_in.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_Wx']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_89": {
                "variable": {
                    "value": "s[gru_cell.weight_in.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "s[gru_cell.weight_in.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_bx']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "s[gru_cell.weight_hn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p['encoder_Ux']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_97": {
                "variable": {
                    "value": "s[gru_cell.weight_hn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "weight[id_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.load(path_params, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "numpy.load(path_params, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "parameters[id_params]",
                            "Subscript"
                        ],
                        [
                            "unknown_params",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "p['encoder_W']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "p['encoder_W']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "p['encoder_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "p['encoder_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "p['encoder_U']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "p['encoder_U']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/mlb_vqa/mlb_modules.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.dict.tok2ind)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "620",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.dict.tok2ind[self.dict.null_token]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mul(mask)",
                            "Call"
                        ],
                        [
                            "x.sum(1).view(batch_size, self.opt['dim_q'])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_cls'])(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.opt['dropout_cls'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_classif(x)",
                            "Call"
                        ],
                        [
                            "self.embedding(input)",
                            "Call"
                        ],
                        [
                            "self.select_last(x, lengths)",
                            "Call"
                        ],
                        [
                            "self.forward_fusion(input_v, x_q)",
                            "Call"
                        ],
                        [
                            "self._classif(x)",
                            "Call"
                        ],
                        [
                            "self.forward_glimpses(list_v_att, x_q)",
                            "Call"
                        ],
                        [
                            "self._classif(x)",
                            "Call"
                        ],
                        [
                            "self.forward_fusion_cls(x_v, x_q)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_cls']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.linear_classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opt['dropout_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "x_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_q",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opt['dropout_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_161": {
                "variable": {
                    "value": "x_mm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_st(input_q)",
                            "Call"
                        ],
                        [
                            "F.dropout(input_q, p=self.opt['dropout_q'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_q(x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_q'])(x_q)",
                            "Call"
                        ],
                        [
                            "self.forward_st(input_q)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_q_vec, p=self.opt['dropout_att_q'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_q_att(x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_q'])(x_q)",
                            "Call"
                        ],
                        [
                            "x_q.view(batch_size, 1, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "x_q.expand(batch_size, width * height, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "F.dropout(x_q_vec, p=self.opt['dropout_q'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_q_fusion(x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_q'])(x_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "input_v",
                            "Name"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_att_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_v_att(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "x_v.view(batch_size, self.opt['dim_att_h'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input_v.view(batch_size, self.opt['dim_v'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v_att, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v_fusion(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v_att, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.list_linear_v_fusion[glimpse_id](x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.conv_v_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt['dim_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.opt['dim_att_h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.linear_q_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_att_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt['dim_att_h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.opt['num_glimpses']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_217": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "input_v",
                            "Name"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_att_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_v_att(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "x_v.view(batch_size, self.opt['dim_att_h'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input_v.view(batch_size, self.opt['dim_v'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v_att, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v_fusion(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v_att, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.list_linear_v_fusion[glimpse_id](x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_att_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_226": {
                "variable": {
                    "value": "x_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opt['dropout_att_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_239": {
                "variable": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_fusion_att(x_v, x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_mm'])(x_att)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_att, p=self.opt['dropout_att_mm'], training=self.training)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width, height, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "x_att.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_att(x_att)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, self.opt['num_glimpses'], width * height)",
                            "Call"
                        ],
                        [
                            "list_att_split",
                            "Name"
                        ],
                        [
                            "x_att.contiguous()",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width * height)",
                            "Call"
                        ],
                        [
                            "F.softmax(x_att)",
                            "Call"
                        ],
                        [
                            "list_att",
                            "Name"
                        ],
                        [
                            "x_att.view(batch_size, width * height, 1)",
                            "Call"
                        ],
                        [
                            "x_att.expand(batch_size, width * height, self.opt['dim_v'])",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_att_mm']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_248": {
                "variable": {
                    "value": "list_att_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_fusion_att(x_v, x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_mm'])(x_att)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_att, p=self.opt['dropout_att_mm'], training=self.training)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width, height, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "x_att.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_att(x_att)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, self.opt['num_glimpses'], width * height)",
                            "Call"
                        ],
                        [
                            "list_att_split",
                            "Name"
                        ],
                        [
                            "x_att.contiguous()",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width * height)",
                            "Call"
                        ],
                        [
                            "F.softmax(x_att)",
                            "Call"
                        ],
                        [
                            "list_att",
                            "Name"
                        ],
                        [
                            "x_att.view(batch_size, width * height, 1)",
                            "Call"
                        ],
                        [
                            "x_att.expand(batch_size, width * height, self.opt['dim_v'])",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_292": {
                "variable": {
                    "value": "x_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_q_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opt['dropout_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_303": {
                "variable": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_307": {
                "variable": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_43": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "620",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.opt['dim_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.opt['dropout_st']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.linear_v_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_v'] * self.opt['num_glimpses']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.linear_q_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.linear_classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_184": {
                "variable": {
                    "value": "self.list_linear_v_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.opt['dim_v'], self.opt['dim_h']) for i in range(self.opt['num_glimpses'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.linear_q_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_q']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h'] * self.opt['num_glimpses']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.linear_classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.opt['dim_h'] * self.opt['num_glimpses']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_253": {
                "variable": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_fusion_att(x_v, x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_mm'])(x_att)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_att, p=self.opt['dropout_att_mm'], training=self.training)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width, height, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "x_att.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_att(x_att)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, self.opt['num_glimpses'], width * height)",
                            "Call"
                        ],
                        [
                            "list_att_split",
                            "Name"
                        ],
                        [
                            "x_att.contiguous()",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width * height)",
                            "Call"
                        ],
                        [
                            "F.softmax(x_att)",
                            "Call"
                        ],
                        [
                            "list_att",
                            "Name"
                        ],
                        [
                            "x_att.view(batch_size, width * height, 1)",
                            "Call"
                        ],
                        [
                            "x_att.expand(batch_size, width * height, self.opt['dim_v'])",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_264": {
                "variable": {
                    "value": "x_v_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_fusion_att(x_v, x_q)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_mm'])(x_att)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_att, p=self.opt['dropout_att_mm'], training=self.training)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width, height, self.opt['dim_att_h'])",
                            "Call"
                        ],
                        [
                            "x_att.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_att(x_att)",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, self.opt['num_glimpses'], width * height)",
                            "Call"
                        ],
                        [
                            "list_att_split",
                            "Name"
                        ],
                        [
                            "x_att.contiguous()",
                            "Call"
                        ],
                        [
                            "x_att.view(batch_size, width * height)",
                            "Call"
                        ],
                        [
                            "F.softmax(x_att)",
                            "Call"
                        ],
                        [
                            "list_att",
                            "Name"
                        ],
                        [
                            "x_att.view(batch_size, width * height, 1)",
                            "Call"
                        ],
                        [
                            "x_att.expand(batch_size, width * height, self.opt['dim_v'])",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ],
                        [
                            "torch.mul(input_v, input_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "input_v",
                            "Name"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_att_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_v_att(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "x_v.view(batch_size, self.opt['dim_att_h'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input_v.view(batch_size, self.opt['dim_v'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v_att, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v_fusion(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v_att, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.list_linear_v_fusion[glimpse_id](x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_275": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_v_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_attention(input_v, x_q)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "input_v",
                            "Name"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_att_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_v_att(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_att_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "x_v.view(batch_size, self.opt['dim_att_h'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input_v.view(batch_size, self.opt['dim_v'], width * height)",
                            "Call"
                        ],
                        [
                            "x_v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v_att, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_v_fusion(x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_v_att, p=self.opt['dropout_v'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.list_linear_v_fusion[glimpse_id](x_v)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.opt['activation_v'])(x_v)",
                            "Call"
                        ],
                        [
                            "torch.cat(list_v, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_283": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_v_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x_att, x_v)",
                            "Call"
                        ],
                        [
                            "x_v_att.sum(1)",
                            "Call"
                        ],
                        [
                            "x_v_att.view(batch_size, self.opt['dim_v'])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.state_dict(), 'optim': self.optim.state_dict(), 'opt': self.opt}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "self.opt['dim_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['dim_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/mlb_vqa/mlb_vqa.py": {
        "torch": {
            "stack_541": {
                "variable": {
                    "value": "input_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex['image'][0] for ex in new_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_542": {
                "variable": {
                    "value": "input_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(ex['question_wids']) for ex in new_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_655": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_393": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_589": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_370": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_396": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/seq2seq/modules.py": {
        "torch": {
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_269": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_383": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_387": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_(-rng, rng)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_572": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_574": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_576": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_137": {
                "obj": {
                    "value": "incremental_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_225": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_226": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "torch.cat(new_xes, 1).to(xes.device)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(attn_mask.int(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_237": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "xs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1).to(xes.device)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.attn_combine(merged).unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features, embeddingsize).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_404": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_407": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_435": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "active.view(-1, self.esz)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_451": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.o2e(input))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_533": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_569": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "obj": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(hid.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_139": {
                "input": {
                    "value": "incremental_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_493": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_549": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_496": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_557": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_557": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_500": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_563": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_563": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/seq2seq/seq2seq.py": {
        "torch": {
            "load_198": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "NLLLoss_158": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/starspace/modules.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.lt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "freqs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "ys_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/starspace/starspace.py": {
        "torch": {
            "CosineEmbeddingLoss_214": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "opt['margin']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_578": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "unsqueeze_301": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_360": {
                "variable": {
                    "value": "score[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x1": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W[input.data[0][0]]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "W[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_452": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_190": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_348": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_428": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_571": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_224": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_423": {
                "*size": {
                    "value": "xe.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_368": {},
            "unsqueeze_522": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/tfidf_retriever/build_tfidf.py": {
        "torch": {
            "histc_290": {
                "input": {
                    "value": "cnts._indices()[0].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "cnts.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "cnts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/modules.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_260": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_283": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_346": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_348": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_349": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_417": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_426": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_440": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask.cumsum(dim=1, dtype=torch.int64) - 1).clamp_(min=0)",
                            "Call"
                        ],
                        [
                            "input.new(seq_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(seq_len, out=positions).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_440": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_466": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_471": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_476": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_479": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tril_516": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.new(time, time).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_562": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(enc, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_563": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input != self.padding_idx",
                            "Compare"
                        ],
                        [
                            "torch.tril(x.new(time, time).fill_(1))",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).expand(bsz, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask, 0, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_572": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).float()",
                            "BinOp"
                        ],
                        [
                            "self.layers[i](tensor, mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(self.attention(tensor, mask=mask))",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm1)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(self.ffn(tensor))",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm2)",
                            "Call"
                        ],
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "layer(tensor, encoder_output, encoder_mask)",
                            "Call"
                        ],
                        [
                            "tensor.view(batch_size, tensor.size(1), n_heads, dim_per_head)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(1, 2).contiguous().view(batch_size * n_heads, seq_len, dim_per_head)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_579": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_594": {
                "variable": {
                    "value": "lhs_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(l1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_607": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_609": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_616": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_669": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_prod / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_688": {
                "variable": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "relu_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_689": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_690": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_696": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_277": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineSimilarity_581": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_589": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ys.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_560": {
                "obj": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/transformer/transformer.py": {
        "torch": {
            "DataParallel_102": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "cands.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "input": {
                    "value": "output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cands.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/vsepp_caption/modules.py": {
        "torch": {
            "pow_64": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_65": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(X, 2).sum(dim=1, keepdim=True).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.txt_enc.parameters())",
                            "Call"
                        ],
                        [
                            "params + list(self.img_enc.cnn.parameters())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_183": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_185": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_196": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cnn.classifier._modules['6'].in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.cnn.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.cnn.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_152": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_92": {
                "n": {
                    "value": "im.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cnn.module.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.cnn.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/vsepp_caption/vsepp_caption.py": {
        "torch": {
            "stack_151": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(img) for img in batch.image]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(img) for img in batch.image]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/distributed_utils.py": {
        "torch": {
            "broadcast_189": {
                "tensor": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather_list._buffer",
                            "Attribute"
                        ],
                        [
                            "sync_object._buffer",
                            "Attribute"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/image_featurizers.py": {
        "torch": {
            "Sequential_104": {
                "variable": {
                    "value": "self.netCNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(CNN(pretrained=True).children())[:layer_num]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "set_device_96": {
                "device": {
                    "value": "opt.get('gpu', -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/pytorch_data_teacher.py": {
        "torch": {
            "DataLoader_365": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler.SequentialSampler(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_429": {
                "variable": {
                    "value": "obj[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj[key]['value']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "STR_TO_TORCH_DTYPE[obj[key]['type']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_619": {
                "variable": {
                    "value": "self.pytorch_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler.SequentialSampler(self.dataset)",
                            "Call"
                        ],
                        [
                            "sampler.RandomSampler(self.dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_615": {
                "variable": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_617": {
                "variable": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_369": {
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/testing_utils.py": {
        "torch": {
            "device_count_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/thread_utils.py": {
        "torch": {
            "is_tensor_157": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/core/torch_agent.py": {
        "torch": {
            "load_1359": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LambdaLR_669": {
                "variable": {
                    "value": "self.warmup_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "_warmup_lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_515": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__1461": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.opt['gradient_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_523": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_689": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_862": {
                "variable": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_866": {
                "input": {
                    "value": "vec.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_697": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1335": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LambdaLR_713": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "_invsqrt_lr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_classifier_agent.py": {
        "torch": {
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "self.classifier_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.class_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_190": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(batch)",
                            "Call"
                        ],
                        [
                            "self.score(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_205": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_generator_agent.py": {
        "torch": {
            "cat_104": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.output(latent)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._starts(bsz), inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_415": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_700": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "len(batch.text_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_700": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_825": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.select(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_825": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1011": {
                "variable": {
                    "value": "hypothesis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, preds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_367": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_715": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "model.output(score)",
                            "Call"
                        ],
                        [
                            "score.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "hyp.score",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_719": {
                "variable": {
                    "value": "incr_state_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "index_select_725": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([start]).expand(bsz * beam_size, 1).to(dev)",
                            "Call"
                        ],
                        [
                            "torch.index_select(decoder_input, 0, incr_state_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([decoder_input, selection], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "incr_state_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_726": {
                "variable": {
                    "value": "selection",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_726": {
                "variable": {
                    "value": "selection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_728": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_input, selection]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_934": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_634": {
                "variable": {
                    "value": "cand_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(num_cands * cands.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "cands.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_870": {},
            "no_grad_933": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_427": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_428": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_ranker_agent.py": {
        "torch": {
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_140": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_empty(batchsize).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchsize, out=targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_112": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_609": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_638": {
                "tensors": {
                    "value": "cand_encs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.fixed_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "self.vocab_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_468": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_523": {
                "variable": {
                    "value": "self.vocab_candidate_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_624": {
                "obj": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self.make_candidate_vecs(cands)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_635": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "label_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs['labels_vec']",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:cand_vecs[i].size(1)]",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:cand_vecs[i].size(1)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/core/utils.py": {
        "torch": {
            "full_962": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(a, b, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_969": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/core/worlds.py": {
        "torch": {}
    },
    "parlai/scripts/build_pytorch_data.py": {
        "torch": {
            "is_tensor_58": {
                "obj": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/extract_image_feature.py": {
        "torch": {
            "DataLoader_138": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp[1]",
                            "Subscript"
                        ],
                        [
                            "'DefaultDataset'",
                            "Constant"
                        ],
                        [
                            "get_dataset_class(opt)(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('batchsize', 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('numworkers', 1)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda batch: batch[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/multiprocessing_train.py": {
        "torch": {
            "set_device_73": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/profile_train.py": {
        "torch": {
            "profile_60": {
                "use_cuda": {
                    "value": "opt['torch_cuda']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.parse_args()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/tasks/coco_caption/agents.py": {
        "torch": {}
    },
    "parlai/tasks/flickr30k/agents.py": {
        "torch": {}
    },
    "parlai/tasks/image_chat/agents.py": {
        "torch": {}
    },
    "parlai/tasks/personality_captions/agents.py": {
        "torch": {}
    },
    "parlai/tasks/vqa_v1/agents.py": {
        "torch": {}
    },
    "train_psquare.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train_receiver_model.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1706123",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1706123",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train_transmitter.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1706123",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1706123",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "worlds/selfplay.py": {
        "torch": {
            "tril_28": {
                "variable": {
                    "value": "self_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((utt_size, utt_size), device=utt_sim_mat.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vt_agent.norm(p=2, dim=2, keepdim=True) + 0.001",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "norm.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "(utt_size, utt_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "utt_sim_mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_31": {
                "input": {
                    "value": "mask_sim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utt_sim_mat * self_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "information_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vt_persona_agent_a, vt_persona_agent_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_258": {
                "variable": {
                    "value": "information_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vt_persona_agent_b, vt_persona_agent_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}