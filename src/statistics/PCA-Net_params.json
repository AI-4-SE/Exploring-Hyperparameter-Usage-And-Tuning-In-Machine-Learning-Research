{
    "dataset.py": {
        "torch": {
            "stack_87": {
                "tensors": {
                    "value": "positive_imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(train_root, train_pd, train=True, transform=data_transforms['train'], num_positive=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(test_root, test_pd, train=False, transform=data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cls_num",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataParallel_98": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resnet50(pretrained=True, use_bp=True)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_112": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "cls_num",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "feature_len * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_161": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_231": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bilinear_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bilinear_pooling(out1, out2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "pooling1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bilinear_pooling(out1, fuse_map1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_31": {
                "variable": {
                    "value": "pooling2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bilinear_pooling(out2, fuse_map2)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "interpolate_30": {
                "variable": {
                    "value": "attention_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_maps.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(W, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_31": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(attention_maps.detach(), size=(W, H), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_32": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_33": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(attention_maps, (W, H)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.add(torch.sqrt(weights), 1e-12)",
                            "Call"
                        ],
                        [
                            "torch.div(weights, torch.sum(weights, dim=1).unsqueeze(1)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(weights, dim=1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_52": {
                "variable": {
                    "value": "target_centers",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "centers[target]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.normalize(target_centers, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_54": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features - target_centers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(features - target_centers, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(distance, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "center_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(features - target_centers, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(distance, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "I",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.bmm(x1, x2.permute(0, 2, 1))",
                            "UnaryOp"
                        ],
                        [
                            "F.softmax(I, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.bmm(x1, x2.permute(0, 2, 1))",
                            "UnaryOp"
                        ],
                        [
                            "F.softmax(I, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature1.reshape(B, N, W * H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "feature_map1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(feature_map1, (N, D1, H * W))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, D1, H * W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "feature_map2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(feature_map2, (N, D2, H * W))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, D2, H * W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(feature_map1, torch.transpose(feature_map2, 1, 2)) / (H * W)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(X, (N, D1 * D2))",
                            "Call"
                        ],
                        [
                            "torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, D1 * D2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_32": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(attention_maps, (W, H)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.add(torch.sqrt(weights), 1e-12)",
                            "Call"
                        ],
                        [
                            "torch.div(weights, torch.sum(weights, dim=1).unsqueeze(1)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_74": {
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feature1.reshape(B, N, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_19": {
                "input": {
                    "value": "feature_map1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(feature_map1, (N, D1, H * W))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(feature_map2, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_21": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(feature_map1, torch.transpose(feature_map2, 1, 2)) / (H * W)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(X, (N, D1 * D2))",
                            "Call"
                        ],
                        [
                            "torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_21": {
                "input": {
                    "value": "torch.abs(X) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_22": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(feature_map1, torch.transpose(feature_map2, 1, 2)) / (H * W)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(X, (N, D1 * D2))",
                            "Call"
                        ],
                        [
                            "torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_19": {
                "input": {
                    "value": "feature_map2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(feature_map2, (N, D2, H * W))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_21": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(feature_map1, torch.transpose(feature_map2, 1, 2)) / (H * W)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(X, (N, D1 * D2))",
                            "Call"
                        ],
                        [
                            "torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(attention_maps, (W, H)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.add(torch.sqrt(weights), 1e-12)",
                            "Call"
                        ],
                        [
                            "torch.div(weights, torch.sum(weights, dim=1).unsqueeze(1)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}