{
    "dataset.py": {
        "tensorflow": {
            "load_data_72": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "path": {
                    "value": "mnist.npz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_data_96": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "path": {
                    "value": "mnist.npz",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_50": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(x) for x in X]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "MNIST(x_train, y_train, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "MNIST(x_train, y_train, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "MNIST(x_test, y_test, transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "MNIST(x_test, y_test, transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "VBMF.py": {
        "torch": {
            "svd_201": {
                "variable": {
                    "value": "(U, s, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_230": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mul_233": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[:pos] / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - (L + M) * sigma2 / s[:pos] ** 2 + torch.sqrt((1 - (L + M) * sigma2 / s[:pos] ** 2) ** 2 - 4 * L * M * sigma2 ** 2 / s[:pos] ** 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "post[ma]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "post[mb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "post[sa2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "post[sb2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "post[cacb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "L",
                            "variable"
                        ],
                        [
                            "len(s)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_249": {
                "variable": {
                    "value": "post[ma][:pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d * delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_250": {
                "variable": {
                    "value": "post[mb][:pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_253": {
                "variable": {
                    "value": "post[cacb][:pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d * s[:pos] / (L * M)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_270": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z2 - torch.log(z2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_271": {
                "variable": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1 - tau_z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "term3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log((tau_z1 + 1) / z1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_258": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.multiply(s[:pos], 1 - np.multiply(sigma2 / (2 * s[:pos] ** 2), L + M + np.sqrt((M - L) ** 2 + 4 * s[:pos] ** 2 / cacb ** 2)))",
                            "Call"
                        ],
                        [
                            "np.multiply(s[:pos], 1 - np.multiply(sigma2 / (2 * s[:pos] ** 2), L + M + np.sqrt((M - L) ** 2 + 4 * s[:pos] ** 2 / cacb ** 2)))",
                            "Call"
                        ],
                        [
                            "torch.mul(s[:pos] / 2, 1 - (L + M) * sigma2 / s[:pos] ** 2 + torch.sqrt((1 - (L + M) * sigma2 / s[:pos] ** 2) ** 2 - 4 * L * M * sigma2 ** 2 / s[:pos] ** 4))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_272": {
                "input": {
                    "value": "(tau_z1 + 1) / z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "torch.log(tau_z1 / alpha + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_280": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s ** 2 / (M * sigma2)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_234": {
                "input": {
                    "value": "(1 - (L + M) * sigma2 / s[:pos] ** 2) ** 2 - 4 * L * M * sigma2 ** 2 / s[:pos] ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "M * d / L * s[:pos]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_256": {
                "input": {
                    "value": "M * np.log(tau + 1) + L * torch.log(tau / alpha + 1) - M * tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_270": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[x <= xubar]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_273": {
                "input": {
                    "value": "tau_z1 / alpha + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_283": {
                "input": {
                    "value": "tau(x, alpha) / alpha + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_286": {
                "input": {
                    "value": "(x - (1 + alpha)) ** 2 - 4 * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_215": {
                "input": {
                    "value": "s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_216": {
                "input": {
                    "value": "s[eH_ub + 1:] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_256": {
                "input": {
                    "value": "tau / alpha + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_137": {
                "variable": {
                    "value": "info_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_115": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[5, 10, 15]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': decomp_model.state_dict(), 'decom_method': 'tucker'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f'./decomposed_model/tucker_model_{args.model}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Event_45": {
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_137": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_148": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "c",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "batch_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_109": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pretrained_main.py": {
        "torch": {
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_115": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[5, 10, 15]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Event_45": {
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': decomp_model.state_dict(), 'decom_method': 'tucker'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f'./decomposed_model/tucker_model_{model_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tucker_decomposition.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "unfold_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "unfold_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.base.unfold(weights, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(unfold_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "unfold_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "unfold_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.base.unfold(weights, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(unfold_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "first_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "first.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "first.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "layer.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "core_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "core.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "core.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "layer.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "last_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "last.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "layer.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "last.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "core.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "first.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "variable": {
                    "value": "first_layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(first.copy())",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "first_layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "fc_a",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "core.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "core.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "fc_b",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "fc_b_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "last.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "fc_a_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "core.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*new_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "*new_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "wavelet_compress.py": {
        "torch": {
            "Conv2d_66": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "w_approx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w_approx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w_approx.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "layer.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasBias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if layer.bias is not None else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "w_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w_approx.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fswavedecn(layer.running_mean.data.numpy(), 'rbio6.8', levels=1).approx.shape",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "layer.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "layer.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "layer.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "new_layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fswavedecn(layer.running_mean.data.numpy(), 'rbio6.8', levels=1).approx.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "new_layer.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fswavedecn(layer.running_mean.data.numpy(), 'rbio6.8', levels=1).approx.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "first_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "V.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "V.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "second_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "U.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "U.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "V.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "S.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "U.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*new_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "b_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b_approx.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}