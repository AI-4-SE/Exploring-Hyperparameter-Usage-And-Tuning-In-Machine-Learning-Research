{
    "discor/agent.py": {
        "torch": {
            "SummaryWriter_45": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self._summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "discor/algorithm/base.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "discor/algorithm/discor.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "self._error_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._online_error_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "error_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "self._tau1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self._tau2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "imp_ws1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(1.0 - dones) * self._gamma * next_errs1 / self._tau1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "imp_ws2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(1.0 - dones) * self._gamma * next_errs2 / self._tau2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "err1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_errs1 - target_errs1).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "err2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_errs2 - target_errs2).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "discor/algorithm/sac.py": {
        "torch": {
            "Adam_44": {
                "variable": {
                    "value": "self._policy_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._policy_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "policy_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "self._q_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._online_q_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "q_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "self._log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "self._alpha_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self._log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "entropy_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state[None, ...].copy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state[None, ...].copy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_117": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._online_q_net(states, sampled_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_121": {
                "variable": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-qs - self._alpha * entropies",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "q1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_qs1 - target_qs).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_184": {
                "variable": {
                    "value": "q2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_qs2 - target_qs).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_187": {
                "variable": {
                    "value": "q1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_qs1 - target_qs).pow(2) * imp_ws1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "q2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(curr_qs2 - target_qs).pow(2) * imp_ws2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "self._log_alpha * (self._target_entropy - entropies)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_167": {
                "input": {
                    "value": "next_qs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._target_q_net(next_states, next_actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "discor/network.py": {
        "torch": {
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states, actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_89": {
                "variable": {
                    "value": "(means, log_stds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(states)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.net(states), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_stds, min=self.LOG_STD_MIN, max=self.LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.LOG_STD_MIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.LOG_STD_MAX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_95": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.net(states), 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_stds.exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normals.rsample()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "next_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_36": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "next_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units",
                            "variable"
                        ]
                    ]
                }
            },
            "load_39": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_102": {
                "input": {
                    "value": "1 - actions.pow(2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "input": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.net(states), 2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "discor/replay_buffer.py": {
        "torch": {
            "tensor_123": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._states[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._actions[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rewards[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._dones[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._next_states[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_113": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "discor/utils.py": {
        "torch": {}
    },
    "test.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}