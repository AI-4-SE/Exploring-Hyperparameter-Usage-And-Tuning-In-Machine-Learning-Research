{
    "src/agent.py": {
        "tensorflow": {
            "Variable_26": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "agn/epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.rec_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, encoder_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "self.sessions_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.sessions_input[:, 1:], tf.ones([batch_size, 1], dtype=tf.int32) * PAD_ID]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "self.aims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "rec_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_123": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_124": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_125": {
                "variable": {
                    "value": "(clipped_gradients, self.gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, self.params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_127": {
                "variable": {
                    "value": "self.update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_130": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "pad_step_number": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "agn/embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_items, num_embed_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "agn/embed",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_53": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[LSTMCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_55": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[GRUCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_60": {
                "variable": {
                    "value": "(self.encoder_output, self.encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiRNNCell([LSTMCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "MultiRNNCell([GRUCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_63": {
                "variable": {
                    "value": "tmp_dim_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), [batch_size, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, encoder_length, rec_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "tmp_dim_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(encoder_length), [1, encoder_length, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, rec_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "gather_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tmp_dim_1, tmp_dim_2, tf.expand_dims(self.rec_lists, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "ini_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(y_prob, gather_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, encoder_length, rec_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_82": {
                "variable": {
                    "value": "(_, self.index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ini_prob * self.rec_mask",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "top_k_84": {
                "variable": {
                    "value": "(_, self.metric_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ini_prob * self.rec_mask",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "FLAGS.metric + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.lstm_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 2, None, num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dynamic_rnn_94": {
                "variable": {
                    "value": "(self.encoder_output_predict, self.encoder_state_predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiRNNCell([LSTMCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "MultiRNNCell([GRUCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.ini_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "self.final_output_predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.encoder_output_predict[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_102": {
                "variable": {
                    "value": "(_, self.rec_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rec_logits[:, len(_START_VOCAB):]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "top_k_112": {
                "variable": {
                    "value": "(_, self.random_rec_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_max(self.rec_logits[:, len(_START_VOCAB):], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cumsum_43": {
                "x": {
                    "value": "tf.one_hot(self.sessions_length - 2, encoder_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "agn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "agn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "inp_g",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "(tf.nn.log_softmax(inp / 1.0) + g * alpha) * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_43": {
                "indices": {
                    "value": "self.sessions_length - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "encoder_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "tf.range(encoder_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, encoder_length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_prob, [batch_size, encoder_length, num_items]) * tf.concat([tf.zeros([batch_size, encoder_length, 2], dtype=tf.float32), tf.ones([batch_size, encoder_length, num_items - 2], dtype=tf.float32)], 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, encoder_length, num_items]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "[tf.zeros([batch_size, encoder_length, 2], dtype=tf.float32), tf.ones([batch_size, encoder_length, num_items - 2], dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_77": {
                "params": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_prob, [batch_size, encoder_length, num_items]) * tf.concat([tf.zeros([batch_size, encoder_length, 2], dtype=tf.float32), tf.ones([batch_size, encoder_length, num_items - 2], dtype=tf.float32)], 2)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tmp_dim_1, tmp_dim_2, tf.expand_dims(self.rec_lists, 3)], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "tf.reshape(self.reward, [-1]) * local_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_92": {
                "c": {
                    "value": "self.lstm_state[1, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "self.lstm_state[1, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_53": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_55": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_107": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_108": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(inp), 0.0001, 0.9999)",
                            "Call"
                        ],
                        [
                            "-tf.log(-tf.log(g))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "shape": {
                    "value": "[batch_size, encoder_length, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "shape": {
                    "value": "[batch_size, encoder_length, num_items - 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "logits": {
                    "value": "inp / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/discriminator.py": {
        "tensorflow": {
            "Variable_33": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dis/epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.rec_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.purchase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, encoder_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_62": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiRNNCell([LSTMCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "MultiRNNCell([GRUCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "dis/encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "self.preference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis/out2preference",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "self.candidate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.nn.embedding_lookup(self.embed, self.rec_lists)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis/rec2candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "self.pre_mul_can",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(self.preference, 2) * self.candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "self.max_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(tf.nn.softmax(self.pre_mul_can / 0.1), 3) * self.candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "self.aim_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(tf.one_hot(self.aims_idx, rec_length), 3) * self.candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.cast(self.label, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.cast(tf.greater(self.prob, 0.5), tf.int32), self.label), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_84": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_93": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_94": {
                "variable": {
                    "value": "(clipped_gradients, self.gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.decoder_loss, self.params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "self.update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_99": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pad_step_number": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dis/embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_items, num_embed_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dis/embed",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_57": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[LSTMCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_59": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[GRUCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "purchase_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "W_p",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wp",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "b_p",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bp",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_51": {
                "x": {
                    "value": "tf.one_hot(self.sessions_length - 2, encoder_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_67": {
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "self.max_embed * self.aim_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_81": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(self.label, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "tf.greater(self.prob, 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_51": {
                "indices": {
                    "value": "self.sessions_length - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "encoder_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "self.preference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "tf.nn.softmax(self.pre_mul_can / 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_72": {
                "input": {
                    "value": "tf.one_hot(self.aims_idx, rec_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_82": {
                "x": {
                    "value": "tf.cast(tf.greater(self.prob, 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_57": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_59": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "logits": {
                    "value": "self.pre_mul_can / 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "indices": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "rec_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "self.purchase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_82": {
                "x": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/environment.py": {
        "tensorflow": {
            "Variable_25": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "env/epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.rec_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.purchase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, encoder_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.sessions_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_46": {
                "variable": {
                    "value": "self.aims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.aims_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "rec_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_131": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_138": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_141": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_142": {
                "variable": {
                    "value": "(clipped_gradients, self.gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.decoder_loss, self.params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_148": {
                "variable": {
                    "value": "score_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.score_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_149": {
                "variable": {
                    "value": "(score_clipped_gradients, self.score_gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "score_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.score_loss, self.params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "pad_step_number": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "env/embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_items, num_embed_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "env/embed",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_48": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[LSTMCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_50": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[GRUCell(num_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_55": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiRNNCell([LSTMCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "MultiRNNCell([GRUCell(num_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.sessions_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "preference",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_embed_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pref_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "self.candidate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(self.embed, tf.expand_dims(self.rec_lists, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, encoder_length, rec_length, num_embed_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.expand_dims(preference, 2), self.candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_72": {
                "variable": {
                    "value": "(_, self.argmax_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "FLAGS.metric + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "aim_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(self.aims, 3) * self.candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "inf_preference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(encoder_output[:, -1, :], num_embed_units, name='pref_output')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "self.inf_candidate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(self.embed, tf.expand_dims(self.rec_lists, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, rec_length, num_embed_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "inf_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.expand_dims(inf_preference, 2), self.inf_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_108": {
                "variable": {
                    "value": "(_, self.inf_argmax_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inf_norm_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "FLAGS.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_109": {
                "variable": {
                    "value": "(_, self.inf_all_argmax_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inf_norm_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.shape(self.inf_norm_prob)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_118": {
                "variable": {
                    "value": "(_, self.inf_random_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_max(tf.log(self.inf_norm_prob + 1e-20), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "FLAGS.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_119": {
                "variable": {
                    "value": "(_, self.inf_all_random_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_max(tf.log(self.inf_norm_prob + 1e-20), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.shape(self.inf_norm_prob)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "inf_aim_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.reshape(tf.one_hot(self.inf_argmax_index[:, :, 0], rec_length), [batch_size, 1, rec_length, 1]), tf.float32) * self.inf_candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_42": {
                "x": {
                    "value": "tf.one_hot(self.sessions_length - 2, encoder_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "env",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "self.purchase_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.layers.dense(tf.multiply(tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer'), tf.layers.dense(tf.stop_gradient(aim_embed), num_units, name='purchase_aim')), 2, name='purchase_projection')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "env",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "inp_g",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "(tf.nn.log_softmax(inp / 1.0) + g * alpha) * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.inf_purchase_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "self.inf_purchase_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.layers.dense(tf.multiply(tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer'), tf.layers.dense(tf.stop_gradient(inf_aim_embed), num_units, name='purchase_aim')), 2, name='purchase_projection')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_42": {
                "indices": {
                    "value": "self.sessions_length - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "encoder_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_nd_62": {
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(self.rec_lists, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "x": {
                    "value": "tf.expand_dims(preference, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(tf.expand_dims(preference, 2), self.candidate), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "-self.aims * tf.log(self.norm_prob + 1e-20)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1), [-1, encoder_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1), [-1, encoder_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_96": {
                "inputs": {
                    "value": "encoder_output[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "num_embed_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pref_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_99": {
                "params": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(self.rec_lists, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_103": {
                "x": {
                    "value": "tf.expand_dims(inf_preference, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.inf_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "logits": {
                    "value": "inf_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(tf.expand_dims(inf_preference, 2), self.inf_candidate), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_36": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_48": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_50": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "preference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_output, num_embed_units, name='pref_output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "tf.reduce_sum(mul_prob, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "input": {
                    "value": "self.aims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "shape": {
                    "value": "[batch_size, encoder_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_82": {
                "inputs": {
                    "value": "tf.multiply(tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer'), tf.layers.dense(tf.stop_gradient(aim_embed), num_units, name='purchase_aim'))",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_85": {
                "x": {
                    "value": "tf.cast(self.purchase, tf.float32) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "5.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "encoder_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cumsum(tf.one_hot(self.sessions_length - 2, encoder_length), reverse=True, axis=1), [-1, encoder_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "self.rec_lists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "inf_preference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.layers.dense(encoder_output[:, -1, :], num_embed_units, name='pref_output'), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "input": {
                    "value": "tf.reduce_sum(inf_mul_prob, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(inp), 0.0001, 0.9999)",
                            "Call"
                        ],
                        [
                            "-tf.log(-tf.log(g))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_118": {
                "x": {
                    "value": "self.inf_norm_prob + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "self.inf_norm_prob + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "tf.reshape(tf.one_hot(self.inf_argmax_index[:, :, 0], rec_length), [batch_size, 1, rec_length, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_127": {
                "inputs": {
                    "value": "tf.multiply(tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer'), tf.layers.dense(tf.stop_gradient(inf_aim_embed), num_units, name='purchase_aim'))",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "mul_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits) * self.rec_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_73": {
                "x": {
                    "value": "self.norm_prob + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_82": {
                "x": {
                    "value": "tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.layers.dense(tf.stop_gradient(aim_embed), num_units, name='purchase_aim')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "-tf.one_hot(self.purchase, 2) * tf.log(self.purchase_prob + 1e-20)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "inf_mul_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(inf_logits) * self.rec_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "self.inf_norm_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_119": {
                "input": {
                    "value": "self.inf_norm_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "tf.one_hot(self.inf_argmax_index[:, :, 0], rec_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, rec_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "tf.layers.dense(tf.stop_gradient(encoder_output), num_units, name='purchase_layer')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.layers.dense(tf.stop_gradient(inf_aim_embed), num_units, name='purchase_aim')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_83": {
                "inputs": {
                    "value": "tf.stop_gradient(encoder_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_84": {
                "inputs": {
                    "value": "tf.stop_gradient(aim_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_aim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "self.purchase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "logits": {
                    "value": "inp / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_121": {
                "indices": {
                    "value": "self.inf_argmax_index[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "rec_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_128": {
                "inputs": {
                    "value": "tf.stop_gradient(encoder_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_129": {
                "inputs": {
                    "value": "tf.stop_gradient(inf_aim_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "purchase_aim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_83": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_84": {
                "input": {
                    "value": "aim_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(self.aims, 3) * self.candidate, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_85": {
                "x": {
                    "value": "self.purchase_prob + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_128": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_129": {
                "input": {
                    "value": "inf_aim_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.reshape(tf.one_hot(self.inf_argmax_index[:, :, 0], rec_length), [batch_size, 1, rec_length, 1]), tf.float32) * self.inf_candidate, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_85": {
                "indices": {
                    "value": "self.purchase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "tensorflow": {
            "ConfigProto_158": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_160": {
                "variable": {
                    "value": "env_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_161": {
                "variable": {
                    "value": "agn_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_162": {
                "variable": {
                    "value": "dis_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_163": {
                "variable": {
                    "value": "env_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "env_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_164": {
                "variable": {
                    "value": "agn_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "agn_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_165": {
                "variable": {
                    "value": "dis_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "dis_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_229": {
                "checkpoint_dir": {
                    "value": "FLAGS.agn_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_246": {
                "checkpoint_dir": {
                    "value": "FLAGS.env_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_231": {
                "checkpoint_dir": {
                    "value": "FLAGS.agn_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_263": {
                "checkpoint_dir": {
                    "value": "FLAGS.dis_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_248": {
                "checkpoint_dir": {
                    "value": "FLAGS.env_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_265": {
                "checkpoint_dir": {
                    "value": "FLAGS.dis_train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mdp.py": {
        "tensorflow": {
            "ConfigProto_128": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_130": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_131": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_139": {
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_152": {
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train'",
                            "Constant"
                        ]
                    ]
                }
            },
            "latest_checkpoint_141": {
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train'",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_154": {
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train'",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/output_projection.py": {
        "tensorflow": {
            "linear_6": {
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'decoder/output_projection'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_10": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.get_variable('weights', [num_units, num_items])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_items]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_13": {
                "variable": {
                    "value": "local_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.einsum('aij,kj->aik', outputs, weights) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "local_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "local_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "y_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(local_prob + 1e-18)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_items]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_20": {
                "variable": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.one_hot(local_labels, num_items)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "variable": {
                    "value": "total_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "local_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masks, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name if scope is None else scope",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_10": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units, num_items]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_18": {
                "x": {
                    "value": "local_prob + 1e-18",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_20": {
                "indices": {
                    "value": "local_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(targets, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_items",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "-labels_onehot * y_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_13": {
                "equation": {
                    "value": "aij,kj->aik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.get_variable('weights', [num_units, num_items]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "DEFINE_integer_6": {
                "name": {
                    "value": "units",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of each model layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_7": {
                "name": {
                    "value": "symbols",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "40000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of item list.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_8": {
                "name": {
                    "value": "embed_units",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Embedding units.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_9": {
                "name": {
                    "value": "layers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of layers in the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_10": {
                "name": {
                    "value": "action_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "num of recommendations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_11": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size to use during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_13": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_14": {
                "name": {
                    "value": "data_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Data name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_16": {
                "name": {
                    "value": "interact_data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./interact_data",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store interaction data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "agn_train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./train/agn_train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training directory for agent model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "env_train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./train/env_train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training directory for environment model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "dis_train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./train/dis_train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training directory for discriminator model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "metric",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "For the calculation of p@metric",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "agn_output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./agn_test_output.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file for agent model on the test set.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "env_output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./env_test_output.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file for environment model on the test set.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "pool_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of simulated data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "discount factor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}