{
    "experiments/ood_generalization/dataset.py": {
        "sklearn": {
            "train_test_split_163": {
                "variable": {
                    "value": "(train_idx, val_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(len(train_set))",
                    "type": "Call",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_set) - val_size",
                            "BinOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_123": {
                "variable": {
                    "value": "(t_nodes_idx, n_nodes_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(len(id))",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "novel_nodes_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_115": {
                "dataset": {
                    "value": "Subset(data, u_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bz",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "s_i == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Subset_115": {
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "variable"
                        ],
                        [
                            "test_dataset",
                            "variable"
                        ]
                    ]
                },
                "indices": {
                    "value": "u_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_user_split[g_i][s_i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pFedGP/class_splits.py": {
        "sklearn": {
            "AgglomerativeClustering_79": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ]
                    ]
                },
                "affinity": {
                    "value": "self.affinity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "linkage": {
                    "value": "self.linkage",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_117": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ]
                    ]
                },
                "n_init": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_146": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ],
                        [
                            "self.branches",
                            "Attribute"
                        ]
                    ]
                },
                "affinity": {
                    "value": "self.affinity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "linkage": {
                    "value": "self.linkage",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/backbone.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_9": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_kernels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_kernels * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "84",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/calibrate.py": {
        "torch": {
            "softmax_41": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(probs) / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/heterogeneous_class_dist/dataset.py": {
        "torch": {}
    },
    "experiments/heterogeneous_class_dist/trainer.py": {
        "torch": {
            "ModuleList_162": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_187": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_168": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_169": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_187": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__261": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/heterogeneous_class_dist/trainer_ip.py": {
        "torch": {
            "ModuleList_177": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "X_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((num_classes, args.num_inducing_points, args.embed_dim), device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_210": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "variable": {
                    "value": "X_bar_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_bar.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_249": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_183": {
                "*size": {
                    "value": "(num_classes, args.num_inducing_points, args.embed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_191": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_192": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_210": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__292": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/noisy_input/clients.py": {
        "torch": {
            "DataLoader_21": {
                "dataset": {
                    "value": "TensorDataset(torch.from_numpy(data['train']['data'].astype(np.float32) / 255.0), torch.from_numpy(data['train']['label']))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_33": {
                "dataset": {
                    "value": "TensorDataset(torch.from_numpy(data['val']['data'].astype(np.float32) / 255.0), torch.from_numpy(data['val']['label']))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_45": {
                "dataset": {
                    "value": "TensorDataset(torch.from_numpy(data['test']['data'].astype(np.float32) / 255.0), torch.from_numpy(data['test']['label']))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_22": {
                "*tensors": {
                    "value": "torch.from_numpy(data['train']['data'].astype(np.float32) / 255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_34": {
                "*tensors": {
                    "value": "torch.from_numpy(data['val']['data'].astype(np.float32) / 255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_46": {
                "*tensors": {
                    "value": "torch.from_numpy(data['test']['data'].astype(np.float32) / 255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "data['train']['data'].astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "data['train']['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "data['val']['data'].astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "data['val']['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "data['test']['data'].astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "data['test']['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/noisy_input/trainer.py": {
        "torch": {
            "ModuleList_161": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_194": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_186": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_223": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_167": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_168": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_186": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__260": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/noisy_input/trainer_ip.py": {
        "torch": {
            "ModuleList_177": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "X_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((num_classes, args.num_inducing_points, args.embed_dim), device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_209": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "variable": {
                    "value": "X_bar_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_bar.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_247": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_183": {
                "*size": {
                    "value": "(num_classes, args.num_inducing_points, args.embed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_191": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_192": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_209": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__291": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/ood_generalization/trainer.py": {
        "torch": {
            "ModuleList_171": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_204": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_195": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_157": {
                "variable": {
                    "value": "(client_labels, client_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label if i == 0 else torch.cat((all_labels, label))",
                            "IfExp"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_177": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_195": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__269": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "(all_labels, label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/ood_generalization/trainer_ip.py": {
        "torch": {
            "ModuleList_184": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "variable": {
                    "value": "X_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((num_classes, args.num_inducing_points, args.embed_dim), device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_225": {
                "variable": {
                    "value": "criteria",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_216": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "X_bar_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_bar.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "GPs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_166": {
                "variable": {
                    "value": "(client_labels, client_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label if i == 0 else torch.cat((all_labels, label))",
                            "IfExp"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_254": {
                "variable": {
                    "value": "params[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in label]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_190": {
                "*size": {
                    "value": "(num_classes, args.num_inducing_points, args.embed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(cuda=int(args.gpus) >= 0, gpus=args.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_198": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_199": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "[{'params': curr_X_bar}, {'params': network.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_216": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((Y, label), dim=0) if k > 0 else label",
                            "IfExp"
                        ],
                        [
                            "torch.cat((Y, clf_labels), dim=0) if k > 0 else clf_labels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "offset_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[label_map[l.item()] for l in Y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "(Y, clf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__298": {
                "parameters": {
                    "value": "curr_global_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "(all_labels, label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "(X, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "(Y, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pFedGP/Learner.py": {
        "torch": {
            "CrossEntropyLoss_14": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pFedGP/kernel_class.py": {
        "torch": {
            "normalize_18": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_19": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "variable"
                        ],
                        [
                            "F.normalize(x2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pFedGP/node.py": {
        "torch": {}
    },
    "pFedGP/pFedGP_compute.py": {
        "torch": {
            "MultivariateNormal_318": {
                "variable": {
                    "value": "p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_state.mu[M:, :].t().repeat(self.num_draws, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "L_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_safe_cholesky(Sigma_Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_292": {
                "loc": {
                    "value": "mu_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Ks.matmul(torch.cholesky_solve(Kmn, L_Q)).matmul(\u039b_inv).matmul(\u03a9_inv.matmul(kappa) - (MUn + Knm_Kmminv_mu)) + (mu_s - Ksm_Kmminv_mu)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "L_Sigma_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_safe_cholesky(Sigma_f)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pFedGP/pFedGP_full_data.py": {
        "torch": {}
    },
    "pFedGP/tree.py": {
        "torch": {
            "tensor_140": {
                "variable": {
                    "value": "node_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node.old_to_new[y.item()] for y in node_Y_orig]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "probs_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X_test.shape[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X_test.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X_test.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "node_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node.old_to_new[y.item()] for y in node_Y_orig]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_301": {
                "variable": {
                    "value": "probs_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X_test.shape[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X_test.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X_test.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_425": {
                "variable": {
                    "value": "probs_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X_test.shape[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X_test.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X_test.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_70": {
                "variable": {
                    "value": "(node_classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(root_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_210": {
                "variable": {
                    "value": "(node_classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(root_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_379": {
                "variable": {
                    "value": "(node_classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(root_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(probs, 1 - probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "nodeXtrain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_X, nodeXbar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "nodeYtrain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_Y, node.Y_bar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(probs, 1 - probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(probs, 1 - probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_70": {
                "input": {
                    "value": "root_Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_210": {
                "input": {
                    "value": "root_Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_333": {
                "variable": {
                    "value": "(node_labels, node_label_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "node_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([node.old_to_new[y.item()] for y in node_Y_orig], dtype=Y.dtype).to(Y.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([node.old_to_new[y.item()] for y in node_Y_orig], dtype=Y.dtype).to(Y.device)",
                            "Call"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_379": {
                "input": {
                    "value": "root_Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "num_Xbars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_bar_root.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "num_Xbars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_bar_root.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "Y.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "(Y_bar_root, Y_bar_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_343": {
                "input": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((probs, 1 - probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((probs, 1 - probs), dim=1)",
                            "Call"
                        ],
                        [
                            "class_probs / torch.sum(class_probs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((probs, 1 - probs), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_337": {
                "input": {
                    "value": "node.Y_bar == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_338": {
                "input": {
                    "value": "node.Y_bar == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "stack_68": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_ == Y for y_ in classes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "y_output_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(y.shape[0], y.max().type(torch.IntTensor) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.double",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "y_output_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(y.shape[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_hat.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "lbls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lbls_vs_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "lbls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lbls_vs_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "temps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sort_282": {
                "variable": {
                    "value": "(client_labels, client_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unique(all_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cuda: + gpus if torch.cuda.is_available() and cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_175": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cholesky_215": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "upper": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "y_output_onehot * torch.log(y_hat + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(torch.tensor([N]).to(y.device), reminder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_218": {
                "variable": {
                    "value": "isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_282": {
                "input": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label if i == 0 else torch.cat((all_labels, label))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_160": {
                "input": {
                    "value": "y_output_onehot * torch.log(y_hat + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "(N, reminder)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "(all_labels, label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_161": {
                "input": {
                    "value": "y_hat + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_176": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_233": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Aprime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.clone()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cumsum_180": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_160": {
                "input": {
                    "value": "y_hat + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}