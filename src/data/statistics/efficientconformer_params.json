{
    "functions.py": {
        "torch": {
            "DataLoader_172": {
                "variable": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "training_dataset(training_params['training_dataset_path'], training_params, tokenizer_params, training_split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset_train, batch_size=training_params['batch_size'], shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, drop_last=True, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "training_params['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_train, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_eval, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_168": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "training_dataset(training_params['training_dataset_path'], training_params, tokenizer_params, training_split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset_train, batch_size=training_params['batch_size'], shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, drop_last=True, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "dataset_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_eval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "evaluation_dataset(training_params['evaluation_dataset_path'], training_params, tokenizer_params, evaluation_split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset_eval, batch_size=args.batch_size_eval, shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_train, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_eval, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "evaluation_dataset(training_params['evaluation_dataset_path'], training_params, tokenizer_params, split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset, batch_size=args.batch_size_eval, shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_train, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_eval, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, num_replicas=args.world_size, rank=args.rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_216": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_eval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "evaluation_dataset(training_params['evaluation_dataset_path'], training_params, tokenizer_params, evaluation_split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset_eval, batch_size=args.batch_size_eval, shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_196": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "evaluation_dataset(training_params['evaluation_dataset_path'], training_params, tokenizer_params, split, args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(dataset, batch_size=args.batch_size_eval, shuffle=not args.distributed, num_workers=args.num_workers, collate_fn=collate_fn_pad, sampler=sampler, pin_memory=False)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.rank) if torch.cuda.is_available() and (not args.cpu) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_34": {
                "device": {
                    "value": "args.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/activations.py": {
        "torch": {}
    },
    "models/attentions.py": {
        "torch": {
            "pad_119": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(Q, (0, 0, 0, padding_Q), value=0)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "Q[:, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "Q[:, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q.reshape(batch_size, -1, self.kernel_size // self.stride, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ],
                        [
                            "Q[:, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "Q[:, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "self.query_layer(Q)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, padding_Q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_120": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(K, (0, 0, 0, padding_KV), value=0)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['K'], K], dim=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['K'][:, hidden['K'].size(1) % self.group_size:], K], dim=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['K'], K], dim=1)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.key_layer(K)",
                            "Call"
                        ],
                        [
                            "K.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, padding_KV)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_121": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(V, (0, 0, 0, padding_KV), value=0)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['V'], V], dim=1)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['V'][:, hidden['V'].size(1) % self.group_size:], V], dim=1)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden['V'], V], dim=1)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.num_heads, self.dim_head).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.value_layer(V)",
                            "Call"
                        ],
                        [
                            "V.reshape(batch_size, -1, self.kernel_size, self.num_heads, self.dim_head).transpose(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, padding_KV)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_471": {
                "variable": {
                    "value": "self.pos_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_475": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dim_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_476": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dim_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1177": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_1178": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1178": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1179": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1179": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1213": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * max_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_1216": {
                "variable": {
                    "value": "pos_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1217": {
                "variable": {
                    "value": "pos_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "-max_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1218": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_left, pos_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1218": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1272": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * max_len - group_size % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_1275": {
                "variable": {
                    "value": "pos_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "group_size % 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1276": {
                "variable": {
                    "value": "pos_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "-max_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1277": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_left, pos_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1277": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_512": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_518": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(seq_length2 - seq_length1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_533": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_539": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, seq_length2 - seq_length1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['K'], K]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_578": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['V'], V]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "Kh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['K'], K]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "Vh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['V'], V]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_659": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['K'][:, hidden['K'].size(1) % self.group_size:], K]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_660": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['V'][:, hidden['V'].size(1) % self.group_size:], V]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_769": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_787": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_793": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_844": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_904": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, self.stride - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_910": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(seq_length2 - self.stride * seq_length1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_925": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_931": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, seq_length2 - seq_length1 * self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_953": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['K'], K]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_954": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden['V'], V]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1055": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, self.stride - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1073": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1079": {
                "variable": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(2, 3)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "Q.matmul(K.transpose(3, 4)) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, 1 + seq_length1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, 2 * self.kernel_size ** 2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(seq_length2 - self.stride * seq_length1, 0), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, seq_length2 - seq_length1 * self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, num_heads, seq_length1 + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :seq_length1, seq_length1 * self.stride - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(1, self.stride - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride, seq_length2)",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.stride), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride * (2 * self.kernel_size - 1 + self.stride))",
                            "Call"
                        ],
                        [
                            "F.pad(att_scores, pad=(0, self.kernel_size - 1), value=0)",
                            "Call"
                        ],
                        [
                            "att_scores.reshape(batch_size, -1, self.num_heads, self.kernel_size // self.stride + 1, seq_length2)",
                            "Call"
                        ],
                        [
                            "att_scores[:, :, :, :self.kernel_size // self.stride, self.kernel_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "(att_scores_K + att_scores_E) / K.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "att_scores.float() - mask.float() * 1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1134": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(mask, pad=(0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, pad=(0, padding_Q, 0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "F.pad(Q.new_zeros(batch_size, 1, 1, seq_len_KV), pad=(0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.group_size, ::self.group_size]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :, ::self.group_size, ::self.group_size]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "x_len.new_ones(x_len.size(0), seq_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_KV)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(mask, pad=(0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, pad=(0, padding_Q, 0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "F.pad(Q.new_zeros(batch_size, 1, 1, seq_len_KV), pad=(0, padding_KV), value=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.group_size, ::self.group_size]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :, ::self.group_size, ::self.group_size]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=1)",
                            "Call"
                        ],
                        [
                            "mask[:, :, :, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "x_len.new_ones(x_len.size(0), seq_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_Q, 0, padding_KV)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q.new_zeros(batch_size, 1, 1, seq_len_KV)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padding_KV)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1221": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1221": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1280": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1280": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/blocks.py": {
        "torch": {
            "LayerNorm_96": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "Transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "Transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_101": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "att_stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "Transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool1d_112": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_stride",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/decoders.py": {
        "torch": {
            "Embedding_81": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "params['dim_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "params['Pdrop']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerBlock(dim_model=params['dim_model'], ff_ratio=params['ff_ratio'], num_heads=params['num_heads'], Pdrop=params['Pdrop'], max_pos_encoding=params['max_pos_encoding'], relative_pos_enc=params['relative_pos_enc'], causal=True) for block_id in range(params['num_blocks'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_145": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "params['dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "params['Pdrop']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConformerBlock(dim_model=params['dim_model'], dim_expand=params['dim_model'], ff_ratio=params['ff_ratio'], num_heads=params['num_heads'], kernel_size=params['kernel_size'], att_group_size=1, att_kernel_size=None, Pdrop=params['Pdrop'], relative_pos_enc=params['relative_pos_enc'], max_pos_encoding=params['max_pos_encoding'], conv_stride=1, att_stride=1, causal=True) for block_id in range(params['num_blocks'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_56": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(y, y_len.cpu(), batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "self.dropout(y)",
                            "Call"
                        ],
                        [
                            "y + self.pos_enc(y.size(0), y.size(1))",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, y], axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "self.dropout(y)",
                            "Call"
                        ],
                        [
                            "y + self.pos_enc(y.size(0), y.size(1))",
                            "BinOp"
                        ],
                        [
                            "y[:, -1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "y_len.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_67": {
                "variable": {
                    "value": "(y, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(y, y_len.cpu(), batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "self.dropout(y)",
                            "Call"
                        ],
                        [
                            "y + self.pos_enc(y.size(0), y.size(1))",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, y], axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "self.dropout(y)",
                            "Call"
                        ],
                        [
                            "y + self.pos_enc(y.size(0), y.size(1))",
                            "BinOp"
                        ],
                        [
                            "y[:, -1:]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/encoders.py": {
        "torch": {
            "Linear_71": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params['subsampling_filters'][-1] * params['n_mels'] // 2 ** params['subsampling_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['dim_model'][0] if isinstance(params['dim_model'], list) else params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "params['Pdrop']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConformerBlock(dim_model=params['dim_model'][(block_id > torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['dim_model'], list) else params['dim_model'], dim_expand=params['dim_model'][(block_id >= torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['dim_model'], list) else params['dim_model'], ff_ratio=params['ff_ratio'], num_heads=params['num_heads'][(block_id > torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['num_heads'], list) else params['num_heads'], kernel_size=params['kernel_size'][(block_id >= torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['kernel_size'], list) else params['kernel_size'], att_group_size=params['att_group_size'][(block_id > torch.tensor(params.get('strided_blocks', []))).sum()] if isinstance(params.get('att_group_size', 1), list) else params.get('att_group_size', 1), att_kernel_size=params['att_kernel_size'][(block_id > torch.tensor(params.get('strided_layers', []))).sum()] if isinstance(params.get('att_kernel_size', None), list) else params.get('att_kernel_size', None), linear_att=params.get('linear_att', False), Pdrop=params['Pdrop'], relative_pos_enc=params['relative_pos_enc'], max_pos_encoding=params['max_pos_encoding'] // params.get('stride', 2) ** int((block_id > torch.tensor(params.get('strided_blocks', []))).sum()), conv_stride=(params['conv_stride'][(block_id > torch.tensor(params.get('strided_blocks', []))).sum()] if isinstance(params['conv_stride'], list) else params['conv_stride']) if block_id in params.get('strided_blocks', []) else 1, att_stride=(params['att_stride'][(block_id > torch.tensor(params.get('strided_blocks', []))).sum()] if isinstance(params['att_stride'], list) else params['att_stride']) if block_id in params.get('strided_blocks', []) else 1, causal=params.get('causal', False)) for block_id in range(params['num_blocks'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "params['dim_model'][(block_id >= torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['dim_model'], list) else params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['dim_model'][(block_id >= torch.tensor(params.get('expand_blocks', []))).sum()] if isinstance(params['dim_model'], list) else params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "div_140": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "block.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_207": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "block.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "params.get('strided_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "params.get('strided_layers', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "params.get('strided_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "params.get('strided_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "params.get('strided_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "params.get('expand_blocks', [])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/joint_networks.py": {
        "torch": {
            "Identity_58": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_59": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_72": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_78": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "normal_51": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_116": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_164": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_289": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1d(in_channels, in_channels, kernel_size, padding=padding, groups=in_channels, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_67": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_padding(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._flat_weights",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_136": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_padding(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._flat_weights",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_182": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_padding(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._flat_weights",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_sizes[0]",
                            "Subscript"
                        ],
                        [
                            "int(max_batch_size)",
                            "Call"
                        ],
                        [
                            "input.size(0) if self.batch_first else input.size(1)",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_263": {
                "variable": {
                    "value": "output_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "result[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "sorted_indices": {
                    "value": "sorted_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "unsorted_indices": {
                    "value": "unsorted_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "embedding_305": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_padding(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._flat_weights",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_55": {
                "tensor": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad1d_100": {
                "variable": {
                    "value": "self.pre_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "((kernel_size - 1) // 2, (kernel_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_120": {
                "tensor": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_168": {
                "tensor": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "input": {
                    "value": "F.pad(input, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._flat_weights",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight + self.vn_std * self.noise",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_293": {
                "tensor": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_334": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConstantPad1d_102": {
                "variable": {
                    "value": "self.pre_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_181": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pre_padding(input)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_208": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self._flat_weights[i].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self._flat_weights[i].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._flat_weights[i].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_209": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "self._flat_weights[i + 1].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self._flat_weights[i + 1].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._flat_weights[i + 1].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_214": {
                "tensor": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.noises",
                            "Attribute"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/lm.py": {
        "torch": {
            "Linear_47": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lm_params['dim_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tokenizer_params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x, pad=(1, 0, 0, 0), value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "CTCLoss_54": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "blank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CTCLoss_79": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "blank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "input": {
                    "value": "outputs_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_94": {
                "input": {
                    "value": "outputs_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_66": {
                "input": {
                    "value": "outputs_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "GradScaler_179": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "mixed_precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_364": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(training_params['beta1'], training_params['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "training_params['eps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "training_params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SummaryWriter_193": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "callback_path + 'logs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_349": {
                "obj": {
                    "value": "{'model_state_dict': self.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict() if save_optimizer else None, 'model_step': self.scheduler.model_step, 'tokenizer': self.tokenizer, 'is_distributed': self.is_distributed or self.is_parallel}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "training_params['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "training_params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_550": {
                "enabled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "profile_614": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "profile_663": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "profile_715": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_239": {
                "enabled": {
                    "value": "mixed_precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model_ctc.py": {
        "torch": {
            "Linear_49": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_params['dim_model'][-1] if isinstance(encoder_params['dim_model'], list) else encoder_params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tokenizer_params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_74": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_75": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_params['dim_model'][-1] if isinstance(encoder_params['dim_model'], list) else encoder_params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tokenizer_params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_s2s.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_params['dim_model'][-1] if isinstance(encoder_params['dim_model'], list) else encoder_params['dim_model']",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tokenizer_params['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y, pad=(1, 0, 0, 0), value=0)",
                            "Call"
                        ],
                        [
                            "self.decoder(x, y)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_95": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_96": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_97": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_103": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "ModuleList_183": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv1d(in_dim if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, stride=2, padding=(kernel_size - 1) // 2), nn.BatchNorm1d(filters[layer_id]) if norm == 'batch' else nn.LayerNorm(filters[layer_id]) if norm == 'layer' else nn.Identity(), nn.ReLU() if act == 'relu' else Swish() if act == 'swish' else nn.Identity()) for layer_id in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, stride=2, padding=(kernel_size - 1) // 2), nn.BatchNorm2d(filters[layer_id]) if norm == 'batch' else nn.LayerNorm(filters[layer_id]) if norm == 'layer' else nn.Identity(), nn.ReLU() if act == 'relu' else Swish() if act == 'swish' else nn.Identity()) for layer_id in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_276": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, padding=(kernel_size - 1) // 2), nn.MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), nn.BatchNorm2d(filters[layer_id]) if norm == 'batch' else nn.LayerNorm(filters[layer_id]) if norm == 'layer' else nn.Identity(), nn.ReLU() if act == 'relu' else Swish() if act == 'swish' else nn.Identity()) for layer_id in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_326": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, padding=(kernel_size - 1) // 2), nn.BatchNorm2d(filters[layer_id]) if norm == 'batch' else nn.LayerNorm(filters[layer_id]) if norm == 'layer' else nn.Identity(), nn.ReLU() if act == 'relu' else Swish() if act == 'swish' else nn.Identity(), nn.Conv2d(filters[layer_id], filters[layer_id], kernel_size, padding=(kernel_size - 1) // 2), nn.BatchNorm2d(filters[layer_id]) if norm == 'batch' else nn.LayerNorm(filters[layer_id]) if norm == 'layer' else nn.Identity(), nn.ReLU() if act == 'relu' else Swish() if act == 'swish' else nn.Identity(), nn.MaxPool2d(kernel_size=(2, 2), stride=(2, 2))) for layer_id in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LayerNorm(dim_model, eps=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_424": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_466": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "Pdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_511": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LayerNorm(dim_model, eps=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_537": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DepthwiseSeparableConv1d(dim_in if layer_id == 0 else dim_out, dim_out, kernel_size, stride if layer_id == num_layers - 1 else 1, causal) for layer_id in range(num_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_574": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ContextNetBlock(num_layers=1 if block_id == 0 else 5, dim_in=n_mels if block_id == 0 else dim_model, dim_out=dim_model, kernel_size=kernel_size, stride=2 if block_id in [3, 7] else 1, causal=causal, se_ratio=None if block_id == 0 else 8, residual=False if block_id == 0 else True) for block_id in range(8)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_624": {
                "variable": {
                    "value": "self.inner_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_350": {
                "variable": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(x_len, self.hop_length, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len, 2, rounding_mode='floor')",
                            "Call"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNorm_386": {
                "normalized_shape": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_391": {
                "p": {
                    "value": "Pdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_512": {
                "normalized_shape": {
                    "value": "dim_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_517": {
                "num_features": {
                    "value": "dim_expand",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_521": {
                "p": {
                    "value": "Pdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "*args": {
                    "value": "Conv1d(dim_in, dim_out, kernel_size=1, stride=stride, groups=1, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_100": {
                "input": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(x_len, self.hop_length, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len, 2, rounding_mode='floor')",
                            "Call"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ],
                        [
                            "torch.div(x_len - 1, 2, rounding_mode='floor') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "nn.Conv1d(in_dim if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, stride=2, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "*args": {
                    "value": "nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, stride=2, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "*args": {
                    "value": "nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "*args": {
                    "value": "nn.Conv2d(1 if layer_id == 0 else filters[layer_id - 1], filters[layer_id], kernel_size, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_389": {
                "p": {
                    "value": "Pdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_547": {
                "num_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "div_592": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_593": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_184": {
                "in_channels": {
                    "value": "in_dim if layer_id == 0 else filters[layer_id - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_197": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "1 if layer_id == 0 else filters[layer_id - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_243": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "1 if layer_id == 0 else filters[layer_id - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_278": {
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_294": {
                "input": {
                    "value": "x_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_328": {
                "in_channels": {
                    "value": "1 if layer_id == 0 else filters[layer_id - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "in_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_336": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_185": {
                "num_features": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_228": {
                "num_features": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_279": {
                "num_features": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_329": {
                "num_features": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_333": {
                "num_features": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_185": {
                "normalized_shape": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "normalized_shape": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_279": {
                "normalized_shape": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_329": {
                "normalized_shape": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_333": {
                "normalized_shape": {
                    "value": "filters[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/transducer.py": {
        "torch": {
            "pad_97": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y, pad=(1, 0, 0, 0), value=0)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(1, 1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([y, pred.unsqueeze(0)], axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.ones((1, 1), device=x.device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_112": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_114": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_115": {
                "variable": {
                    "value": "self.joint_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.joint_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_120": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_121": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "self.joint_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.joint_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_212": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_276": {
                "variable": {
                    "value": "(topk_logP, topk_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits.softmax(dim=-1).log()",
                            "Call"
                        ],
                        [
                            "logP + self.lm_weight * logP_lm",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, pred.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "randint_76": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.__len__()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_43": {
                "f": {
                    "value": "self.names[i].split('.flac')[0].split('_')[0] + '.' + self.vocab_type + '_' + self.vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "self.names[i].split('.flac')[0].split('_')[0] + '.' + self.vocab_type + '_' + self.vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "name.replace('flac', self.vocab_type + '_' + self.vocab_size + '_len')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/preprocessing.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "data_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(d) for d in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_38": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[item[0].squeeze() for item in sorted_batch]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(data, batch_first=True, padding_value=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "target_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t.size(0) for t in target]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_43": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[item[1] for item in sorted_batch]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(target, batch_first=True, padding_value=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sorted_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(batch, key=lambda x: x[0].shape[1], reverse=True)",
                            "Call"
                        ],
                        [
                            "sorted(batch, key=lambda x: x[0].size(0), reverse=True)",
                            "Call"
                        ],
                        [
                            "[item[0] for item in sorted_batch]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t.size(0) for t in sorted_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_58": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat([item, item.new_zeros(1)]) for item in sorted_batch]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(y, batch_first=True, padding_value=-1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(tokenizer.encode(sentence))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "label_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "audio_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchaudio.load(label_path.split('.')[0] + '.flac')[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "label_path.split('.')[0] + '.flac_len'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "label_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.size(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "label_path + '_len'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[item, item.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}