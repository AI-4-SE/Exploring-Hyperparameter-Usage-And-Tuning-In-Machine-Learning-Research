{
    "ae_bn.py": {
        "torch": {
            "Conv1d_8": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_33": {
                "variable": {
                    "value": "log_pred_target",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "possible_values": [
                        [
                            "self.logsoftmax(quant_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_wav_gather",
                    "possible_values": [
                        [
                            "target_wav.long().unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_24": {
                "data": {
                    "value": "norm_gamma",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "abs_38": {
                "input": {
                    "value": "ze_norm - self.one",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "autoencoder_model.py": {
        "torch": {
            "tensor_136": {
                "variable": {
                    "value": "self.trim_dec_in",
                    "possible_values": []
                },
                "data": {
                    "value": "[di.sub[0] - ei.sub[0], di.sub[1] - ei.sub[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "self.decoder.trim_ups_out",
                    "possible_values": []
                },
                "data": {
                    "value": "[di.sub[0] - uo.sub[0], di.sub[1] - uo.sub[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "self.trim_dec_out",
                    "possible_values": []
                },
                "data": {
                    "value": "[do.sub[0] - di.sub[0], do.sub[1] - di.sub[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "bn.emb[...]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "km",
                    "possible_values": []
                }
            },
            "grad_253": {
                "variable": {
                    "value": "(mel_grad, bn_grad)",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "self.objective(pred, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "ag_inputs",
                    "possible_values": [
                        [
                            "(vbatch.mel_enc_input, self.encoding_bn)",
                            "Tuple"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "chassis.py": {
        "torch": {
            "stack_39": {
                "tensors": {
                    "value": "vlist",
                    "possible_values": []
                }
            },
            "sum_39": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "vlist",
                    "possible_values": []
                }
            },
            "mean_42": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Softmax_90": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_262": {
                "variable": {
                    "value": "(max_val, max_ind)",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_263": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input": {
                    "value": "max_val",
                    "possible_values": []
                }
            },
            "gather_268": {
                "variable": {
                    "value": "target_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "self.target.long().unsqueeze(1)",
                    "possible_values": []
                }
            },
            "mean_269": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input": {
                    "value": "target_probs",
                    "possible_values": [
                        [
                            "t.gather(self.probs, 1, self.target.long().unsqueeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "script_317": {
                "variable": {
                    "value": "dc",
                    "possible_values": []
                },
                "obj": {
                    "value": "DataContainer({'mel': mel, 'wav': wav, 'voice': voice_idx, 'jitter': jitter_idx})",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "norm_182": {
                "input": {
                    "value": "c - np[1].data",
                    "possible_values": []
                }
            }
        }
    },
    "checkpoint.py": {
        "torch": {
            "get_rng_state_73": {
                "variable": {
                    "value": "self.torch_rng_state",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "self.optim",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_26": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "hps.random_seed",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "self.optim",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "hps.learning_rate_rates[0]",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.optim",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_rng_state_all_75": {
                "variable": {
                    "value": "self.torch_cuda_rng_states",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_rng_state_119": {
                "new_state": {
                    "value": "self.torch_rng_state",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_84": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "get_rng_state_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'hps': self.hps, 'epoch': epoch, 'step': step, 'optim_step': self.optim_step, 'model_state_dict': mstate_dict, 'optim': ostate, 'rand_state': t.get_rng_state(), 'cuda_rand_states': t.cuda.get_rng_state_all() if t.cuda.is_available() else None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_rng_state_126": {
                "variable": {
                    "value": "ndiff",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ne_126": {
                "variable": {
                    "value": "ndiff",
                    "possible_values": []
                },
                "input": {
                    "value": "self.torch_cuda_rng_states[0]",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "ndiff",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_rng_state_all_95": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_rng_state_125": {
                "new_state": {
                    "value": "self.torch_cuda_rng_states[0]",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "tensor_227": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[-1][1:]",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "wav",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.from_numpy(d[0]) for d in data]",
                    "possible_values": []
                }
            },
            "stack_230": {
                "variable": {
                    "value": "mel",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.from_numpy(self.mfcc(d[0])) for d in data]",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "voice",
                    "possible_values": []
                },
                "data": {
                    "value": "[d[1] for d in data]",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "jitter",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.from_numpy(self.jitter(mel.size()[2])) for _ in range(len(data))]",
                    "possible_values": []
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "self.loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.sampler",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "hps.n_loader_workers",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hps.n_batch",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_collate_fn",
                    "possible_values": [
                        [
                            "Collate(mfcc_func, jitter_func, train_mode=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_270": {
                "variable": {
                    "value": "self.sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "self.loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.sampler",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_collate_fn",
                    "possible_values": [
                        [
                            "Collate(mfcc_func, jitter_func, train_mode=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_99": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_103": {
                "variable": {
                    "value": "perms",
                    "possible_values": []
                },
                "n": {
                    "value": "len(vals)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "t.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "d[0]",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "ndarray": {
                    "value": "self.mfcc(d[0])",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "self.jitter(mel.size()[2])",
                    "possible_values": []
                }
            }
        }
    },
    "grad_analysis.py": {
        "torch": {}
    },
    "mfcc_inverter.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "self.trim_dec_in",
                    "possible_values": []
                },
                "data": {
                    "value": "[di.sub[0] - wi.sub[0], di.sub[1] - wi.sub[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.trim_dec_out",
                    "possible_values": []
                },
                "data": {
                    "value": "[end_gr.sub[0] - wi.sub[0], end_gr.sub[1] - wi.sub[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "self.wavenet.trim_ups_out",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, beg_grcc_vc.in_len()]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "grad_103": {
                "variable": {
                    "value": "(mel_grad,)",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "self.objective(pred, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "ag_inputs",
                    "possible_values": [
                        [
                            "mel",
                            "Name"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netmisc.py": {
        "torch": {}
    },
    "test.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "script_51": {
                "variable": {
                    "value": "model_scr",
                    "possible_values": []
                },
                "obj": {
                    "value": "chs.state.model.wavenet",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "_hps.random_seed",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "tensor_83": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "data": {
                    "value": "float(n_quanta - 1)",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "mu",
                    "possible_values": []
                },
                "data": {
                    "value": "float(n_quanta - 1)",
                    "possible_values": []
                },
                "device": {
                    "value": "quant.device",
                    "possible_values": []
                }
            },
            "where_104": {
                "variable": {
                    "value": "lv",
                    "possible_values": []
                },
                "condition": {
                    "value": "n == 0",
                    "possible_values": []
                },
                "x": {
                    "value": "n.new_zeros(n.size())",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.log2(n)",
                    "possible_values": []
                }
            },
            "index_select_167": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "index": {
                    "value": "query.flatten()",
                    "possible_values": []
                }
            },
            "log1p_84": {
                "input": {
                    "value": "mu * torch.abs(x)",
                    "possible_values": []
                }
            },
            "log2_104": {
                "input": {
                    "value": "n",
                    "possible_values": [
                        [
                            "ten / s",
                            "BinOp"
                        ],
                        [
                            "ten",
                            "Name"
                        ]
                    ]
                }
            },
            "sign_84": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sign(a) * ((1 + mu) ** np.fabs(a) - 1) * inv_mu",
                            "BinOp"
                        ],
                        [
                            "torch.sign(a) * ((1 + mu) ** torch.abs(a) - 1) * inv_mu",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(input, dim, query.flatten())",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_95": {
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "(2 * qf - 1) * inv_mu - 1",
                            "BinOp"
                        ],
                        [
                            "(2 * qf - 1) * inv_mu - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_84": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sign(a) * ((1 + mu) ** np.fabs(a) - 1) * inv_mu",
                            "BinOp"
                        ],
                        [
                            "torch.sign(a) * ((1 + mu) ** torch.abs(a) - 1) * inv_mu",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(input, dim, query.flatten())",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_95": {
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "(2 * qf - 1) * inv_mu - 1",
                            "BinOp"
                        ],
                        [
                            "(2 * qf - 1) * inv_mu - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "vae_bn.py": {
        "torch": {
            "Conv1d_12": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Tanh_13": {
                "variable": {
                    "value": "self.tanh",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "split_38": {
                "variable": {
                    "value": "(mu, log_sigma_sq)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lin",
                    "possible_values": [
                        [
                            "self.linear(z)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.n_out_chan",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_39": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_sigma_sq",
                    "possible_values": []
                }
            },
            "randn_like_51": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "mu.repeat(L, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck.mu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_57": {
                "variable": {
                    "value": "self.sigma_sq",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * log_sigma_sq)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "LogSoftmax_70": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_93": {
                "variable": {
                    "value": "log_sigma_sq",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_sq",
                    "possible_values": [
                        [
                            "sigma_sq.repeat(L, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck.sigma_sq",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gather_105": {
                "variable": {
                    "value": "log_pred_target",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "possible_values": [
                        [
                            "self.logsoftmax(quant_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_wav_aug",
                    "possible_values": [
                        [
                            "target_wav.repeat(L, 1).unsqueeze(1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_106": {
                "variable": {
                    "value": "log_pred_target_avg",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred_target",
                    "possible_values": [
                        [
                            "torch.gather(log_pred, 1, target_wav_aug)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "free_nats",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "channel_terms",
                    "possible_values": [
                        [
                            "1.0 + log_sigma_sq - mu_sq - sigma_sq",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_116": {
                "input": {
                    "value": "kl_div_loss",
                    "possible_values": [
                        [
                            "-neg_kl_div_gauss",
                            "UnaryOp"
                        ]
                    ]
                },
                "min": {
                    "value": "self.free_nats",
                    "possible_values": []
                }
            }
        }
    },
    "vq_bn.py": {
        "torch": {
            "Conv1d_13": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.d",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.emb",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(self.k, self.d)",
                    "possible_values": []
                }
            },
            "LogSoftmax_67": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_83": {
                "variable": {
                    "value": "log_pred_target",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "possible_values": [
                        [
                            "self.logsoftmax(quant_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_wav.long().unsqueeze(1)",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "empty_20": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d",
                    "possible_values": []
                }
            }
        }
    },
    "vqema_bn.py": {
        "torch": {
            "Conv1d_92": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.d",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LogSoftmax_229": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_240": {
                "variable": {
                    "value": "log_pred_target",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "possible_values": [
                        [
                            "self.logsoftmax(quant_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_wav.long().unsqueeze(1)",
                    "possible_values": []
                }
            },
            "empty_96": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "empty_106": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d",
                    "possible_values": []
                }
            },
            "empty_107": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "empty_108": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d",
                    "possible_values": []
                }
            },
            "empty_109": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "self.k",
                    "possible_values": []
                }
            }
        }
    },
    "wave_encoder.py": {
        "torch": {
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in_chan",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out_chan",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_sz",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.net",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[l_off, r_off]",
                    "possible_values": []
                }
            }
        }
    },
    "wavenet.py": {
        "torch": {
            "Conv1d_25": {
                "variable": {
                    "value": "self.conv_signal",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hps.n_res",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "hps.filter_sz",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dil",
                    "possible_values": [
                        [
                            "2 ** bl",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "hps.bias",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "variable": {
                    "value": "self.conv_gate",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hps.n_res",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "hps.filter_sz",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dil",
                    "possible_values": [
                        [
                            "2 ** bl",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "hps.bias",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "variable": {
                    "value": "self.proj_signal",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_cond",
                    "possible_values": [
                        [
                            "hps.n_lc_out + hps.n_global_embed",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "self.proj_gate",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_cond",
                    "possible_values": [
                        [
                            "hps.n_lc_out + hps.n_global_embed",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv1d_31": {
                "variable": {
                    "value": "self.dil_skp",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hps.n_skp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.speaker_embedding",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_speakers",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_embed",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_135": {
                "variable": {
                    "value": "one_hot",
                    "possible_values": []
                },
                "tensor": {
                    "value": "speaker_inds.long()",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.n_speakers",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "all_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lc, gc_rep)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_154": {
                "variable": {
                    "value": "self.tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_chan",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_chan",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_sz",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "filter_sz - stride",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.lc_upsample",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_231": {
                "variable": {
                    "value": "self.conv_layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogSoftmax_258": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_330": {
                "variable": {
                    "value": "to_add",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "jitter_index.nelement()",
                    "possible_values": []
                },
                "step": {
                    "value": "jitter_index.size()[1]",
                    "possible_values": []
                }
            },
            "take_335": {
                "variable": {
                    "value": "lc_jitter",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_sparse",
                    "possible_values": [
                        [
                            "lc_sparse.repeat(n_rep, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "jitter_index_inc.unsqueeze(1).expand(-1, D1, -1)",
                    "possible_values": []
                }
            },
            "one_hot_348": {
                "variable": {
                    "value": "wav_onehot",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wav.long()",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.n_quant",
                    "possible_values": []
                }
            },
            "permute_348": {
                "variable": {
                    "value": "wav_onehot",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_352": {
                "variable": {
                    "value": "skp_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "wav_onehot.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_skp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_win_batch",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "n_rep",
                    "possible_values": []
                },
                "data": {
                    "value": "self.n_replicas",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "possible_values": []
                }
            },
            "one_hot_378": {
                "variable": {
                    "value": "wav_onehot",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wav.long()",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.n_quant",
                    "possible_values": []
                }
            },
            "permute_378": {
                "variable": {
                    "value": "wav_onehot",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "take_387": {
                "variable": {
                    "value": "lc_jitter",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_sparse",
                    "possible_values": [
                        [
                            "lc_sparse.repeat(n_rep, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "jitter_index.unsqueeze(1).expand(-1, D1, -1)",
                    "possible_values": []
                }
            },
            "zeros_419": {
                "variable": {
                    "value": "skp_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_rep",
                    "possible_values": [
                        [
                            "torch.tensor(self.n_replicas, device=wav.device)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_skp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "cur_pos",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.base_global_rf]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "variable": {
                    "value": "end_pos",
                    "possible_values": []
                },
                "data": {
                    "value": "[n_ts]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "report_interval",
                    "possible_values": []
                },
                "data": {
                    "value": "1000",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "zero",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "LogSoftmax_539": {
                "variable": {
                    "value": "self.logsoftmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_545": {
                "variable": {
                    "value": "log_pred_target",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "possible_values": [
                        [
                            "self.logsoftmax(quant_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_wav_gather",
                    "possible_values": [
                        [
                            "target_wav.long().unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_34": {
                "variable": {
                    "value": "self.dil_res",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hps.n_dil",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hps.n_res",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "empty_49": {
                "*size": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "input": {
                    "value": "filt",
                    "possible_values": [
                        [
                            "self.conv_signal(x) + self.proj_signal(cond[:, :, cl:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_102": {
                "input": {
                    "value": "gate",
                    "possible_values": [
                        [
                            "self.conv_gate(x) + self.proj_gate(cond[:, :, cl:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_124": {
                "n": {
                    "value": "n_speakers",
                    "possible_values": []
                }
            },
            "equal_455": {
                "input": {
                    "value": "cur_pos",
                    "possible_values": [
                        [
                            "torch.tensor([self.base_global_rf], dtype=torch.long, device=wav_onehot.device)",
                            "Call"
                        ],
                        [
                            "cur_pos + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "end_pos",
                    "possible_values": [
                        [
                            "torch.tensor([n_ts], dtype=torch.long, device=wav_onehot.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_478": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "quant",
                    "possible_values": [
                        [
                            "self.post2(self.relu(post1))",
                            "Call"
                        ],
                        [
                            "self.post2(self.relu(post1)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "multinomial_479": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.softmax(quant, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "one_hot_480": {
                "variable": {
                    "value": "wav_onehot[1:, :, wav_ir[1]]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, 1, True)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_quant",
                    "possible_values": []
                }
            },
            "squeeze_480": {
                "variable": {
                    "value": "wav_onehot[1:, :, wav_ir[1]]",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "empty_437": {
                "*size": {
                    "value": "n_rep",
                    "possible_values": [
                        [
                            "torch.tensor(self.n_replicas, device=wav.device)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_res",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l.global_rf + chunk_size - 1",
                    "possible_values": []
                },
                "device": {
                    "value": "wav_onehot.device",
                    "possible_values": []
                }
            },
            "equal_486": {
                "input": {
                    "value": "irng[0, 0]",
                    "possible_values": []
                },
                "other": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "torch.tensor(0, dtype=torch.long, device=wav_onehot.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_511": {
                "input": {
                    "value": "torch.fmod(wav_ir[1], report_interval)",
                    "possible_values": []
                },
                "other": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "torch.tensor(0, dtype=torch.long, device=wav_onehot.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "fmod_511": {
                "input": {
                    "value": "wav_ir[1]",
                    "possible_values": []
                },
                "other": {
                    "value": "report_interval",
                    "possible_values": [
                        [
                            "torch.tensor(1000, dtype=torch.long, device=wav_onehot.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}