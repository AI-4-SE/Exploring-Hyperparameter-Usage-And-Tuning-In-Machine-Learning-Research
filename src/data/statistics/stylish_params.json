{
    "source/stylish/core.py": {
        "tensorflow": {
            "ConfigProto_55": {
                "variable": {
                    "value": "soft_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_58": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "soft_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "build_tensor_info_720": {
                "variable": {
                    "value": "input_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=image_shape, name='input')",
                            "Call"
                        ],
                        [
                            "input_node - stylish.vgg.VGG19_MEAN",
                            "BinOp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1,) + image.shape, name='input')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, None, None, None), name='input')",
                            "Call"
                        ],
                        [
                            "graph.get_tensor_by_name('input:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "build_tensor_info_721": {
                "variable": {
                    "value": "output_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.identity(output_node, name='output')",
                            "Call"
                        ],
                        [
                            "graph.get_tensor_by_name('output:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "build_signature_def_723": {
                "variable": {
                    "value": "signature",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "{'input': input_info}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "{'output': output_info}",
                    "type": "Dict",
                    "possible_values": []
                },
                "method_name": {
                    "value": "tf.saved_model.signature_constants.PREDICT_METHOD_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + image.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_121": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + image.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate or LEARNING_RATE",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "FileWriter_239": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_path",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_245": {
                "variable": {
                    "value": "merged_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_343": {
                "variable": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_353": {
                "variable": {
                    "value": "output_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.identity(output_node, name='output')",
                            "Call"
                        ],
                        [
                            "graph.get_tensor_by_name('output:0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_383": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate or LEARNING_RATE",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "FileWriter_387": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_path",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_393": {
                "variable": {
                    "value": "merged_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_533": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=1, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=batch_size or BATCH_SIZE, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "content_cost + style_cost + total_variation_cost",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.l2_loss(layer2 - layer1) / content_size",
                            "BinOp"
                        ],
                        [
                            "content_weight * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(style_losses) / batch_size",
                            "BinOp"
                        ],
                        [
                            "style_weight * cost",
                            "BinOp"
                        ],
                        [
                            "2 * (x_tv / tv_x_size + y_tv / tv_y_size) / batch_size",
                            "BinOp"
                        ],
                        [
                            "tv_weight * cost",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_563": {
                "variable": {
                    "value": "content_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(layer1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_570": {
                "name": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=1, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=batch_size or BATCH_SIZE, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "content_cost + style_cost + total_variation_cost",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.l2_loss(layer2 - layer1) / content_size",
                            "BinOp"
                        ],
                        [
                            "content_weight * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(style_losses) / batch_size",
                            "BinOp"
                        ],
                        [
                            "style_weight * cost",
                            "BinOp"
                        ],
                        [
                            "2 * (x_tv / tv_x_size + y_tv / tv_y_size) / batch_size",
                            "BinOp"
                        ],
                        [
                            "tv_weight * cost",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_624": {
                "name": {
                    "value": "style",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=1, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=batch_size or BATCH_SIZE, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "content_cost + style_cost + total_variation_cost",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.l2_loss(layer2 - layer1) / content_size",
                            "BinOp"
                        ],
                        [
                            "content_weight * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(style_losses) / batch_size",
                            "BinOp"
                        ],
                        [
                            "style_weight * cost",
                            "BinOp"
                        ],
                        [
                            "2 * (x_tv / tv_x_size + y_tv / tv_y_size) / batch_size",
                            "BinOp"
                        ],
                        [
                            "tv_weight * cost",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_prod_642": {
                "variable": {
                    "value": "tv_y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(output_node[:, 1:, :, :]), tf.float32)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_prod_645": {
                "variable": {
                    "value": "tv_x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(output_node[:, :, 1:, :]), tf.float32)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_649": {
                "variable": {
                    "value": "y_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output_node[:, 1:, :, :] - output_node[:, :-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_652": {
                "variable": {
                    "value": "x_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output_node[:, :, 1:, :] - output_node[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_659": {
                "name": {
                    "value": "total_variation",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=1, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "compute_cost(session, style_mapping, output_node, batch_size=batch_size or BATCH_SIZE, content_weight=content_weight or CONTENT_WEIGHT, style_weight=style_weight or STYLE_WEIGHT, tv_weight=tv_weight or TV_WEIGHT, content_layer=content_layer or stylish.vgg.CONTENT_LAYER, style_layer_names=style_layer_names or [name for (name, _) in stylish.vgg.STYLE_LAYERS], input_namespace='vgg1', output_namespace='vgg2')",
                            "Call"
                        ],
                        [
                            "content_cost + style_cost + total_variation_cost",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.l2_loss(layer2 - layer1) / content_size",
                            "BinOp"
                        ],
                        [
                            "content_weight * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(style_losses) / batch_size",
                            "BinOp"
                        ],
                        [
                            "style_weight * cost",
                            "BinOp"
                        ],
                        [
                            "2 * (x_tv / tv_x_size + y_tv / tv_y_size) / batch_size",
                            "BinOp"
                        ],
                        [
                            "tv_weight * cost",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_default_graph_754": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_206": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "stylish.transform.network((input_node - stylish.vgg.VGG19_MEAN) / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.identity(output_node, name='output')",
                            "Call"
                        ],
                        [
                            "graph.get_tensor_by_name('output:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_562": {
                "name": {
                    "value": "content_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_600": {
                "name": {
                    "value": "style_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_606": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name('vgg/{}:0'.format(layer_name))",
                            "Call"
                        ],
                        [
                            "session.graph.get_tensor_by_name(layer_name2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_608": {
                "variable": {
                    "value": "tf_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[0], shape[1] * shape[2], shape[3]]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_610": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name('vgg/{}:0'.format(layer_name))",
                            "Call"
                        ],
                        [
                            "session.graph.get_tensor_by_name(layer_name2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_611": {
                "variable": {
                    "value": "features_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.run(layer, feed_dict={input_node: images})",
                            "Call"
                        ],
                        [
                            "np.reshape(features, (-1, features.shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer, shape=tf_shape)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_613": {
                "variable": {
                    "value": "style_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[1] * shape[2] * shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_641": {
                "name": {
                    "value": "tv_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_756": {
                "export_dir": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=soft_config)",
                            "Call"
                        ]
                    ]
                },
                "tags": {
                    "value": "['serve']",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "vgg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_209": {
                "name": {
                    "value": "vgg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_214": {
                "name": {
                    "value": "vgg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_357": {
                "name": {
                    "value": "vgg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_362": {
                "name": {
                    "value": "vgg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_563": {
                "input": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.graph.get_tensor_by_name(layer_name1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_564": {
                "input_tensor": {
                    "value": "content_shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_621": {
                "input_tensor": {
                    "value": "style_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_567": {
                "t": {
                    "value": "layer2 - layer1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_614": {
                "a": {
                    "value": "features_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(features, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.run(layer, feed_dict={input_node: images})",
                            "Call"
                        ],
                        [
                            "np.reshape(features, (-1, features.shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer, shape=tf_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_643": {
                "x": {
                    "value": "tf.shape(output_node[:, 1:, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_646": {
                "x": {
                    "value": "tf.shape(output_node[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_643": {
                "input": {
                    "value": "output_node[:, 1:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_646": {
                "input": {
                    "value": "output_node[:, :, 1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_618": {
                "t": {
                    "value": "grams - style_gram",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "source/stylish/transform.py": {
        "tensorflow": {
            "add_132": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(node) * 150",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "255.0 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_165": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_204": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(weights_shape, stddev=0.1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_212": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, strides, strides, 1]",
                            "List"
                        ],
                        [
                            "[1, strides, strides, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(weights_shape, stddev=0.1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_257": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_260": {
                "variable": {
                    "value": "new_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_261": {
                "variable": {
                    "value": "new_columns",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "tf_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[0], new_rows, new_columns, in_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_transpose_265": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(new_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, strides, strides, 1]",
                            "List"
                        ],
                        [
                            "[1, strides, strides, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "moments_292": {
                "variable": {
                    "value": "(mu, sigma_sq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_293": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "shift",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_294": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_156": {
                "name": {
                    "value": "operation_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "operation_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_209": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_218": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "operation_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_255": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(weights_shape, stddev=0.1, seed=1), dtype=tf.float32, name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_271": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_291": {
                "name": {
                    "value": "instance_normalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_297": {
                "x": {
                    "value": "tf.multiply(scale, normalized)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([channels]), name='shift')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_132": {
                "x": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_205": {
                "shape": {
                    "value": "weights_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size, kernel_size, in_channels, out_channels]",
                            "List"
                        ],
                        [
                            "[kernel_size, kernel_size, in_channels, out_channels]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_219": {
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_251": {
                "shape": {
                    "value": "weights_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size, kernel_size, in_channels, out_channels]",
                            "List"
                        ],
                        [
                            "[kernel_size, kernel_size, in_channels, out_channels]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_272": {
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer(input_node, 'conv1', in_channels=3, out_channels=32, kernel_size=9, strides=1, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'conv3', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_1', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_2', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_3', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_4', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "residual_block(node, 'residual_block_5', in_channels=128, out_channels=128, kernel_size=3, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv1', in_channels=64, out_channels=128, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_transpose_layer(node, 'de_conv2', in_channels=32, out_channels=64, kernel_size=3, strides=2, activation=True)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'de_conv3', in_channels=32, out_channels=3, kernel_size=9, strides=1)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(input_node, 'rb{}_conv1'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer(node, 'rb{}_conv2'.format(operation_name[-1]), in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, strides=strides)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, weights_init, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, out_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_node, weights_init, tf_shape, strides_shape, padding='SAME')",
                            "Call"
                        ],
                        [
                            "instance_normalization(node, in_channels)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_293": {
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_294": {
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_297": {
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([channels]), name='scale')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_node - mu) / (sigma_sq + epsilon) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "source/stylish/vgg.py": {
        "tensorflow": {
            "max_pool_222": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_189": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_node",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "tf.constant(weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_layer('conv1_1', vgg_mapping, input_node)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv1_2', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "pool_layer('max_pool1', layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv2_1', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv2_2', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "pool_layer('max_pool2', layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv3_1', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv3_2', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv3_3', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv3_4', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "pool_layer('max_pool3', layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv4_1', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv4_2', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv4_3', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv4_4', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "pool_layer('max_pool4', layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv5_1', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv5_2', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv5_3', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "conv2d_layer('conv5_4', vgg_mapping, layer)",
                            "Call"
                        ],
                        [
                            "pool_layer('max_pool5', layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_node, filter=tf.constant(weight), strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "layer + tf.constant(np.reshape(bias, bias.size))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(layer, name='Relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_node, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_196": {
                "value": {
                    "value": "np.reshape(bias, bias.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_191": {
                "value": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg_mapping[name]['weight']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "test/unit/test_core.py": {
        "tensorflow": {}
    }
}