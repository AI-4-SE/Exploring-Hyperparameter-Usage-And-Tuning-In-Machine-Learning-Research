{
    "AdapConv/adap_conv_model_utils.py": {
        "sklearn": {
            "extract_patches_2d_47": {
                "image": {
                    "value": "Frame3[:, j:j + w - 1 + 79, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "patch_size": {
                    "value": "(79, 79)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "extract_patches_2d_51": {
                "image": {
                    "value": "Frame3[:, j:j + w - 1 + 79, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "patch_size": {
                    "value": "(79, 79)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "concat_15": {
                "variable": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[img1, img3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Options_20": {
                "variable": {
                    "value": "ignore_order",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_22": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "Name",
                    "possible_values": []
                },
                "num_parallel_reads": {
                    "value": "AUTO",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.data.experimental.AUTOTUNE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_37": {
                "variable": {
                    "value": "Frame1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "frame2",
                            "Name"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[39, 39], [39, 39], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_38": {
                "variable": {
                    "value": "Frame2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame2",
                    "type": "Name",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[39, 39], [39, 39], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_62": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[79, 79, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "image_tensors",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs[:, 19:60, 19:60, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "kernel_tensors",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.BatchNormalization()(inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=7, filters=32, padding='valid', activation='relu')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=2, filters=32, padding='valid', strides=(2, 2), activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=5, filters=64, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=2, filters=64, padding='valid', strides=(2, 2), activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=5, filters=128, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=2, filters=128, padding='valid', strides=(2, 2), activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=3, filters=256, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=4, filters=2048, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(kernel_size=1, filters=3362, padding='valid', activation='softmax')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape((41, 82, 1))(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "variable": {
                    "value": "pixel1",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img1 * kernel_tensors[0]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "pixel2",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img2 * kernel_tensors[1]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, dtype='float16')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y_true, dtype='float16')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_true - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.abs(loss)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_true - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.abs(loss)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_89": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=[79, 79, 6])",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pixel",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_67": {
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_70": {
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_72": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_75": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_76": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "filters": {
                    "value": "3362",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Reshape_77": {
                "target_shape": {
                    "value": "(41, 82, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "input": {
                    "value": "pixel2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(output2, axis=[1, 2], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "AdapConv/predict_image_adap_conv_model.py": {
        "tensorflow": {}
    },
    "AdapConv/predict_video_adap_conv_model.py": {
        "tensorflow": {}
    },
    "AdapConv/train_adap_conv_model.py": {
        "tensorflow": {
            "plot_model_31": {
                "model": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "create_model()",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "adap_conv_model.png",
                    "type": "Constant",
                    "possible_values": []
                },
                "show_shapes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "show_layer_names": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adaSepConv/model.py": {
        "tensorflow": {
            "Input_46": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.INPUT_SHAPE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_51": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "i1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(i1, [[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_53": {
                "variable": {
                    "value": "i1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(i1, [[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, :, 3:6]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(i2, [[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_56": {
                "variable": {
                    "value": "AvgPooling",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "image_patches1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.extract_patches(i1, sizes=[1, kernel_dimension, kernel_dimension, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, shape[1], shape[2], kernel_dimension, kernel_dimension, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "image_patches1 * tf.expand_dims(tf.expand_dims(k1h, -2), -1) * tf.expand_dims(tf.expand_dims(k1v, -1), -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "image_patches2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.extract_patches(i2, sizes=[1, kernel_dimension, kernel_dimension, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, shape[1], shape[2], kernel_dimension, kernel_dimension, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "image_patches2 * tf.expand_dims(tf.expand_dims(k2h, -2), -1) * tf.expand_dims(tf.expand_dims(k2v, -1), -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "model_from_json_124": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Name",
                    "possible_values": []
                },
                "json_string": {
                    "value": "loaded_model_json",
                    "type": "Name",
                    "possible_values": [
                        [
                            "json_file.read()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_35": {
                "tensor": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_109": {
                "inputs": {
                    "value": "x_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_images1 + output_images2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "IIASC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_147": {
                "tensor": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_14": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_16": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpSampling2D_20": {
                "size": {
                    "value": "upsample_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "interpolation": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_26": {
                "filters": {
                    "value": "kernel_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.OUTPUT_1D_KERNEL_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_27": {
                "filters": {
                    "value": "kernel_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.OUTPUT_1D_KERNEL_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_28": {
                "filters": {
                    "value": "kernel_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.OUTPUT_1D_KERNEL_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpSampling2D_29": {
                "size": {
                    "value": "upsample_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "interpolation": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_30": {
                "filters": {
                    "value": "kernel_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.OUTPUT_1D_KERNEL_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "extract_patches_101": {
                "images": {
                    "value": "i1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(i1, [[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "sizes": {
                    "value": "[1, kernel_dimension, kernel_dimension, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "extract_patches_105": {
                "images": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, :, :, 3:6]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(i2, [[0, 0], [pad_dimension, pad_dimension], [pad_dimension, pad_dimension], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "sizes": {
                    "value": "[1, kernel_dimension, kernel_dimension, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "k1h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generating_kernel(x, kernel_dimension, conv_filter_size, stride, padding, upsample_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "input": {
                    "value": "k2h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generating_kernel(x, kernel_dimension, conv_filter_size, stride, padding, upsample_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "adaSepConv/prepare_dataset_utils.py": {
        "tensorflow": {
            "decode_jpeg_9": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_data",
                    "type": "Name",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [height, width, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_22": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "LABELED_TFREC_FORMAT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'img1': tf.io.FixedLenFeature([], tf.string), 'img2': tf.io.FixedLenFeature([], tf.string), 'img3': tf.io.FixedLenFeature([], tf.string), 'height': tf.io.FixedLenFeature([], tf.int64), 'width': tf.io.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_23": {
                "variable": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "example['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "example['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_39": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "rotation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.pi * rotation / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_40": {
                "variable": {
                    "value": "s1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "rotation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.pi * rotation / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_41": {
                "variable": {
                    "value": "one",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([c1, s1, zero, -s1, c1, zero, zero, zero, one], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_46": {
                "variable": {
                    "value": "c2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shear",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.pi * shear / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_47": {
                "variable": {
                    "value": "s2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shear",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.pi * shear / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "shear_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([one, s2, zero, zero, c2, zero, zero, zero, one], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "zoom_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([one / height_zoom, zero, zero, zero, one / width_zoom, zero, zero, zero, one], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "shift_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([one, zero, height_shift, zero, one, width_shift, zero, zero, one], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_75": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(DIM // 2, -DIM // 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "DIM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.PATCH_SIZE[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_76": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(-DIM // 2, DIM // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[DIM * DIM]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dot_81": {
                "variable": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_mat(rot, shr, h_zoom, w_zoom, h_shift, w_shift)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.cast(idx, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.dot(m, tf.cast(idx, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "K.cast(idx2, dtype='int32')",
                            "Call"
                        ],
                        [
                            "K.clip(idx2, -DIM // 2 + XDIM + 1, DIM // 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_83": {
                "variable": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.dot(m, tf.cast(idx, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "K.cast(idx2, dtype='int32')",
                            "Call"
                        ],
                        [
                            "K.clip(idx2, -DIM // 2 + XDIM + 1, DIM // 2)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "-DIM // 2 + XDIM + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "a_max": {
                    "value": "DIM // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "idx3",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[DIM // 2 - idx2[0,], DIM // 2 - 1 + idx2[1,]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_87": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [height, width, -1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.transpose(idx3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "central_crop_97": {
                "variable": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_image(example['img1'], height, width)",
                            "Call"
                        ],
                        [
                            "transform(img1, seed, sign=1)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(img1, central_fraction=fraction)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.CROP_SIZE_fraction",
                            "Attribute"
                        ]
                    ]
                }
            },
            "central_crop_98": {
                "variable": {
                    "value": "img3",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "img3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_image(example['img3'], height, width)",
                            "Call"
                        ],
                        [
                            "transform(img3, seed, sign=-1)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(img3, central_fraction=fraction)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.CROP_SIZE_fraction",
                            "Attribute"
                        ]
                    ]
                }
            },
            "central_crop_99": {
                "variable": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_image(example['img2'], height, width)",
                            "Call"
                        ],
                        [
                            "transform(img2, seed)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(img2, central_fraction=fraction)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.CROP_SIZE_fraction",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Options_106": {
                "variable": {
                    "value": "ignore_order",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_108": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "Name",
                    "possible_values": []
                },
                "num_parallel_reads": {
                    "value": "AUTO",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.data.experimental.AUTOTUNE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dot_56": {
                "a": {
                    "value": "zoom_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat([one / height_zoom, zero, zero, zero, one / width_zoom, zero, zero, zero, one], axis=0), [3, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "shift_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat([one, zero, height_shift, zero, one, width_shift, zero, zero, one], axis=0), [3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(image, tf.transpose(idx3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[DIM, DIM, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [height, width, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_15": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_16": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_17": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_18": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_19": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_43": {
                "values": {
                    "value": "[c1, s1, zero, -s1, c1, zero, zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_48": {
                "values": {
                    "value": "[one, s2, zero, zero, c2, zero, zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_51": {
                "values": {
                    "value": "[one / height_zoom, zero, zero, zero, one / width_zoom, zero, zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_54": {
                "values": {
                    "value": "[one, zero, height_shift, zero, one, width_shift, zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_64": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 1000)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_65": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 1000)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_81": {
                "x": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([x, y, z])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "idx3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([DIM // 2 - idx2[0,], DIM // 2 - 1 + idx2[1,]])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_100": {
                "values": {
                    "value": "[img1, img3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_68": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 1000)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_69": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 1000)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adaSepConv/train_adaSepConv.py": {
        "tensorflow": {
            "LearningRateScheduler_11": {
                "variable": {
                    "value": "lr_callback",
                    "type": "Name",
                    "possible_values": []
                },
                "schedule": {
                    "value": "lr_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "clipvalue": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adaSepConv/video_interpolation_utilities.py": {
        "tensorflow": {}
    },
    "create_dataset_utils.py": {
        "tensorflow": {
            "Example_23": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'img1': _bytes_feature(tf.image.encode_jpeg(frame1).numpy()), 'img2': _bytes_feature(tf.image.encode_jpeg(frame2).numpy()), 'img3': _bytes_feature(tf.image.encode_jpeg(frame3).numpy()), 'height': _int64_feature(rows), 'width': _int64_feature(cols)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_jpeg_32": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_data",
                    "type": "Name",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int16)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [height, width, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int16)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [height, width, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_46": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'img1': _bytes_feature(tf.image.encode_jpeg(frame1).numpy()), 'img2': _bytes_feature(tf.image.encode_jpeg(frame2).numpy()), 'img3': _bytes_feature(tf.image.encode_jpeg(frame3).numpy()), 'height': _int64_feature(rows), 'width': _int64_feature(cols)}))",
                            "Call"
                        ],
                        [
                            "tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "LABELED_TFREC_FORMAT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'img1': tf.io.FixedLenFeature([], tf.string), 'img2': tf.io.FixedLenFeature([], tf.string), 'img3': tf.io.FixedLenFeature([], tf.string), 'height': tf.io.FixedLenFeature([], tf.int64), 'width': tf.io.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_47": {
                "variable": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "example['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "example['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_13": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_17": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_39": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_40": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_41": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_42": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_43": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_13": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_17": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_23": {
                "feature": {
                    "value": "{'img1': _bytes_feature(tf.image.encode_jpeg(frame1).numpy()), 'img2': _bytes_feature(tf.image.encode_jpeg(frame2).numpy()), 'img3': _bytes_feature(tf.image.encode_jpeg(frame3).numpy()), 'height': _int64_feature(rows), 'width': _int64_feature(cols)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "encode_jpeg_24": {
                "image": {
                    "value": "frame1",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "encode_jpeg_25": {
                "image": {
                    "value": "frame2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "encode_jpeg_26": {
                "image": {
                    "value": "frame3",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}