{
    "dame_flame/flame_dame_helpers.py": {
        "sklearn": {
            "IterativeImputer_130": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(df_holdout))",
                            "Call"
                        ],
                        [
                            "range(num_imputes)",
                            "Call"
                        ]
                    ]
                },
                "estimator": {
                    "value": "DecisionTreeRegressor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Ridge_93": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha_given",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_104": {
                "variable": {
                    "value": "mse_treated",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_treated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 1, outcome_col_name]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_treated)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_control)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_109": {
                "variable": {
                    "value": "mse_control",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_control",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 0, outcome_col_name]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_treated)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_control)",
                            "Call"
                        ]
                    ]
                }
            },
            "DecisionTreeRegressor_95": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_score_113": {
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ridge(alpha=alpha_given)",
                            "Call"
                        ],
                        [
                            "DecisionTreeRegressor()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x_treated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.concat([binarized_df, x_treated.loc[:, bool_cols]], axis=1)",
                            "Call"
                        ],
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 1, df_holdout.columns.difference([outcome_col_name, treatment_col_name] + list(covs_include))]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_treated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 1, outcome_col_name]",
                            "Subscript"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_116": {
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ridge(alpha=alpha_given)",
                            "Call"
                        ],
                        [
                            "DecisionTreeRegressor()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x_control",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.concat([binarized_df, x_control.loc[:, bool_cols]], axis=1)",
                            "Call"
                        ],
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 0, df_holdout.columns.difference([outcome_col_name, treatment_col_name] + list(covs_include))]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_control",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_holdout.loc[df_holdout[treatment_col_name] == 0, outcome_col_name]",
                            "Subscript"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dame_flame/flame_db/matching_helpers.py": {
        "sklearn": {
            "Ridge_152": {
                "variable": {
                    "value": "model_c",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Ridge_153": {
                "variable": {
                    "value": "model_t",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_155": {
                "variable": {
                    "value": "model_c",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "max_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_156": {
                "variable": {
                    "value": "model_t",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "max_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_val_score_161": {
                "estimator": {
                    "value": "model_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Ridge(fit_intercept=False, alpha=alpha, random_state=random_state)",
                            "Call"
                        ],
                        [
                            "DecisionTreeRegressor(max_depth=max_depth, random_state=random_state)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "holdout[holdout[treatment_column_name] == 1].iloc[:, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "holdout[holdout[treatment_column_name] == 1][outcome_column_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_val_score_165": {
                "estimator": {
                    "value": "model_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Ridge(fit_intercept=False, alpha=alpha, random_state=random_state)",
                            "Call"
                        ],
                        [
                            "DecisionTreeRegressor(max_depth=max_depth, random_state=random_state)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "holdout[holdout[treatment_column_name] == 0].iloc[:, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "holdout[holdout[treatment_column_name] == 0][outcome_column_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}