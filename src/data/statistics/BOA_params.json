{
    "boa.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "J_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(config.JOINT_REGRESSOR_H36M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_100": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_114": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(self.options.model_file)",
                            "Call"
                        ],
                        [
                            "torch.load(self.options.model_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_128": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.exppath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_129": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.options.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.options.beta1, self.options.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_139": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.options.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "self.h36m_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.h36m_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.options.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.options.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.options.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.options.beta1, self.options.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "self.pw3d_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.pw3d_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.options.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_418": {
                "variable": {
                    "value": "pred_keypoints_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_regressor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J_regressor[None, :].expand(pred_vts.shape[0], -1, -1).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_vts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smpl_out['vts']",
                            "Subscript"
                        ],
                        [
                            "smpl_out['vts']",
                            "Subscript"
                        ],
                        [
                            "smpl_out['vts']",
                            "Subscript"
                        ],
                        [
                            "pred_smpl_out['vts']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_423": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((pred_keypoints_3d - gt_keypoints_3d) ** 2).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_423": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "self.pw3d_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.pw3d_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.options.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_406": {
                "variable": {
                    "value": "gt_keypoints_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_regressor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J_regressor[None, :].expand(pred_vts.shape[0], -1, -1).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gt_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smpl_male(global_orient=gt_pose[:, :3], body_pose=gt_pose[:, 3:], betas=gt_betas).vertices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_411": {
                "variable": {
                    "value": "t_rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_411": {
                "variable": {
                    "value": "t_rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_429": {
                "variable": {
                    "value": "unposed_mesh_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((unposed_gt_vertices - unposed_pred_vts) ** 2).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_429": {
                "variable": {
                    "value": "unposed_mesh_error",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_430": {
                "variable": {
                    "value": "posed_mesh_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((gt_vertices - pred_vts) ** 2).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_430": {
                "variable": {
                    "value": "posed_mesh_error",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/h36.py": {
        "torch": {
            "from_numpy_114": {
                "variable": {
                    "value": "kp2d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j2d_processing(keypoints, center, sc * scale, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(imgname)[:, :, ::-1].copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.rgb_processing(image, center, sc * scale, rot, flip, pn, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "self.normalize_img(img)",
                            "Call"
                        ],
                        [
                            "self.read_image(imgname).copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.pose_processing(pose, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j3d_processing(S, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "item[keypoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kp2d_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "item[img]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "item[pose]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pose_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "item[betas]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "betas_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "item[pose_3d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pose_3d_all",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mpi_3dhp.py": {
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "kp2d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j2d_processing(keypoints, center, sc * scale, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(imgname)[:, :, ::-1].copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.rgb_processing(image, center, sc * scale, rot, flip, pn, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "self.normalize_img(img)",
                            "Call"
                        ],
                        [
                            "self.read_image(imgname).copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j3d_processing(S, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "item[keypoints]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kp2d_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "item[img]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_all",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "item[pose_3d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pose_3d_all",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/pw3d.py": {
        "torch": {
            "from_numpy_122": {
                "variable": {
                    "value": "kp2d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j2d_processing(keypoints, center, sc * scale, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "smpl_j2ds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.j2d_processing(smpl_j2ds, center, sc * scale, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb_processing(image, center, sc * scale, rot, flip, pn, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "self.normalize_img(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgname)[:, :, ::-1].copy().astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.pose_processing(pose, rot, flip, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['shape'].astype(np.float)",
                            "Call"
                        ],
                        [
                            "self.betas[index].copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/hmr.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_81": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion + npose + 13",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.decpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "npose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24 * 6",
                            "BinOp"
                        ],
                        [
                            "24 * 6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.decshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.deccam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['pose'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['shape'][:].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['cam']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_187": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_192": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.ssl_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion + npose + 13, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.ssl_decpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "npose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24 * 6",
                            "BinOp"
                        ],
                        [
                            "24 * 6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.ssl_decshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.ssl_deccam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.fsl_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion + npose + 13, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.fsl_decpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "npose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24 * 6",
                            "BinOp"
                        ],
                        [
                            "24 * 6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.fsl_decshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.fsl_deccam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['pose'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['shape'][:].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['cam']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_227": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "num_groups": {
                    "value": "32 // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, pred_pose, pred_shape, pred_cam]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, pred_pose, pred_shape, pred_cam]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, pred_pose, pred_shape, pred_cam]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "512 * block.expansion + npose + 13",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "512 * block.expansion + npose + 13",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_preprocess/check_mosh.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mosh['new_poses'][idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pose).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mosh['betas']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(shape).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_preprocess/pw3d_all.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_betas).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_pose).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_preprocess/pw3d_process.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_betas).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_pose).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_preprocess/pw3d_videofile.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_betas).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "gt_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_pose).float().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "gt_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/geometry.py": {
        "torch": {
            "norm_20": {
                "variable": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_22": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_24": {
                "variable": {
                    "value": "v_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_25": {
                "variable": {
                    "value": "v_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_64": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_86": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bkj->bki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "projected_points",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bkj->bki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3, 3], device=points.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_266": {
                "variable": {
                    "value": "rmat_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([rot_mat, hom], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "q0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 1, 2] - rmat_t[:, 2, 1], t0, rmat_t[:, 0, 1] + rmat_t[:, 1, 0], rmat_t[:, 2, 0] + rmat_t[:, 0, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 2, 0] - rmat_t[:, 0, 2], rmat_t[:, 0, 1] + rmat_t[:, 1, 0], t1, rmat_t[:, 1, 2] + rmat_t[:, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_286": {
                "variable": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 0, 1] - rmat_t[:, 1, 0], rmat_t[:, 2, 0] + rmat_t[:, 0, 2], rmat_t[:, 1, 2] + rmat_t[:, 2, 1], t2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_292": {
                "variable": {
                    "value": "q3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t3, rmat_t[:, 1, 2] - rmat_t[:, 2, 1], rmat_t[:, 2, 0] - rmat_t[:, 0, 2], rmat_t[:, 0, 1] - rmat_t[:, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.solve(A, b)",
                            "Call"
                        ],
                        [
                            "np.zeros((S.shape[0], 3), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((S.shape[0], 3), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.solve(A, b)",
                            "Call"
                        ],
                        [
                            "np.zeros((S.shape[0], 3), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((S.shape[0], 3), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "hom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "rotation_matrix.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "hom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rot_mat, hom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_234": {
                "input": {
                    "value": "sin_squared_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q1 * q1 + q2 * q2 + q3 * q3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_243": {
                "condition": {
                    "value": "sin_squared_theta > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "two_theta / sin_theta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * torch.ones_like(sin_theta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_307": {
                "input": {
                    "value": "t0_rep * mask_c0 + t1_rep * mask_c1 + t2_rep * mask_c2 + t3_rep * mask_c3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_216": {
                "input": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion_to_angle_axis(quaternion)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_221": {
                "obj": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_236": {
                "condition": {
                    "value": "cos_theta < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.atan2(-sin_theta, -cos_theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.atan2(sin_theta, cos_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_242": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_245": {
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_253": {
                "obj": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([rot_mat, hom], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_238": {
                "input": {
                    "value": "-sin_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-cos_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_239": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_63": {
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_63": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/imutils.py": {
        "torch": {}
    },
    "utils/losses.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "J_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(config.JOINT_REGRESSOR_H36M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "cam_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cam[:, 1], cam[:, 2], 2 * constants.FOCAL_LENGTH / (constants.IMG_RES * cam[:, 0] + eps)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "camera_center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s3d.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_97": {
                "variable": {
                    "value": "motion_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "motion_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_kps_t[:, 25:] - pred_kps_n[:, 25:]",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "motion_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_kps_t[:, 25:, :-1] - gt_kps_n[:, 25:, :-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_118": {
                "variable": {
                    "value": "loss_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "ema_rotmat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_119": {
                "variable": {
                    "value": "loss_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "ema_betas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_s3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_s3d[:, 25:]",
                            "Subscript"
                        ],
                        [
                            "pred_s3d - pred_hip[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "smpl_out['s3d']",
                            "Subscript"
                        ],
                        [
                            "pred_s3d[:, 25:]",
                            "Subscript"
                        ],
                        [
                            "pred_s3d - pred_hip[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_s3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_s3d - gt_hip[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "gt_s3d[:, 25:]",
                            "Subscript"
                        ],
                        [
                            "gt_s3d - gt_hip[:, None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_146": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_s2d[:, 25:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_s2d[:, 25:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "constant",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, -1.0, -1, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_32": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_81": {
                "input": {
                    "value": "body_pose[:, [55 - 3, 58 - 3, 12 - 3, 15 - 3]] * constant",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_47": {
                "input": {
                    "value": "pred_s2d[:, 25:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "trg_s2d[:, 25:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_65": {
                "input": {
                    "value": "pred_s3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_s3d[:, 25:]",
                            "Subscript"
                        ],
                        [
                            "pred_s3d - pred_hip[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "smpl_out['s3d']",
                            "Subscript"
                        ],
                        [
                            "pred_s3d[:, 25:]",
                            "Subscript"
                        ],
                        [
                            "pred_s3d - pred_hip[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_s3d[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/pose_utils.py": {
        "torch": {}
    },
    "utils/smpl.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "self.joint_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[constants.JOINT_MAP[i] for i in constants.JOINT_NAMES]",
                            "ListComp"
                        ],
                        [
                            "torch.cat([smpl_output.joints, extra_joints], dim=1)",
                            "Call"
                        ],
                        [
                            "joints[:, self.joint_map, :]",
                            "Subscript"
                        ],
                        [
                            "smpl_output.joints",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[smpl_output.joints, extra_joints]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "J_regressor_extra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(config.JOINT_REGRESSOR_TRAIN_EXTRA)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/smplify/losses.py": {
        "torch": {
            "eye_30": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "body_pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_59": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "body_pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "model_joints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "pose[:, [55 - 3, 58 - 3, 12 - 3, 15 - 3]] * torch.tensor([1.0, -1.0, -1, -1.0], device=pose.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[1.0, -1.0, -1, -1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/smplify/prior.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "angle_prior_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "angle_prior_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([55, 58, 12, 15], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.tensor(angle_prior_idxs, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "self.angle_prior_idxs - (not with_global_pose) * 3",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "angle_prior_signs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "angle_prior_signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, -1, -1, -1], dtype=np.float32 if dtype == torch.float32 else np.float64)",
                            "Call"
                        ],
                        [
                            "torch.tensor(angle_prior_signs, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "nll_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "nll_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(gmm['weights'] / (const * (sqrdets / sqrdets.min())))",
                            "Call"
                        ],
                        [
                            "torch.tensor(nll_weights, dtype=dtype).unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_159": {
                "variable": {
                    "value": "nll_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gmm['weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_184": {
                "variable": {
                    "value": "prec_diff_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mij,bmj->bmi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[self.precisions, diff_from_mean]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_195": {
                "variable": {
                    "value": "(min_likelihood, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_loglikelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * diff_prec_quadratic - torch.log(self.nll_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('bj,ji->bi', [diff_from_mean, prec])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bi,bi->b', [curr_loglikelihood, diff_from_mean])",
                            "Call"
                        ],
                        [
                            "curr_loglikelihood + 0.5 * (cov_term + self.random_var_dim * self.pi_term)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "log_likelihoods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_221": {
                "variable": {
                    "value": "min_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_likelihoods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(likelihoods, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_88": {
                "input": {
                    "value": "pose[:, angle_prior_idxs] * self.angle_prior_signs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "module_input.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_209": {
                "variable": {
                    "value": "curr_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bj,ji->bi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[diff_from_mean, prec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "curr_loglikelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[curr_loglikelihood, diff_from_mean]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_214": {
                "variable": {
                    "value": "cov_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.det(cov) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm['means'].astype(np_dtype)",
                            "Call"
                        ],
                        [
                            "gmm.means_.astype(np_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_144": {
                "data": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm['covars'].astype(np_dtype)",
                            "Call"
                        ],
                        [
                            "gmm.covars_.astype(np_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "data": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.linalg.inv(cov) for cov in covs]",
                            "ListComp"
                        ],
                        [
                            "np.stack(precisions).astype(np_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_166": {
                "input": {
                    "value": "torch.tensor(2 * np.pi, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "cov_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.log(np.linalg.det(cov.astype(np_dtype)) + epsilon) for cov in covs]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_189": {
                "input": {
                    "value": "self.nll_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_223": {
                "input": {
                    "value": "weight_component",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nll_weights[:, min_idx]",
                            "Subscript"
                        ],
                        [
                            "-torch.log(weight_component)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "tensor_166": {
                "data": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DTYPE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "det_214": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.covs[idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/smplify/smplify.py": {
        "torch": {
            "Adam_82": {
                "variable": {
                    "value": "camera_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "camera_opt_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[global_orient, camera_translation]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "body_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "body_opt_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[body_pose, betas, global_orient]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_orient, body_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}