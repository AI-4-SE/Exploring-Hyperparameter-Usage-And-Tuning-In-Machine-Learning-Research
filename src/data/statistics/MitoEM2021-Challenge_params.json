{
    "connectomics/data/augmentation/mixup.py": {
        "torch": {
            "ones_57": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/data/augmentation/test_augmentor.py": {
        "torch": {
            "flip_43": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [4])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [2])",
                            "Call"
                        ],
                        [
                            "torch.transpose(volume, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_45": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [4])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [2])",
                            "Call"
                        ],
                        [
                            "torch.transpose(volume, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_47": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [4])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [2])",
                            "Call"
                        ],
                        [
                            "torch.transpose(volume, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [4])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(volume, [2])",
                            "Call"
                        ],
                        [
                            "torch.transpose(volume, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(volume).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.transpose(vout, 3, 4)",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [4])",
                            "Call"
                        ],
                        [
                            "vout.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_56": {
                "variable": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(volume).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.transpose(vout, 3, 4)",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [4])",
                            "Call"
                        ],
                        [
                            "vout.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_58": {
                "variable": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(volume).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.transpose(vout, 3, 4)",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [4])",
                            "Call"
                        ],
                        [
                            "vout.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_60": {
                "variable": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(volume).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.transpose(vout, 3, 4)",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [3])",
                            "Call"
                        ],
                        [
                            "torch.flip(vout, [4])",
                            "Call"
                        ],
                        [
                            "vout.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/data/dataset/__init__.py": {
        "torch": {
            "DataLoader_165": {
                "variable": {
                    "value": "img_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TileDataset(chunk_num=cfg.DATASET.DATA_CHUNK_NUM, chunk_num_ind=cfg.DATASET.DATA_CHUNK_NUM_IND, chunk_iter=cfg.DATASET.DATA_CHUNK_ITER, chunk_stride=cfg.DATASET.DATA_CHUNK_STRIDE, volume_json=cfg.DATASET.INPUT_PATH + cfg.DATASET.IMAGE_NAME, label_json=label_json, sample_volume_size=sample_volume_size, sample_label_size=sample_label_size, sample_stride=sample_stride, sample_invalid_thres=sample_invalid_thres, augmentor=augmentor, target_opt=topt, weight_opt=wopt, mode=mode, do_2d=cfg.DATASET.DO_2D, iter_num=iter_num, label_erosion=label_erosion, pad_size=cfg.DATASET.PAD_SIZE, use_label_smooth=cfg.DATASET.USE_LABEL_SMOOTH, label_smooth=cfg.DATASET.LABEL_SMOOTH)",
                            "Call"
                        ],
                        [
                            "VolumeDataset(volume=volume, label=label, sample_volume_size=sample_volume_size, sample_label_size=sample_label_size, sample_stride=sample_stride, sample_invalid_thres=sample_invalid_thres, augmentor=augmentor, target_opt=topt, weight_opt=wopt, mode=mode, do_2d=cfg.DATASET.DO_2D, iter_num=iter_num, reject_size_thres=cfg.DATASET.REJECT_SAMPLING.SIZE_THRES, reject_after_aug=cfg.DATASET.REJECT_SAMPLING.AFTER_AUG, reject_p=cfg.DATASET.REJECT_SAMPLING.P, use_label_smooth=cfg.DATASET.USE_LABEL_SMOOTH, label_smooth=cfg.DATASET.LABEL_SMOOTH)",
                            "Call"
                        ],
                        [
                            "get_dataset(cfg, augmentor, mode)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.SAMPLES_PER_BATCH",
                            "Attribute"
                        ],
                        [
                            "cfg.INFERENCE.SAMPLES_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "SHUFFLE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mode == 'train'",
                            "Compare"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collate_fn_target",
                            "Name"
                        ],
                        [
                            "collate_fn_test",
                            "Name"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.SYSTEM.NUM_CPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/data/dataset/dataset_tile.py": {
        "torch": {}
    },
    "connectomics/data/dataset/dataset_volume.py": {
        "torch": {}
    },
    "connectomics/data/utils/data_collate.py": {
        "torch": {}
    },
    "connectomics/engine/solver/build.py": {
        "torch": {
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__36": {
                "parameters": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "cfg.NORM_TYPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_value__39": {
                "parameters": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_173": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, cfg.SOLVER.BASE_LR)",
                            "Call"
                        ],
                        [
                            "maybe_add_gradient_clipping(cfg, optimizer)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.SOLVER.STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.SOLVER.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_179": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, cfg.SOLVER.BASE_LR)",
                            "Call"
                        ],
                        [
                            "maybe_add_gradient_clipping(cfg, optimizer)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "cfg.SOLVER.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/engine/solver/lr_scheduler.py": {
        "torch": {}
    },
    "connectomics/engine/trainer.py": {
        "torch": {
            "load_430": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(volume).to(self.device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_418": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration + 1, 'state_dict': self.model.module.state_dict(), 'optimizer': self.optimizer.state_dict(), 'lr_scheduler': self.lr_scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint_%06d.pth.tar' % (iteration + 1)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(self.output_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(volume).to(self.device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "variable": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(volume).to(self.device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volume).to(self.device)",
                            "Call"
                        ],
                        [
                            "volume.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "connectomics/model/__init__.py": {
        "torch": {
            "DataParallel_35": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL_MAP[cfg.MODEL.ARCHITECTURE](in_channel=cfg.MODEL.IN_PLANES, out_channel=cfg.MODEL.OUT_PLANES, filters=cfg.MODEL.FILTERS)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=range(cfg.SYSTEM.NUM_GPUS))",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "MODEL_MAP[cfg.MODEL.ARCHITECTURE](in_channel=cfg.MODEL.IN_PLANES, out_channel=cfg.MODEL.OUT_PLANES, filters=cfg.MODEL.FILTERS, pad_mode=cfg.MODEL.PAD_MODE, norm_mode=cfg.MODEL.NORM_MODE, act_mode=cfg.MODEL.ACT_MODE, head_depth=cfg.MODEL.HEAD_DEPTH)",
                            "Call"
                        ],
                        [
                            "MODEL_MAP[cfg.MODEL.ARCHITECTURE]([16, 32, 48, 64, 80])",
                            "Call"
                        ],
                        [
                            "MODEL_MAP[cfg.MODEL.ARCHITECTURE](in_channel=cfg.MODEL.IN_PLANES, out_channel=cfg.MODEL.OUT_PLANES, filters=cfg.MODEL.FILTERS, pad_mode=cfg.MODEL.PAD_MODE, norm_mode=cfg.MODEL.NORM_MODE, act_mode=cfg.MODEL.ACT_MODE, do_embedding=cfg.MODEL.EMBEDDING == 1, head_depth=cfg.MODEL.HEAD_DEPTH, output_act=cfg.MODEL.OUTPUT_ACT)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(cfg.SYSTEM.NUM_GPUS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_56": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.PRE_MODEL",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/block/ASPP.py": {
        "torch": {
            "rand_126": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_132": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.atrous_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * middle",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/block/basic.py": {
        "torch": {
            "matmul_204": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.in_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "f_div_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool3d_151": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_17": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_mode if padding != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if max(padding) != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if padding != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if max(padding) != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "'rep'",
                            "MethodArgument"
                        ],
                        [
                            "'rep'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_mode if padding != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if max(padding) != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if padding != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "pad_mode if max(padding) != 0 else 'zeros'",
                            "IfExp"
                        ],
                        [
                            "'rep'",
                            "MethodArgument"
                        ],
                        [
                            "'rep'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_155": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_159": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_85": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_86": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReplicationPad3d_112": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "tuple([x for x in padding for _ in range(2)][::-1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_113": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "float(mode[5:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_55": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_57": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_59": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/block/dilated_fusion.py": {
        "torch": {}
    },
    "connectomics/model/block/residual.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_norm_act(in_planes, out_planes, kernel_size=(3, 3), padding=(1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(1, 3, 3), padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(3, 3, 3), padding=(1, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(1, 3, 3), padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(3, 3, 3), padding=(1, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(1, 3, 3), padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(3, 3, 3), padding=(1, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(3, 3, 3), padding=(1, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_norm_act(in_planes, out_planes, kernel_size=(1, 1), padding=(0, 0), norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes, out_planes, kernel_size=(1, 1, 1), padding=(0, 0, 0), norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/block/setup.py": {
        "torch": {}
    },
    "connectomics/model/block/squeeze_excitation.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_15": {
                "kernel_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_19": {
                "scale_factor": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool3d_40": {
                "kernel_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_44": {
                "scale_factor": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/loss/loss.py": {
        "torch": {
            "prod_224": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(pred.size()[2:]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.07, 0.93]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_275": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_295": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sort_466": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_470": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_260": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_556": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_586": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "data": {
                    "value": "pred.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_295": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(diff), min=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_353": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_470": {
                "input": {
                    "value": "errors_sorted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_228": {
                "input": {
                    "value": "(pred - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "weight * (pred - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_559": {
                "input": {
                    "value": "errors_sorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(self.lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/norm/batchinstancenorm.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_norm_22": {
                "variable": {
                    "value": "out_bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, b * c, *input.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "bn_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight * self.gate",
                            "BinOp"
                        ],
                        [
                            "self.gate",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_33": {
                "variable": {
                    "value": "out_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, b * c, *input.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "running_var": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/norm/sync/batchnorm.py": {
        "torch": {
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/norm/sync/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/norm/sync/replicate.py": {
        "torch": {}
    },
    "connectomics/model/norm/sync/unittest_sync.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/utils/criterion.py": {
        "torch": {
            "from_numpy_58": {
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "L1Loss_27": {
                "variable": {
                    "value": "regu[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/utils/initialization.py": {
        "torch": {
            "normal_23": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "sqrt(1.0 / fan_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_26": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "sqrt(1.0 / fan_in)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/utils/visualizer.py": {
        "torch": {
            "split_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(output, split_channels, dim=1)",
                            "Call"
                        ],
                        [
                            "list(output)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.num_channels_dict[x.split('-')[0]] for x in self.cfg.MODEL.TARGET_OPT]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "canvas_merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "canvas + output_visual",
                            "BinOp"
                        ],
                        [
                            "canvas + label_visual",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(output, split_channels, dim=1)",
                            "Call"
                        ],
                        [
                            "list(output)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_88": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(output, split_channels, dim=1)",
                            "Call"
                        ],
                        [
                            "list(output)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "colors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "self.semantic_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.rand(3) for _ in range(channels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/zoo/fpn.py": {
        "torch": {
            "randn_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "residual_block_2d(in_channel, filters[0], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "residual_block_2d(filters[0], filters[1], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "residual_block_3d(filters[1], filters[2], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "bottleneck_dilated_3d(filters[2], filters[3], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "bottleneck_dilated_3d(filters[3], filters[4], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool3d_47": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_48": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up(self.up(self.up(self.up(y5) + y4) + y3) + y2) + y1",
                            "BinOp"
                        ],
                        [
                            "self.fconv(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "connectomics/model/zoo/p3d.py": {
        "torch": {
            "ones_34": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_82": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(raw_out - bias_view, self.mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(output, self.update_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out, self.mask_ratio)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(PartialConv3d, self).forward(torch.mul(input, mask_in) if mask_in is not None else input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_65": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(input.data.shape[0], input.data.shape[1], input.data.shape[2], input.data.shape[3], input.data.shape[4]).to(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, input.data.shape[2], input.data.shape[3], input.data.shape[4]).to(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_70": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_71": {
                "variable": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_77": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mask_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_81": {
                "input": {
                    "value": "raw_out - bias_view",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input.data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "input.data.shape[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "input.data.shape[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/zoo/rsunet.py": {
        "torch": {
            "Tensor_364": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_365": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_55": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_nin",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_99": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_nin",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "fs",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_186": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool3d_311": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose3d_198": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(np.random.random((1, 1, 32, 256, 256)).astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "residual_sum(x, skip, self.residual)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.embed_in(x, mask_in)",
                            "Call"
                        ],
                        [
                            "convmod(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x)",
                            "Call"
                        ],
                        [
                            "xx",
                            "Name"
                        ],
                        [
                            "dconvmod(upsample(x, skip[d]))",
                            "Call"
                        ],
                        [
                            "xx",
                            "Name"
                        ],
                        [
                            "dconvmod(upsample(x, skip[d]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "[out_o, out_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_217": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/zoo/super_resolution.py": {
        "torch": {
            "randn_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_15": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 4, 64, 64)",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv1(x))",
                            "Call"
                        ],
                        [
                            "x[:, :, :x.size()[2] - 1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "connectomics/model/zoo/unet_2d.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.downC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv2d_norm_act(in_planes=filters[x], out_planes=filters[x + 1], kernel_size=(3, 3), stride=1, padding=(1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=True, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=False, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=True, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)) for x in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "bottleneck_dilated_2d(filters[-2], filters[-1], projection=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.upC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv2d_norm_act(in_planes=filters[x + 1], out_planes=filters[x + 1], kernel_size=(3, 3), stride=1, padding=(1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=True, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=False, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_2d_c2(filters[x + 1], filters[x + 1], projection=True, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)) for x in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.downS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.MaxPool2d(kernel_size=(2, 2), stride=(2, 2)) for x in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.upS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(*head_pred)] + [nn.Sequential(conv2d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode), nn.Upsample(scale_factor=(2, 2), mode='bilinear', align_corners=False)) for x in range(1, 1 + self.depth)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.side_out3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_156": {
                "variable": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.side_out3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "variable": {
                    "value": "so0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.side_out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_bn_elu(filters[1], filters[0], kernel_size=(3, 3), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_234": {
                "variable": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.side_out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_bn_elu(filters[2], filters[0], kernel_size=(3, 3), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "variable": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_282": {
                "variable": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "self.side_out3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_bn_elu(filters[3], filters[0], kernel_size=(3, 3), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_317": {
                "variable": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.so3_fconv(so3_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ],
                        [
                            "self.side_out3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_326": {
                "variable": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.so2_fconv(so2_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ],
                        [
                            "self.side_out2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_334": {
                "variable": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "so1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.so1_fconv(so1_add)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ],
                        [
                            "self.side_out1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(so1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_352": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool3d(kernel_size=self.pool_size, stride=self.pool_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_242": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_290": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_342": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_193": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_244": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_344": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool3d_353": {
                "kernel_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_354": {
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // channel_reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_356": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_357": {
                "in_channels": {
                    "value": "channel // channel_reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_360": {
                "scale_factor": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "conv2d_norm_act(in_planes=filters[x], out_planes=filters[x + 1], kernel_size=(3, 3), stride=1, padding=(1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "conv2d_norm_act(in_planes=filters[x + 1], out_planes=filters[x + 1], kernel_size=(3, 3), stride=1, padding=(1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_41": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*head_pred",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "conv2d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_191": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[i](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "x + self.up(so1_add)",
                            "BinOp"
                        ],
                        [
                            "self.map_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.map_fconv(x)",
                            "Call"
                        ],
                        [
                            "2.0 * (torch.sigmoid(x) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.down(z1)",
                            "Call"
                        ],
                        [
                            "self.down(z2)",
                            "Call"
                        ],
                        [
                            "self.down(z3)",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x + z3",
                            "BinOp"
                        ],
                        [
                            "self.layer3_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "x + z2",
                            "BinOp"
                        ],
                        [
                            "self.layer2_D(x)",
                            "Call"
                        ],
                        [
                            "self.up(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x + z1",
                            "BinOp"
                        ],
                        [
                            "self.layer1_D(x)",
                            "Call"
                        ],
                        [
                            "self.fconv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Upsample_49": {
                "scale_factor": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/zoo/unet_residual.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.downC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv3d_norm_act(in_planes=filters[x], out_planes=filters[x + 1], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_3d(filters[x + 1], filters[x + 1], projection=False, pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)) for x in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_82": {
                "variable": {
                    "value": "self.downS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[conv3d_norm_act(in_planes=filters[x], out_planes=filters[x], kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode) for x in range(self.depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes=filters[-2], out_planes=filters[-1], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv3d_norm_act(in_planes=filters[x], out_planes=filters[x], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)) for x in range(self.depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.upC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv3d_norm_act(in_planes=filters[x + 1], out_planes=filters[x + 1], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode), residual_block_3d(filters[x + 1], filters[x + 1], projection=False)) for x in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "conv_transpose3d_34": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downS[0](z)",
                            "Call"
                        ],
                        [
                            "self.downS[i + 1](down_u[i])",
                            "Call"
                        ],
                        [
                            "self.center(x)",
                            "Call"
                        ],
                        [
                            "down_u[i] + self.upS[i + 1](x)",
                            "BinOp"
                        ],
                        [
                            "self.upC[i](x)",
                            "Call"
                        ],
                        [
                            "z + self.upS[0](x)",
                            "BinOp"
                        ],
                        [
                            "self.upE(x)",
                            "Call"
                        ],
                        [
                            "self.upS[0](x)",
                            "Call"
                        ],
                        [
                            "get_functional_act(self.output_act)(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.downE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes=in_channel, out_planes=filters[0], kernel_size=(1, 5, 5), stride=1, padding=(0, 2, 2), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.upE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3d_norm_act(in_planes=filters[0], out_planes=filters[0], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.upS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(conv3d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode), BilinearUp(filters[x], filters[x], factor=(1, 2, 2))) for x in range(self.depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.upS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(*head_pred)] + [nn.Sequential(conv3d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode), BilinearUp(filters[x], filters[x], factor=(1, 2, 2))) for x in range(1, self.depth + 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "conv3d_norm_act(in_planes=filters[x], out_planes=filters[x + 1], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "conv3d_norm_act(in_planes=filters[x], out_planes=filters[x], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "conv3d_norm_act(in_planes=filters[x + 1], out_planes=filters[x + 1], kernel_size=(1, 3, 3), stride=1, padding=(0, 1, 1), pad_mode=pad_mode, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "conv3d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*head_pred",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "conv3d_norm_act(filters[x + 1], filters[x], kernel_size=(1, 1, 1), padding=0, norm_mode=norm_mode, act_mode=act_mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "connectomics/model/zoo/unet_super.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_20": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 18, 64, 64)",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv1(x))",
                            "Call"
                        ],
                        [
                            "x[:, :, :x.size()[2] - 1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/main.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/tools/evaluation/evaluate_syn.py": {
        "torch": {
            "DataLoader_230": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Eva_08nm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SynEvaluate(pd_path, gt_path, iou_thres=float(sys.argv[1]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/tools/run/run_deploy.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SynapseDataset(volume=[volume], label=None, vol_input_size=model_input_size, vol_label_size=None, sample_stride=model_input_size / 2, data_aug=None, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_194": {
                "f": {
                    "value": "classifier_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dp + 'volume_100000.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/tools/tests/test_misc.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([50, 50], np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}