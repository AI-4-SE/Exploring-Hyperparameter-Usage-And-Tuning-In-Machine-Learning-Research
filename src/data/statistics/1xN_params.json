{
    "data/imagenet.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "self.trainLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.Resize(scale_size), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "self.testLoader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.Resize(scale_size), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/imagenet_dali.py": {
        "torch": {}
    },
    "imagenet.py": {
        "torch": {
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{args.gpus[0]}') if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "f'cuda:{args.gpus[0]}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_359": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pruned_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{args.gpus[0]}') if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_385": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.job_dir + '/checkpoint/model_last.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_432": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': bn_params, 'weight_decay': args.weight_decay}, {'params': rest_params, 'weight_decay': args.weight_decay}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_311": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch]().to(device)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]().to(device)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=args.gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_350": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{args.gpus[0]}') if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_377": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{args.gpus[0]}') if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_446": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/mobilenet_v1.py": {
        "torch": {
            "Sequential_12": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.Conv2d(inp, inp, 3, stride, 1, groups=inp, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.conv1x1_fc(cfg[-1], n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 7)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/mobilenet_v2.py": {
        "torch": {
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "builder.conv2d(inp, oup, 1, 1, 0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_113": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.conv2d(inp, hidden_dim, 1, 1, 0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "p": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU6_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU6_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel * t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU6_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/mobilenet_v3.py": {
        "torch": {
            "ReLU6_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_60": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.conv1x1_fc(channel, _make_divisible(channel // reduction, 8))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "builder.conv2d(inp, oup, 1, 1, 0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_147": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.conv1x1_fc(exp_size, output_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, (kernel_size - 1) // 2, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.conv2d(inp, hidden_dim, 1, 1, 0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/builder.py": {
        "torch": {
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_137": {
                "input": {
                    "value": "conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/common.py": {
        "torch": {
            "log_softmax_27": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{self.ckpt_dir}/model_last.pt'",
                            "JoinedStr"
                        ],
                        [
                            "f'{self.ckpt_dir}/bestmodel_after_bee.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_128": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{self.ckpt_dir}/model_last.pt'",
                            "JoinedStr"
                        ],
                        [
                            "f'{self.ckpt_dir}/bestmodel_after_bee.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/conv_type.py": {
        "torch": {
            "sum_27": {
                "variable": {
                    "value": "w_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(rearrange_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_28": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(rearrange_w), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "sparseWeight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask.cpu() * self.weight.cpu()",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "l1_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(sparseWeight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_62": {
                "variable": {
                    "value": "(_, indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "prune",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "re_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "re_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(m)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_82": {
                "variable": {
                    "value": "(_, indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "prune",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_83": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "sparseWeight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask.cpu() * self.weight.cpu()",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_111": {
                "variable": {
                    "value": "indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(preserve,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "sparseWeight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask.cpu() * self.weight.cpu()",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_139": {
                "variable": {
                    "value": "(_, indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(w.size(0) * prune_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "m.view(self.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, sparseWeight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "sparseWeight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask.cpu() * self.weight.cpu()",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_163": {
                "variable": {
                    "value": "(_, indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "prune",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ],
                        [
                            "int(w.size(0) * pr_rate)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_164": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_in, c_out, k_1, k_2)",
                            "Call"
                        ],
                        [
                            "m.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.mask.detach().cpu()",
                            "Call"
                        ],
                        [
                            "m.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(w.size(0))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, 1)",
                            "Call"
                        ],
                        [
                            "m.repeat(1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "m.view(c_out, c_in, k_1, k_2)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "rearrange_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w.view(c_out, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_35": {
                "*size": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "sparseWeight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask.cpu() * self.weight.cpu()",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.mask * self.weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_61": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_81": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_96": {
                "*size": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_139": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_148": {
                "*size": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_162": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[index]",
                            "Subscript"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, N * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.view(-1)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().cpu()",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(-1, c_in * k_1 * k_2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(w), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}