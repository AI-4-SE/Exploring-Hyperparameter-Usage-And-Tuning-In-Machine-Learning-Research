{
    "blackbox_backprop/mAP.py": {
        "torch": {
            "cat_59": {
                "variable": {
                    "value": "long_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output] + [x[0] for x in current_storage]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "long_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target] + [x[1] for x in current_storage]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_47": {
                "input": {
                    "value": "ranks_within_positive * transposed_targets < ranks_of_positive * transposed_targets + epsilon",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "torch.randn_like(transposed_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_40": {
                "input": {
                    "value": "transposed_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blackbox_backprop/perfect_matching.py": {
        "torch": {
            "from_numpy_32": {
                "ndarray": {
                    "value": "ctx.perfect_matchings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-(ctx.perfect_matchings - better_matchings) / ctx.lambda_val",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "blackbox_backprop/ranking.py": {
        "torch": {
            "argsort_5": {
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_5": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "blackbox_backprop/recall.py": {
        "torch": {
            "all_43": {
                "input": {
                    "value": "ranks_for_queries > -TINY_CONSTANT",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "all_score_sequences",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score_sequences,) + tuple(self.batch_storage)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "all_relevance_sequences",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_relevance_sequences,) + tuple(self.labels_storage)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "blackbox_backprop/shortest_path.py": {
        "torch": {
            "from_numpy_87": {
                "ndarray": {
                    "value": "ctx.suggested_tours",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-(ctx.suggested_tours - better_paths) / ctx.lambda_val",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "blackbox_backprop/travelling_salesman.py": {
        "torch": {
            "from_numpy_121": {
                "ndarray": {
                    "value": "suggested_tours",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(maybe_parallelize(gurobi_tsp, arg_list=list(ctx.distance_matrices)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "gradient.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}