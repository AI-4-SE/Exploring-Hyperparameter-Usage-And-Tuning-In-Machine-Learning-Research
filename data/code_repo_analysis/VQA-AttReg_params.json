{
    "tools/preprocess-hint.py": {
        "sklearn": {
            "cosine_similarity_100": {
                "variable": {
                    "value": "obj_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_emb_dict[clss, :]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "exp_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_emb_dict[tokens]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_118": {
                "X": {
                    "value": "exp_emb_dict[obj_token:obj_token + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "objs[j:j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_similarity_120": {
                "variable": {
                    "value": "hint_score[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "exp_emb_dict[attr_token:attr_token + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "atts[j:j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_similarity_119": {
                "X": {
                    "value": "exp_emb_dict[attr_token:attr_token + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "atts[j:j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_138": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(base_model, constructor)(embeddings, num_ans_candidates).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adadelta_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_157": {
                "variable": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adamax_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'acc_val_best': acc_val_best, 'model_state': model.state_dict(), 'optim_state': {k: v.state_dict() for (k, v) in optimizers.items()}}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'acc_val_best': acc_val_best, 'model_state': model.state_dict(), 'optim_state': {k: v.state_dict() for (k, v) in optimizers.items()}}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'acc_val_best': acc_val_best, 'model_state': model.state_dict(), 'optim_state': {k: v.state_dict() for (k, v) in optimizers.items()}}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/attention.py": {
        "torch": {
            "exp_56": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits - torch.max(att_logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "v_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_grad_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_grad_logits.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "v_grad_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "masked_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_211": {
                "variable": {
                    "value": "mask_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(att_logits, dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "_sigmoid(attention)",
                            "Call"
                        ],
                        [
                            "attention.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(hid_dim, glimpses)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_119": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn_like(att_logits).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_225": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * torch.ones_like(x).cuda()",
                            "BinOp"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "glimpses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_56": {
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_96": {
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_228": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_98": {
                "input": {
                    "value": "att_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=topm_idx)",
                            "Call"
                        ],
                        [
                            "att_logits.gather(dim=1, index=rest_idx)",
                            "Call"
                        ],
                        [
                            "att_logits[..., layer].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.linear(self.drop(v_proj * q_proj))",
                            "Call"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ],
                        [
                            "att_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_229": {
                "input": {
                    "value": "-w * (x - c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/base_model.py": {
        "torch": {}
    },
    "model/classifier.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hid_dim[0] if config.fusion_type == 'mul' else hid_dim[0] * 2, hid_dim[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "joint_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_emb, q_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "hid_dim[0] if config.fusion_type == 'mul' else hid_dim[0] * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "hid_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/fc.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._init_layers(dims)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, dimensions[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dimensions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "din",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dimensions[:-1], dimensions[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dimensions[:-1], dimensions[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_25": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "model/language_model.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/rubi.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.c_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "q_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_1(q_embedding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/rubi_criterion.py": {
        "torch": {
            "BCEWithLogitsLoss_12": {
                "variable": {
                    "value": "self.fusion_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_13": {
                "variable": {
                    "value": "self.question_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/vqa_debias_loss_fuctions.py": {
        "torch": {
            "binary_cross_entropy_with_logits_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias + log_probs",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_106": {
                "variable": {
                    "value": "bias_lp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_107": {
                "variable": {
                    "value": "bias_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.bias_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_146": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias_lin.forward(hidden)",
                            "Call"
                        ],
                        [
                            "F.softplus(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias, 1 - bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_156": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([bias, 1 - bias], 2)",
                            "Call"
                        ],
                        [
                            "bias + self.constant_smooth",
                            "BinOp"
                        ],
                        [
                            "bias + soften_factor.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.log(bias)",
                            "Call"
                        ],
                        [
                            "bias * factor.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_163": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_prob, log_one_minus_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_12": {
                "input": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log1p_19": {
                "input": {
                    "value": "torch.exp(-torch.abs(a - b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "soften_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_19": {
                "input": {
                    "value": "-torch.abs(a - b)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_179": {
                "input": {
                    "value": "bias_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias - bias_norm.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train/loss_functions.py": {
        "torch": {
            "stack_82": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, 1 - input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, 1 - target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "config.rcnn_output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_43": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_46": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask_output)",
                            "Call"
                        ],
                        [
                            "mask_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_72": {
                "input": {
                    "value": "target * log_cross_item",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(input)",
                            "Call"
                        ],
                        [
                            "torch.stack([input, 1 - input], 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target)",
                            "Call"
                        ],
                        [
                            "torch.stack([target, 1 - target], 2)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_8": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(input)",
                            "Call"
                        ],
                        [
                            "torch.stack([input, 1 - input], 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "(att_gd - att_map).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_baseline.py": {
        "torch": {
            "zeros_like_20": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "neg_gta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_144": {
                "variable": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_ids, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(accs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__107": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_baseline_to_get_importance.py": {
        "torch": {
            "zeros_like_20": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_68": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_ids, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(accs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "preds_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_abs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__99": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "input": {
                    "value": "mask_pred.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_baseline_with_mask.py": {
        "torch": {
            "zeros_like_20": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_77": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_ids, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "grad_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_att.sum(dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "grad_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(accs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__107": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grad_92": {
                "outputs": {
                    "value": "pred.topk(k=5, dim=1)[0].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.cuda().float().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_with_att_debias.py": {
        "torch": {
            "zeros_like_37": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "neg_gta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_answ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_answ, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_ids, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(accs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_36": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__111": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/dataset.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset(split, image_feature_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if split not in ['val', 'test'] else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "hint_score",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.qid2hint[q_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "spatials",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features_file.get('boxes')[img_idx]",
                            "Subscript"
                        ],
                        [
                            "self.load_image(entry['img_idx'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/utils.py": {
        "torch": {}
    }
}