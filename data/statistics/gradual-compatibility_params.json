{
    "data.py": {
        "sklearn": {
            "KFold_9": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "number_of_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_53": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_regularizers.py": {
        "sklearn": {
            "log_loss_118": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_prob(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lr.py": {
        "sklearn": {
            "log_loss_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict_prob(self.X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optimize_lambda.py": {
        "sklearn": {
            "KFold_35": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.number_of_lambda_folds",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_68": {
                "variable": {
                    "value": "fold_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "holdout_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fold_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_fold_model.predict_prob(holdout_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}