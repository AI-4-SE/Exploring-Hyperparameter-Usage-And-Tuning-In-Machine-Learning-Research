{
    "examples/classification.py": {
        "sklearn": {
            "load_breast_cancer_13": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_14": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "roc_auc_score_20": {
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds.probs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/experiments/regression_exp.py": {
        "sklearn": {
            "KFold_86": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "args.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_107": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_trainall",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_trainall",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_squared_error_130": {
                "y_true": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_160": {
                "y_true": {
                    "value": "forecast.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_170": {
                "y_true": {
                    "value": "forecast.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/experiments/survival_exp.py": {
        "sklearn": {
            "SimpleImputer_67": {
                "variable": {
                    "value": "imputer",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SimpleImputer_69": {
                "variable": {
                    "value": "imputer",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "most_frequent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneHotEncoder_71": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_119": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test, E_train, E_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_122": {
                "variable": {
                    "value": "(X_train, X_val, Y_train, Y_val, E_train, E_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "E_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SimpleImputer_97": {
                "variable": {
                    "value": "imputer",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SimpleImputer_99": {
                "variable": {
                    "value": "imputer",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "most_frequent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneHotEncoder_101": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/multiclass_classification.py": {
        "sklearn": {
            "load_breast_cancer_9": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_11": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/poisson.py": {
        "sklearn": {
            "train_test_split_61": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12345",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_squared_error_89": {
                "variable": {
                    "value": "test_MSE",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_139": {
                "variable": {
                    "value": "new_MSE",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_72": {
                "y_true": {
                    "value": "np.repeat(avg_tds, len(Y_test))",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/regression.py": {
        "sklearn": {
            "load_boston_10": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_11": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_squared_error_18": {
                "variable": {
                    "value": "test_MSE",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulations/regression_sim.py": {
        "sklearn": {
            "r2_score_49": {
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "forecast.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulations/survival_sim.py": {
        "sklearn": {
            "train_test_split_35": {
                "variable": {
                    "value": "(X_tr, X_te, Y_tr, Y_te, T_tr, T_te, E_tr, E_te)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "r2_score_52": {
                "y_true": {
                    "value": "Y_te",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.log(preds.mean())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sklearn_cv.py": {
        "sklearn": {
            "load_breast_cancer_12": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_13": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_15": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_16": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_17": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GridSearchCV_27": {
                "variable": {
                    "value": "grid_search",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "ngb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NGBClassifier(natural_gradient=True, verbose=False, Dist=k_categorical(2))",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'n_estimators': [20, 50], 'minibatch_frac': [1.0, 0.5], 'Base': [b1, b2]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/survival.py": {
        "sklearn": {
            "load_boston_11": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_12": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_squared_error_23": {
                "variable": {
                    "value": "test_MSE",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "figures/toy.py": {
        "sklearn": {
            "PolynomialFeatures_39": {
                "variable": {
                    "value": "poly_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "figures/toy_single.py": {
        "sklearn": {
            "PolynomialFeatures_38": {
                "variable": {
                    "value": "poly_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ngboost/api.py": {
        "sklearn": {
            "check_array_311": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_314": {
                "variable": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X_val, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ngboost/helpers.py": {
        "sklearn": {
            "check_array_13": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(T, ensure_2d=False)",
                            "Call"
                        ],
                        [
                            "T.reshape(T.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_18": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones_like(T)",
                            "Call"
                        ],
                        [
                            "check_array(E, ensure_2d=False)",
                            "Call"
                        ],
                        [
                            "E.reshape(E.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ngboost/learners.py": {
        "sklearn": {
            "DecisionTreeRegressor_4": {
                "variable": {
                    "value": "default_tree_learner",
                    "type": "Variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "splitter": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Ridge_14": {
                "variable": {
                    "value": "default_linear_learner",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "ngboost/ngboost.py": {
        "sklearn": {
            "check_random_state_87": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_X_y_269": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "y_numeric": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "multi_output": {
                    "value": "self.multi_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_array_390": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_441": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_X_y_281": {
                "variable": {
                    "value": "(X_val, Y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "Y_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "y_numeric": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "multi_output": {
                    "value": "self.multi_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_166": {
                "estimator": {
                    "value": "self.Base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_250": {
                "variable": {
                    "value": "(X, X_val, Y, Y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_258": {
                "variable": {
                    "value": "(X, X_val, Y, Y_val, sample_weight, val_sample_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "sample_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/conftest.py": {
        "sklearn": {
            "load_boston_27": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_boston_33": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_34": {
                "variable": {
                    "value": "(X_surv_train, X_surv_test, Y_surv_train, Y_surv_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_breast_cancer_48": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_28": {
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_49": {
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_basic.py": {
        "sklearn": {
            "roc_auc_score_16": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict_proba(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_22": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict_proba(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_31": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_squared_error_46": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict_proba(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_55": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict_proba(x_test)",
                            "Call"
                        ],
                        [
                            "ngb.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_distns.py": {
        "sklearn": {
            "DecisionTreeRegressor_39": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_40": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_60": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_61": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_81": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_82": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_101": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_102": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_122": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_123": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_144": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_145": {
                "criterion": {
                    "value": "friedman_mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}