{
    "sample_t2tproblem.py": {
        "tensorflow": {
            "FixedLenFeature_82": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_83": {
                "shape": {
                    "value": "[5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_86": {
                "tensor_key": {
                    "value": "frame_number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "tensor_key": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sv2p_plan.py": {
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_24": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_65": {
                "variable": {
                    "value": "forward_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "self.forward_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "forward_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_size + frame_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_size + [self.num_acts]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_size + frame_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_size + [self.num_acts]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cem/cem.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "action_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=env.action_space.low, high=env.action_space.high, size=[sample_sz, traj_length, act_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_76": {
                "variable": {
                    "value": "(_, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "action_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(preds.shape[:2])",
                            "Call"
                        ],
                        [
                            "_compute_disagrmnt_reward(obs_emb, sample_actions, dynamics_models)",
                            "Call"
                        ],
                        [
                            "_compute_smm_reward(args, preds[:, :, :], goal_vae, density_vae)",
                            "Call"
                        ],
                        [
                            "action_rewards.mean(-1)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(action_rewards).tolist()",
                            "Call"
                        ],
                        [
                            "_compute_classifier_reward(args, preds[:, :, :], classifiers)",
                            "Call"
                        ],
                        [
                            "_compute_disagrmnt_reward(ob, sample_actions, dynamics_models)",
                            "Call"
                        ],
                        [
                            "_compute_smm_reward(args, preds[:, :, :], goal_vae, density_vae)",
                            "Call"
                        ],
                        [
                            "_compute_classifier_reward(args, preds[:, :, :], classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_83": {
                "*size": {
                    "value": "sample_actions.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/conv_discriminator.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_24": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_49": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/discriminator.py": {
        "torch": {
            "spectral_norm_23": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(input_dim, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_24": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_25": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(64, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_26": {
                "variable": {
                    "value": "self.l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_33": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(input_size)",
                            "Call"
                        ],
                        [
                            "np.prod(input_size)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_68": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_70": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_72": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_75": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_80": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(input_size)",
                            "Call"
                        ],
                        [
                            "np.prod(input_size)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/goal_vae.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.enc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.enc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(code_dim, 150)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(obs - obs_distribution_params) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_prob, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "-1.0 * F.mse_loss(obs[:, :, :], obs_distribution_params, reduction='mean')",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(input_size)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(input_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_mu(enc_features)",
                            "Call"
                        ],
                        [
                            "self.enc_mu(enc_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_92": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_97": {
                "input": {
                    "value": "obs[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "obs_distribution_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dec(code)",
                            "Call"
                        ],
                        [
                            "self.dec(code)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_vae.py": {
        "torch": {
            "Sigmoid_17": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_30": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_33": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[:, :, :self.hidden_size]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[:, :, self.hidden_size:]",
                            "Subscript"
                        ],
                        [
                            "std.clamp(min=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "std.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_36": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(mu.shape).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(std.shape).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_38": {
                "variable": {
                    "value": "klloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_55": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_100": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_102": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_103": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_104": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_106": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_108": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/train.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "enc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "enc_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_50": {
                "variable": {
                    "value": "enc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "dyn_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dyn_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(dyn_losses).sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_70": {
                "variable": {
                    "value": "dyn_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classifier_losses).sum()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classifier_losses).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_136": {
                "variable": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classifier_losses).sum()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classifier_losses).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_170": {
                "variable": {
                    "value": "classifier_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer.draw_samples(batch_size=batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs).float().to(device)",
                            "Call"
                        ],
                        [
                            "obs.reshape(-1, 3, 64, 64)",
                            "Call"
                        ],
                        [
                            "obs.reshape(-1, 3, 64, 64)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer.draw_samples(batch_size=batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(next_obs).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer.draw_samples(batch_size=batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(actions).float().to(device)",
                            "Call"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ng_z, g_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(ng_z.size(0)), torch.ones(g_z.size(0)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "lams",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([np.random.beta(1, 1) for _ in range(batch_sz)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "lams",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lams * shuffled_xs[:batch_sz] + (1.0 - lams) * shuffled_xs[batch_sz:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obs_samples, g_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(obs_samples.size(0)), torch.ones(g_samples.size(0)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred_scores)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(pred_scores)",
                            "Call"
                        ],
                        [
                            "y_hat.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred_scores)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_121": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.update(obs_z[:, :predlen, :], next_z[:, :predlen, :], actions[:, :predlen, :])",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(x_out, y_out)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_132": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.update(obs_z[:, :predlen, :], next_z[:, :predlen, :], actions[:, :predlen, :])",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(x_out, y_out)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_161": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred_scores)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(pred_scores)",
                            "Call"
                        ],
                        [
                            "y_hat.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred_scores)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_167": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.update(obs_z[:, :predlen, :], next_z[:, :predlen, :], actions[:, :predlen, :])",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(x_out, y_out)",
                            "Call"
                        ],
                        [
                            "classifier.criterion(y_hat.squeeze(1), ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_126": {
                "n": {
                    "value": "shuffled_xs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "ng_z.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "g_z.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "obs_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "g_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/transition_model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "ipt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ipt, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "next_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(next_step, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_16": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + action_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + action_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_util.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_7": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_36": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "data": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_58": {
                "mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "enc_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "enc_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(enc_dec.params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "dyn_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "list(dynamics_model.params)",
                            "Call"
                        ],
                        [
                            "list(dynamics_model.params)",
                            "Call"
                        ],
                        [
                            "dyn_params + list(dynamics_model.params)",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "goals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(get_goal_imgs(args, env, filepath=args.log_dir + '/goal_ims'))",
                            "Call"
                        ],
                        [
                            "goals / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(goals).float().to(device)",
                            "Call"
                        ],
                        [
                            "goals.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_148": {
                "variable": {
                    "value": "c_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(classifier.params)",
                            "Call"
                        ],
                        [
                            "c_params + list(classifier.params)",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(density_vae.params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(goal_vae.params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "env.reset_model(add_noise=args.add_noise)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ob).unsqueeze(0).permute(0, 3, 1, 2).float().to(device)",
                            "Call"
                        ],
                        [
                            "next_ob",
                            "variable"
                        ]
                    ]
                }
            },
            "unsqueeze_204": {
                "variable": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_204": {
                "variable": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "args.reload + '/enc_dec/{}model.bin'.format(args.reload_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "next_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.step(action)",
                            "Call"
                        ],
                        [
                            "torch.tensor(next_ob).permute(2, 0, 1).float().to(device).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_233": {
                "variable": {
                    "value": "next_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "variable": {
                    "value": "next_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_obs(args, env_info)",
                            "Call"
                        ],
                        [
                            "img_buffer.draw_samples(batch_size=args.batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_buffer.draw_samples(batch_size=args.batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(next_obs).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_random_action_sequence(env, args.traj_length, sample_sz=1)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(actions).squeeze(0)",
                            "Call"
                        ],
                        [
                            "sorted_actions[act]",
                            "Subscript"
                        ],
                        [
                            "img_buffer.draw_samples(batch_size=args.batch_sz, length=predlen)",
                            "Call"
                        ],
                        [
                            "torch.tensor(actions).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_405": {
                "obj": {
                    "value": "enc_dec.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_dec.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "args.reload + '/dynamics_model/{}model.bin'.format(args.reload_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_410": {
                "obj": {
                    "value": "dynamics_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dynamics_model.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_415": {
                "obj": {
                    "value": "goal_vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "goal_vae.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_416": {
                "obj": {
                    "value": "density_vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "density_vae.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "args.reload + '/classifier/{}/{}model.bin'.format(i, args.reload_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_413": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "classifier.savedir + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/logging.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "ordered_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ordered_preds[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "ordered_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ordered_preds[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "aug_im",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aug_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((left_b, im, right_b), axis=2)",
                            "Call"
                        ],
                        [
                            "np.concatenate((top_b, aug_im, bottom_b), axis=3)",
                            "Call"
                        ],
                        [
                            "aug_im[:, :, rands[1]:rands[1] + 64, rands[0]:rands[0] + 64]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(aug_im).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "val_pos_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_pos_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(val_pos_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(val_pos_data).float().to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_125": {
                "variable": {
                    "value": "val_pos_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "val_neg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val_neg_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(val_neg_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(val_neg_data).float().to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_127": {
                "variable": {
                    "value": "val_neg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "root_dir + '/enc_dec/1000model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "pos_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_data[pos]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pos_obs).float().to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_139": {
                "variable": {
                    "value": "pos_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "neg_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "neg_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_data[pos]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(neg_obs).float().to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_143": {
                "variable": {
                    "value": "neg_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.log_dir + '/classifier' + '/{}model.bin'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "y_pos.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_167": {
                "*size": {
                    "value": "y_neg.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}