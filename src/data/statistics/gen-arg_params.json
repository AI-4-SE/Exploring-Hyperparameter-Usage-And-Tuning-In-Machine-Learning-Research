{
    "src/genie/ACE_data_module.py": {
        "torch": {
            "DataLoader_166": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset(os.path.join(data_dir, 'train.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'val.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'test.jsonl'))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset(os.path.join(data_dir, 'train.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'val.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'test.jsonl'))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset(os.path.join(data_dir, 'train.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'val.jsonl'))",
                            "Call"
                        ],
                        [
                            "IEDataset(os.path.join(data_dir, 'test.jsonl'))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/genie/KAIROS_data_module.py": {
        "torch": {
            "DataLoader_241": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_{}/train.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/val.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/test.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_{}/train.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/val.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/test.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_{}/train.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/val.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_{}/test.jsonl'.format(self.hparams.dataset))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/genie/constrained_gen.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "lin_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.config.decoder.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_111": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len, self.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pointer_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_124": {
                "variable": {
                    "value": "seen_lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size, seq_len, self.vocab_size), fill_value=-1000, dtype=pointer_logits.dtype).to(pointer_logits.device)",
                            "Call"
                        ],
                        [
                            "self.convert_pointer_logits_to_lm_logits(pointer_logits, input_ids)",
                            "Call"
                        ],
                        [
                            "self.convert_pointer_logits_to_lm_logits(pointer_logits, input_ids)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "extra_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_num_tokens - old_num_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.final_logits_bias.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_logits_bias, extra_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_171": {
                "variable": {
                    "value": "pointer_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ilk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "full_426": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_518": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "decoder_start_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_start_token_id if decoder_start_token_id is not None else self.config.decoder_start_token_id",
                            "IfExp"
                        ],
                        [
                            "bos_token_id",
                            "Name"
                        ],
                        [
                            "self.config.decoder.bos_token_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_532": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointer_logits.size(0)",
                            "Call"
                        ],
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "(1, self.transformer.shared.num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_219": {
                "variable": {
                    "value": "pointer_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ilk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_225": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_644": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_645": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logscores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_645": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_648": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/genie/data.py": {
        "torch": {
            "stack_16": {
                "variable": {
                    "value": "input_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(ex['input_token_ids']) for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "input_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.BoolTensor(ex['input_attn_mask']) for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "tgt_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(ex['tgt_token_ids']) for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "tgt_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.BoolTensor(ex['tgt_attn_mask']) for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/genie/data_module.py": {
        "torch": {
            "DataLoader_146": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_data/train.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/val.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/test.jsonl')",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_data/train.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/val.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/test.jsonl')",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IEDataset('preprocessed_data/train.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/val.jsonl')",
                            "Call"
                        ],
                        [
                            "IEDataset('preprocessed_data/test.jsonl')",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/genie/model.py": {
        "torch": {
            "mean_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_93": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_93": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(**inputs)",
                            "Call"
                        ],
                        [
                            "self.model(**inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/genie/network.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "lin_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "extra_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_num_tokens - old_num_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.final_logits_bias.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_logits_bias, extra_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_128": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.transformer.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.final_logits_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "(1, self.transformer.shared.num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.transformer.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.final_logits_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_170": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_186": {
                "f": {
                    "value": "args.load_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}