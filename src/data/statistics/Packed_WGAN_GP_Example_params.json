{
    "wgan_mog_g_penalty.py": {
        "torch": {
            "Adam_134": {
                "variable": {
                    "value": "f_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "f.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "g_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_136": {
                "variable": {
                    "value": "f_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "f_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(f.parameters(), lr=0.001, weight_decay=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_137": {
                "variable": {
                    "value": "g_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "g_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(g.parameters(), lr=0.001, weight_decay=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_172": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_172": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(g_z)",
                            "Call"
                        ],
                        [
                            "f(g(z)).mul(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_174": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_40": {
                "variable": {
                    "value": "self.relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.do_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "variable": {
                    "value": "self.relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.do_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "variable": {
                    "value": "self.relu_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.do_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "variable": {
                    "value": "self.relu_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.do_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "in_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "variable": {
                    "value": "self.relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "variable": {
                    "value": "self.relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "variable": {
                    "value": "self.relu_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "variable": {
                    "value": "self.relu_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.do_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.do_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.do_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.do_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "in_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(batch_size * 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "int(dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "self.fc_1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "self.fc_2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "self.fc_3.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_3.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_131": {
                "f": {
                    "value": "weights/999_wgan_critic.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "weights/999_wgan_gen.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mul_152": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "grad_xh_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_165": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(grad_xh_norm - 1) * (grad_xh_norm - 1) * lmbda",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_165": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_166": {
                "variable": {
                    "value": "m_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_z - f_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_166": {
                "variable": {
                    "value": "m_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_185": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_185": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "x_g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "grad_xh_norm[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ag.grad(f_xh[b][0], x_hat, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_194": {
                "obj": {
                    "value": "f.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights/ + str(it) + _wgan_critic.ckpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "g.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights/ + str(it) + _wgan_gen.ckpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gen.get_random_sample(batch_size)",
                            "Call"
                        ],
                        [
                            "sample_gen.get_random_sample(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_157": {
                "input": {
                    "value": "torch.diag(eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(data).cuda().float(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x_g * self.sigma_list[0] + self.mu_list[0]",
                            "BinOp"
                        ],
                        [
                            "x_g * self.sigma_list[1] + self.mu_list[1]",
                            "BinOp"
                        ],
                        [
                            "x_g * self.sigma_list[2] + self.mu_list[2]",
                            "BinOp"
                        ],
                        [
                            "self.fc_1(z)",
                            "Call"
                        ],
                        [
                            "self.relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.do_1(x)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "self.relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.do_2(x)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "self.relu_3(x)",
                            "Call"
                        ],
                        [
                            "self.do_3(x)",
                            "Call"
                        ],
                        [
                            "self.fc_4(x)",
                            "Call"
                        ],
                        [
                            "self.relu_4(x)",
                            "Call"
                        ],
                        [
                            "self.do_4(x)",
                            "Call"
                        ],
                        [
                            "self.fc_5(x)",
                            "Call"
                        ],
                        [
                            "self.fc_1(z)",
                            "Call"
                        ],
                        [
                            "self.relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.do_1(x)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "self.relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.do_2(x)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "self.relu_3(x)",
                            "Call"
                        ],
                        [
                            "self.do_3(x)",
                            "Call"
                        ],
                        [
                            "self.fc_4(x)",
                            "Call"
                        ],
                        [
                            "self.relu_4(x)",
                            "Call"
                        ],
                        [
                            "self.do_4(x)",
                            "Call"
                        ],
                        [
                            "self.fc_5(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_158": {
                "input": {
                    "value": "torch.diag(1 - eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "g_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_157": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.rand(batch_size), requires_grad=True).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_158": {
                "input": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_163": {
                "outputs": {
                    "value": "f_xh[b][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(x1 + x2, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_156": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_152": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}