{
    "pGRACE/utils.py": {
        "sklearn": {},
        "torch": {
            "ones_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "test_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, 2 * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((num_nodes,)).to(edge_index.device).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "(1 - damp) * x + damp * agg_msg",
                            "BinOp"
                        ],
                        [
                            "nx.eigenvector_centrality_numpy(graph)",
                            "Call"
                        ],
                        [
                            "[x[i] for i in range(data.num_nodes)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pGRACE/eval.py": {
        "torch": {
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogSoftmax_60": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_15": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[0].x.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pGRACE/functional.py": {
        "torch": {
            "bernoulli_20": {
                "variable": {
                    "value": "drop_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.repeat(x.size(0)).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "w",
                            "Name"
                        ]
                    ]
                }
            },
            "bernoulli_33": {
                "variable": {
                    "value": "drop_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.repeat(x.size(0)).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "w",
                            "Name"
                        ]
                    ]
                }
            },
            "bernoulli_62": {
                "variable": {
                    "value": "sel_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - edge_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_71": {
                "variable": {
                    "value": "s_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deg_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deg[edge_index[1]].to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_81": {
                "variable": {
                    "value": "s_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv[edge_index[0]].to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_82": {
                "variable": {
                    "value": "s_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv[edge_index[1]].to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_8": {
                "*size": {
                    "value": "(x.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "evc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigenvector_centrality(data)",
                            "Call"
                        ],
                        [
                            "evc.where(evc > 0, torch.zeros_like(evc))",
                            "Call"
                        ],
                        [
                            "evc + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / w.mean() * p",
                            "BinOp"
                        ],
                        [
                            "w.where(w < threshold, torch.ones_like(w) * threshold)",
                            "Call"
                        ],
                        [
                            "w / w.mean() * p",
                            "BinOp"
                        ],
                        [
                            "w.where(w < threshold, torch.ones_like(w) * threshold)",
                            "Call"
                        ],
                        [
                            "x.t() @ node_c",
                            "BinOp"
                        ],
                        [
                            "w.log()",
                            "Call"
                        ],
                        [
                            "x.t() @ node_c",
                            "BinOp"
                        ],
                        [
                            "w.log()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / w.mean() * p",
                            "BinOp"
                        ],
                        [
                            "w.where(w < threshold, torch.ones_like(w) * threshold)",
                            "Call"
                        ],
                        [
                            "w / w.mean() * p",
                            "BinOp"
                        ],
                        [
                            "w.where(w < threshold, torch.ones_like(w) * threshold)",
                            "Call"
                        ],
                        [
                            "x.t() @ node_c",
                            "BinOp"
                        ],
                        [
                            "w.log()",
                            "Call"
                        ],
                        [
                            "x.t() @ node_c",
                            "BinOp"
                        ],
                        [
                            "w.log()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_weights / edge_weights.mean() * p",
                            "BinOp"
                        ],
                        [
                            "edge_weights.where(edge_weights < threshold, torch.ones_like(edge_weights) * threshold)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pGRACE/model.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_proj_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_proj_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "elu_64": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_69": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z1.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_70": {
                "input": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_73": {
                "input": {
                    "value": "x / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_77": {
                "input": {
                    "value": "between_sim.diag() / (refl_sim.sum(1) + between_sim.sum(1) - refl_sim.diag())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "x / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "between_sim[:, i * batch_size:(i + 1) * batch_size].diag() / (refl_sim.sum(1) + between_sim.sum(1) - refl_sim[:, i * batch_size:(i + 1) * batch_size].diag())",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sp(source=args.param, preprocess='nni')",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "param['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sp(source=args.param, preprocess='nni')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_139": {
                "obj": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_split(data.num_nodes, train_ratio=0.1, val_ratio=0.1)",
                            "Call"
                        ],
                        [
                            "torch.load(args.load_split)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_181": {
                "variable": {
                    "value": "feature_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.x.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}