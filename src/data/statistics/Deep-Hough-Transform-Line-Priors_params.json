{
    "ht-lcnn/demo.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args['<checkpoint>']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sio.loadmat(C.io.vote_index)['vote_index']",
                            "Subscript"
                        ],
                        [
                            "hough_transform(rows=128, cols=128, theta_res=3, rho_res=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vote_index).float().contiguous().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.rollaxis(image, 2)[None].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "[1, 1, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "[1, 1, 2, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/datasets.py": {
        "torch": {
            "zeros_87": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "link",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "link",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(link)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.imread(iname).astype(float)[:, :, :3]",
                            "Subscript"
                        ],
                        [
                            "image[:, ::-1, :]",
                            "Subscript"
                        ],
                        [
                            "(image - M.image.mean) / M.image.stddev",
                            "BinOp"
                        ],
                        [
                            "np.rollaxis(image, 2).copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "npz[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "npz['junc'][:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "npz['junc'][:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "lpre[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[torch.ones(npos), torch.zeros(nneg)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "npos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "nneg",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/models/HT.py": {
        "torch": {
            "Sequential_81": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.view(batch, channel, -1).view(batch * channel, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "input_HT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_HT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(input_HT)",
                            "Call"
                        ],
                        [
                            "input_HT.view(batch, channel, self.h * self.w).view(batch * channel, self.h * self.w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_block(inplanes, inplanes, kernel_size=(9, 1), padding=(4, 0), bias=True, groups=inplanes)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_block(inplanes, outplanes, kernel_size=(9, 1), padding=(4, 0), bias=True)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_block(outplanes, outplanes, kernel_size=(9, 1), padding=(4, 0), bias=True)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_129": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes + outplanes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_143": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/models/hourglass_ht.py": {
        "torch": {
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_77": {
                "variable": {
                    "value": "low1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "up2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hg[n - 1][2](low2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.hg_ht",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg_ht",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "modules": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "modules": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/models/hourglass_pose.py": {
        "torch": {
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "low1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "up2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hg[n - 1][2](low2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_110": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_158": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "modules": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "modules": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/models/line_vectorizer.py": {
        "torch": {
            "max_pool2d_233": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M.dim_loi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_44": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(inplanes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool1d(scale_factor, scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_36": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "M.n_pts0 // M.n_pts1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "M.n_pts0 // M.n_pts1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(M.dim_loi * M.n_pts1 + FEATURE_DIM, M.dim_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(result['feature'])",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, M.n_pts1 * M.dim_loi)",
                            "Call"
                        ],
                        [
                            "self.fc2(x).flatten()",
                            "Call"
                        ],
                        [
                            "(index % 128).float() + torch.gather(joff[:, 1], 1, index) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "result[preds][lines]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "result[preds][score]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "result[preds][juncs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[jcs[i][0] for i in range(n_batch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_169": {
                "variable": {
                    "value": "(score, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "jmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "non_maximum_suppression(jmap).reshape(n_type, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(int((jmap > M.eval_junc_thres).float().sum().item()), max_K)",
                            "Call"
                        ],
                        [
                            "min(int(N * 2 + 2), max_K)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y[..., None], x[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xy_ - junc) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_180": {
                "variable": {
                    "value": "(cost, match)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((xy_ - junc) ** 2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_189": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n_type * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jmap.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_190": {
                "variable": {
                    "value": "(u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(n_type * K, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(n_type * K, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_225": {
                "variable": {
                    "value": "line",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyu[:, None], xyv[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_21": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "M.n_pts0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p, meta['lpre']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "result[preds][junts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[jcs[i][1] for i in range(n_batch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_196": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Lpos[up, vp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_215": {
                "variable": {
                    "value": "cdx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(M.n_dyn_othr,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jmap.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_244": {
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_246": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_247": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_249": {
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_250": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_252": {
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outplanes // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_29": {
                "kernel_size": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "M.n_pts0 // M.n_pts1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "M.n_pts0 // M.n_pts1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "M.dim_loi * M.n_pts1 + FEATURE_DIM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "M.dim_loi * M.n_pts1 + FEATURE_DIM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "M.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "M.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_110": {
                "variable": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s[idx[i]:idx[i + 1]]",
                            "Subscript"
                        ],
                        [
                            "s0[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[idx[i]:idx[i + 1]].sum()[None] for i in range(n_batch)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "jcs[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[M.n_out_junc, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_170": {
                "input": {
                    "value": "joff[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_171": {
                "input": {
                    "value": "joff[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "[1, M.n_out_line, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "[1, M.n_out_line]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_202": {
                "n": {
                    "value": "len(cdx)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jmap.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_210": {
                "n": {
                    "value": "len(cdx)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jmap.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_118": {
                "start": {
                    "value": "M.n_out_junc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_112": {
                "start": {
                    "value": "M.n_out_line",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "M.n_out_line",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/models/multitask_learner.py": {
        "torch": {
            "abs_104": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "[head(x) for head in self.heads]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_77": {
                "variable": {
                    "value": "L[lmap]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[offset[0]:offset[1]].squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "T['lmap']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "L[lmap]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_98": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.Conv2d(input_channels, m, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(M.head_size, [])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/trainer.py": {
        "torch": {
            "save_145": {
                "obj": {
                    "value": "{'iteration': self.iteration, 'arch': self.model.__class__.__name__, 'optim_state_dict': self.optim.state_dict(), 'model_state_dict': self.model.state_dict(), 'best_mean_loss': self.best_mean_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.out, 'checkpoint_latest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/lcnn/utils.py": {
        "torch": {}
    },
    "ht-lcnn/process.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sio.loadmat(C.io.vote_index)['vote_index']",
                            "Subscript"
                        ],
                        [
                            "hough_transform(rows=128, cols=128, theta_res=3, rho_res=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vote_index).float().contiguous().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args['<checkpoint>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "WireframeDataset(rootdir=C.io.datadir, split='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "M.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "C.io.num_workers if os.name != 'nt' else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ht-lcnn/train.py": {
        "torch": {
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "WireframeDataset(datadir, split='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "M.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "WireframeDataset(datadir, split='valid')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "M.batch_size_eval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vote_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sio.loadmat(C.io.vote_index)['vote_index']",
                            "Subscript"
                        ],
                        [
                            "hough_transform(rows=128, cols=128, theta_res=3, rho_res=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vote_index).float().contiguous().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_108": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(resume_from, 'checkpoint_latest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_147": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "C.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "C.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "C.optim.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "C.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "C.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "C.optim.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}