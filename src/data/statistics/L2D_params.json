{
    "PPO_jssp_multiInstances.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_81": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "configs.decay_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "configs.decay_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_85": {
                "variable": {
                    "value": "self.V_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_171": {
                "seed": {
                    "value": "configs.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(rewards, dtype=torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "(rewards - rewards.mean()) / (rewards.std() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "fea_mb_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memories[i].fea_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_173": {
                "seed": {
                    "value": "configs.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_137": {
                "variable": {
                    "value": "ratios",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - old_logprobs_mb_t_all_env[i].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "memories[i].candidate_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_118": {
                "tensors": {
                    "value": "memories[i].mask_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "memories[i].a_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_120": {
                "tensors": {
                    "value": "memories[i].logprobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "memories[0].adj_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "ndarray": {
                    "value": "np.copy(fea)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "ndarray": {
                    "value": "np.copy(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "ndarray": {
                    "value": "np.copy(candidate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "ndarray": {
                    "value": "np.copy(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "ppo.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./{}.pth'.format(str(configs.n_j) + '_' + str(configs.n_m) + '_' + str(configs.low) + '_' + str(configs.high))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "memories[i].adj_mb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "input": {
                    "value": "ratios",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(logprobs - old_logprobs_mb_t_all_env[i].detach())",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_142": {
                "input": {
                    "value": "surr1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ratios * advantages",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "agent_utils.py": {
        "torch": {
            "Categorical_5": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_13": {
                "variable": {
                    "value": "softmax_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Categorical_28": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mb_agg.py": {
        "torch": {
            "stack_10": {
                "variable": {
                    "value": "idx_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_idx_row, new_idx_col)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "idx_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "idx_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_nodes * batch_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_0, idx_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_25": {
                "variable": {
                    "value": "elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size[0] * n_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 / n_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_30": {
                "variable": {
                    "value": "elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size[0] * n_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/actor_critic.py": {
        "torch": {
            "gather_63": {
                "variable": {
                    "value": "candidate_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_nodes.reshape(dummy.size(0), -1, dummy.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate.unsqueeze(-1).expand(-1, self.n_j, h_nodes.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "concateFea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_feature, h_pooled_repeated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.actor(concateFea)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphcnn_congForSJSSP.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "x_concat",
                            "Name"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "x_concat",
                            "Name"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_144": {
                "variable": {
                    "value": "pooled_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "graph_pool",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "x_concat",
                            "Name"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_77": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "x_concat",
                            "Name"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_102": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "x_concat",
                            "Name"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_80": {
                "variable": {
                    "value": "degree",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones((Adj_block.shape[0], 1)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_105": {
                "variable": {
                    "value": "degree",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones((Adj_block.shape[0], 1)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norms[layer](self.linears[layer](h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_101": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears[layer](h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_154": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears[layer](h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "test_learned.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./SavedNetwork/{}.pth'.format(str(N_JOBS_N) + '_' + str(N_MACHINES_N) + '_' + str(LOW) + '_' + str(HIGH))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "fea_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "adj_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "candidate_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "candidate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_learned_on_benchmark.py": {
        "torch": {
            "load_44": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./SavedNetwork/{}.pth'.format(str(N_JOBS_N) + '_' + str(N_MACHINES_N) + '_' + str(LOW) + '_' + str(HIGH))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "fea_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(fea)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "adj_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "candidate_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(candidate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "fea_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(fea)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "adj_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "candidate_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(candidate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./{}.pth'.format(str(N_JOBS_N) + '_' + str(N_MACHINES_N) + '_' + str(LOW) + '_' + str(HIGH))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}