{
    "dataloaders/dataloader_one_frame.py": {
        "tensorflow": {
            "string_input_producer_26": {
                "variable": {
                    "value": "input_queue",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[self.filenames_file]",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "TextLineReader_29": {
                "variable": {
                    "value": "line_reader",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "self.tgt_img_batch",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_img_o]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "string_split_31": {
                "source": {
                    "value": "[line]",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "tester_dataloader_one_frame",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "get_next_batch",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/dataloader_three_frames.py": {
        "tensorflow": {
            "string_input_producer_26": {
                "variable": {
                    "value": "input_queue",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[self.filenames_file]",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "TextLineReader_29": {
                "variable": {
                    "value": "line_reader",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "string_split_31": {
                "source": {
                    "value": "[line]",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "tester_dataloader_three_frames",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.src_img_1_batch",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_img_1_o]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "self.tgt_img_batch",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_img_o]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "self.src_img_2_batch",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_img_2_o]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "get_next_batch",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "image_reader",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "batch_creator",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "shape_setter",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/factory.py": {
        "tensorflow": {}
    },
    "dataloaders/general_dataloader.py": {
        "tensorflow": {
            "py_func_28": {
                "func": {
                    "value": "len",
                    "possible_values": []
                },
                "inp": {
                    "value": "[t]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int64]",
                    "possible_values": []
                }
            },
            "substr_57": {
                "variable": {
                    "value": "file_extension",
                    "possible_values": []
                },
                "input": {
                    "value": "image_path",
                    "possible_values": []
                },
                "pos": {
                    "value": "path_length - 3",
                    "possible_values": []
                },
                "len": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "equal_58": {
                "variable": {
                    "value": "file_cond",
                    "possible_values": []
                },
                "x": {
                    "value": "file_extension",
                    "possible_values": [
                        [
                            "tf.substr(image_path, path_length - 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "jpg",
                    "possible_values": []
                }
            },
            "cond_60": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "pred": {
                    "value": "file_cond",
                    "possible_values": [
                        [
                            "tf.equal(file_extension, 'jpg')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_jpeg(tf.read_file(image_path))",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.decode_png(tf.read_file(image_path))",
                    "possible_values": []
                }
            },
            "convert_image_dtype_69": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cond(file_cond, lambda : tf.image.decode_jpeg(tf.read_file(image_path)), lambda : tf.image.decode_png(tf.read_file(image_path)))",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [self.params.height, self.params.width], tf.image.ResizeMethod.AREA)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "read_image",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cond(file_cond, lambda : tf.image.decode_jpeg(tf.read_file(image_path)), lambda : tf.image.decode_png(tf.read_file(image_path)))",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [self.params.height, self.params.width], tf.image.ResizeMethod.AREA)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_67": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cond(file_cond, lambda : tf.image.decode_jpeg(tf.read_file(image_path)), lambda : tf.image.decode_png(tf.read_file(image_path)))",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [self.params.height, self.params.width], tf.image.ResizeMethod.AREA)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_62": {
                "contents": {
                    "value": "tf.read_file(image_path)",
                    "possible_values": []
                }
            },
            "decode_png_63": {
                "contents": {
                    "value": "tf.read_file(image_path)",
                    "possible_values": []
                }
            },
            "read_file_62": {
                "filename": {
                    "value": "image_path",
                    "possible_values": []
                }
            },
            "read_file_63": {
                "filename": {
                    "value": "image_path",
                    "possible_values": []
                }
            }
        }
    },
    "evaluators/mask.py": {
        "tensorflow": {}
    },
    "evaluators/semantic.py": {
        "tensorflow": {
            "placeholder_168": {
                "variable": {
                    "value": "prediction_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "gt_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "to_float_185": {
                "variable": {
                    "value": "weightsValue",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(gt, args.ignore_label)",
                    "possible_values": []
                }
            },
            "where_187": {
                "variable": {
                    "value": "gt",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(gt, args.ignore_label)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(gt)",
                    "possible_values": []
                },
                "y": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_188": {
                "variable": {
                    "value": "prediction",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(prediction, args.ignore_label)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(prediction)",
                    "possible_values": []
                },
                "y": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "prediction_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(prediction, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(prediction, args.ignore_label), tf.zeros_like(prediction), prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_192": {
                "variable": {
                    "value": "(acc, update_op_acc)",
                    "possible_values": []
                },
                "labels": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "prediction_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(prediction, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(prediction, args.ignore_label), tf.zeros_like(prediction), prediction)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weightsValue",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(gt, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_iou_194": {
                "variable": {
                    "value": "(miou, update_op)",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(gt, [-1])",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.reshape(prediction, [-1])",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_train_classes",
                    "possible_values": [
                        [
                            "19",
                            "Constant"
                        ]
                    ]
                },
                "weights": {
                    "value": "tf.reshape(weightsValue, [-1])",
                    "possible_values": []
                }
            },
            "to_float_203": {
                "variable": {
                    "value": "weightsValue_cat",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(gt_cat, args.ignore_label)",
                    "possible_values": []
                }
            },
            "where_205": {
                "variable": {
                    "value": "gt_cat",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(gt_cat, args.ignore_label)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(gt_cat)",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_cat",
                    "possible_values": [
                        [
                            "convert_labels(gt, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt_cat, args.ignore_label), tf.zeros_like(gt_cat), gt_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_206": {
                "variable": {
                    "value": "pred_cat",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(pred_cat, args.ignore_label)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(pred_cat)",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_cat",
                    "possible_values": [
                        [
                            "convert_labels(prediction, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(pred_cat, args.ignore_label), tf.zeros_like(pred_cat), pred_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_iou_210": {
                "variable": {
                    "value": "(miou_cat, update_op_cat)",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(gt_cat, [-1])",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.reshape(pred_cat, [-1])",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_categories",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                },
                "weights": {
                    "value": "tf.reshape(weightsValue_cat, [-1])",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_iou_cat",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "x": {
                    "value": "sem",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "get_default_graph_261": {
                "variable": {
                    "value": "confusion_matrix",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "multiply_163": {
                "variable": {
                    "value": "mi",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(p)",
                    "possible_values": []
                },
                "y": {
                    "value": "mapping[i]",
                    "possible_values": []
                }
            },
            "where_164": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(p, i)",
                    "possible_values": []
                },
                "x": {
                    "value": "mi",
                    "possible_values": [
                        [
                            "tf.multiply(tf.ones_like(p), mapping[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "m",
                    "possible_values": [
                        [
                            "tf.ones_like(p) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(p, i), mi, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_185": {
                "x": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "equal_187": {
                "x": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_189": {
                "x": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "prediction_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(prediction, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(prediction, args.ignore_label), tf.zeros_like(prediction), prediction)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "zeros_like_189": {
                "input": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "prediction_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(prediction, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(prediction, args.ignore_label), tf.zeros_like(prediction), prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_203": {
                "x": {
                    "value": "gt_cat",
                    "possible_values": [
                        [
                            "convert_labels(gt, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt_cat, args.ignore_label), tf.zeros_like(gt_cat), gt_cat)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "equal_205": {
                "x": {
                    "value": "gt_cat",
                    "possible_values": [
                        [
                            "convert_labels(gt, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt_cat, args.ignore_label), tf.zeros_like(gt_cat), gt_cat)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "gt_cat",
                    "possible_values": [
                        [
                            "convert_labels(gt, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt_cat, args.ignore_label), tf.zeros_like(gt_cat), gt_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_207": {
                "x": {
                    "value": "pred_cat",
                    "possible_values": [
                        [
                            "convert_labels(prediction, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(pred_cat, args.ignore_label), tf.zeros_like(pred_cat), pred_cat)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "input": {
                    "value": "pred_cat",
                    "possible_values": [
                        [
                            "convert_labels(prediction, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(pred_cat, args.ignore_label), tf.zeros_like(pred_cat), pred_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_221": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_like_161": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.cast(sem, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "tensor": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(gt, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt, args.ignore_label), tf.zeros_like(gt), gt)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "tensor": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "prediction_placeholder",
                            "Name"
                        ],
                        [
                            "convert_labels(prediction, id2trainId)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(prediction, args.ignore_label), tf.zeros_like(prediction), prediction)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "weightsValue",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(gt, args.ignore_label))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "tensor": {
                    "value": "gt_cat",
                    "possible_values": [
                        [
                            "convert_labels(gt, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(gt_cat, args.ignore_label), tf.zeros_like(gt_cat), gt_cat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "pred_cat",
                    "possible_values": [
                        [
                            "convert_labels(prediction, trainId2cat)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(pred_cat, args.ignore_label), tf.zeros_like(pred_cat), pred_cat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "tensor": {
                    "value": "weightsValue_cat",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(gt_cat, args.ignore_label))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.cast(sem, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_164": {
                "x": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.cast(sem, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(0, len(mapping))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helpers/bilinear_sampler.py": {
        "tensorflow": {
            "matmul_143": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "y_t",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "possible_values": []
                }
            },
            "tile_158": {
                "variable": {
                    "value": "coords",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coords, 0)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "clip_by_value_29": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "possible_values": []
                }
            },
            "clip_by_value_30": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "possible_values": []
                }
            },
            "clip_by_value_31": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "possible_values": []
                }
            },
            "cos_41": {
                "variable": {
                    "value": "cosz",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_42": {
                "variable": {
                    "value": "sinz",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "rotz_1",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "rotz_2",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "rotz_3",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "zmat",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cos_48": {
                "variable": {
                    "value": "cosy",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_49": {
                "variable": {
                    "value": "siny",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_50": {
                "variable": {
                    "value": "roty_1",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "roty_2",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "roty_3",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "ymat",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cos_55": {
                "variable": {
                    "value": "cosx",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_56": {
                "variable": {
                    "value": "sinx",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_57": {
                "variable": {
                    "value": "rotx_1",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "rotx_2",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "rotx_3",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "xmat",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "xmat",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_75": {
                "variable": {
                    "value": "translation",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "translation",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "slice_77": {
                "variable": {
                    "value": "rx",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "slice_78": {
                "variable": {
                    "value": "ry",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "slice_79": {
                "variable": {
                    "value": "rz",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "rot_mat",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "filler",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "possible_values": []
                }
            },
            "tile_83": {
                "variable": {
                    "value": "filler",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "transform_mat",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "transform_mat",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "depth",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "possible_values": [
                        [
                            "tf.reshape(depth, [batch, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1, -1]",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "pixel_coords",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 3, -1]",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "cam_coords",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, -1, height, width]",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "cam_coords",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 4, -1]",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "unnormalized_pixel_coords",
                    "possible_values": []
                },
                "a": {
                    "value": "proj",
                    "possible_values": []
                },
                "b": {
                    "value": "cam_coords",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_123": {
                "variable": {
                    "value": "x_u",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "possible_values": []
                }
            },
            "slice_124": {
                "variable": {
                    "value": "y_u",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "possible_values": []
                }
            },
            "slice_125": {
                "variable": {
                    "value": "z_u",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "pixel_coords",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_n, y_n]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "pixel_coords",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 2, height, width]",
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width - 1, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_155": {
                "variable": {
                    "value": "coords",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t, ones]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "coords",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "variable": {
                    "value": "tgt_pixel_coords",
                    "possible_values": []
                },
                "a": {
                    "value": "meshgrid(batch, height, width, False)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "tgt_pixel_coords",
                    "possible_values": []
                },
                "a": {
                    "value": "pixel_coords[:, :2, :, :]",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "possible_values": []
                }
            },
            "constant_203": {
                "variable": {
                    "value": "filler",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "possible_values": []
                }
            },
            "tile_204": {
                "variable": {
                    "value": "filler",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch, 1, 1]",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "intrinsics",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, tf.zeros([batch, 3, 1])]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "intrinsics",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, filler]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "proj_tgt_cam_to_src_pixel",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics",
                    "possible_values": [
                        [
                            "tf.concat([intrinsics, tf.zeros([batch, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, filler], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "pose_vec2mat(pose)",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "cast_232": {
                "variable": {
                    "value": "rep",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_237": {
                "variable": {
                    "value": "(coords_x, coords_y)",
                    "possible_values": []
                },
                "value": {
                    "value": "coords",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "coords_x",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "possible_values": [
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "coords_y",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "possible_values": [
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "floor_246": {
                "variable": {
                    "value": "x0",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "possible_values": [
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_248": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "possible_values": [
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_251": {
                "variable": {
                    "value": "y_max",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[1] - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_252": {
                "variable": {
                    "value": "x_max",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[2] - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "constant_254": {
                "variable": {
                    "value": "zero",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "clip_by_value_256": {
                "variable": {
                    "value": "x0_safe",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "possible_values": [
                        [
                            "tf.floor(coords_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_257": {
                "variable": {
                    "value": "y0_safe",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "possible_values": [
                        [
                            "tf.floor(coords_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_258": {
                "variable": {
                    "value": "x1_safe",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_259": {
                "variable": {
                    "value": "y1_safe",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_267": {
                "variable": {
                    "value": "dim2",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_268": {
                "variable": {
                    "value": "dim1",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2] * inp_size[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "base",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_repeat(tf.cast(tf.range(coord_size[0]), 'float32') * dim1, coord_size[1] * coord_size[2])",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size[0], out_size[1], out_size[2], 1]",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "idx00",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x0_safe + base_y0",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "imgs_flat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "imgs",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, inp_size[3]])",
                    "possible_values": []
                }
            },
            "cast_286": {
                "variable": {
                    "value": "imgs_flat",
                    "possible_values": []
                },
                "x": {
                    "value": "imgs_flat",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "im00",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx00, 'int32'))",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "im01",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx01, 'int32'))",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "im10",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx10, 'int32'))",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "im11",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx11, 'int32'))",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_297": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w00 * im00, w01 * im01, w10 * im10, w11 * im11]",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "euler2mat",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "vec2mat",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "pixel2cam",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, 1, height * width]",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "cam_coords",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "cam2pixel",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "a": {
                    "value": "pixel_coords",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "possible_values": []
                }
            },
            "ones_144": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "expand_dims_148": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_149": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "possible_values": []
                }
            },
            "cast_151": {
                "x": {
                    "value": "width - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_152": {
                "x": {
                    "value": "height - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "input": {
                    "value": "coords",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "flow_warp",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "compute_rigid_flow",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "name_scope_236": {
                "name": {
                    "value": "image_sampling",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "a": {
                    "value": "tf.matrix_inverse(intrinsics)",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linspace_148": {
                "start": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "possible_values": []
                }
            },
            "expand_dims_230": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "possible_values": []
                }
            },
            "stack_285": {
                "values": {
                    "value": "[-1, inp_size[3]]",
                    "possible_values": []
                }
            },
            "gather_287": {
                "params": {
                    "value": "imgs_flat",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx00, 'int32')",
                    "possible_values": []
                }
            },
            "gather_288": {
                "params": {
                    "value": "imgs_flat",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx01, 'int32')",
                    "possible_values": []
                }
            },
            "gather_289": {
                "params": {
                    "value": "imgs_flat",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx10, 'int32')",
                    "possible_values": []
                }
            },
            "gather_290": {
                "params": {
                    "value": "imgs_flat",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx11, 'int32')",
                    "possible_values": []
                }
            },
            "stack_144": {
                "values": {
                    "value": "[height, 1]",
                    "possible_values": []
                }
            },
            "linspace_145": {
                "start": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "possible_values": []
                }
            },
            "stack_149": {
                "values": {
                    "value": "[1, width]",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "shape": {
                    "value": "[batch, 3, 1]",
                    "possible_values": []
                }
            },
            "ones_230": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "possible_values": []
                }
            },
            "cast_287": {
                "x": {
                    "value": "idx00",
                    "possible_values": [
                        [
                            "tf.reshape(x0_safe + base_y0, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "cast_288": {
                "x": {
                    "value": "idx01",
                    "possible_values": [
                        [
                            "x0_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "cast_289": {
                "x": {
                    "value": "idx10",
                    "possible_values": [
                        [
                            "x1_safe + base_y0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "cast_290": {
                "x": {
                    "value": "idx11",
                    "possible_values": [
                        [
                            "x1_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "shape_251": {
                "input": {
                    "value": "imgs",
                    "possible_values": []
                }
            },
            "shape_252": {
                "input": {
                    "value": "imgs",
                    "possible_values": []
                }
            },
            "cast_271": {
                "x": {
                    "value": "tf.range(coord_size[0])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "stack_230": {
                "values": {
                    "value": "[n_repeats]",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/utilities.py": {
        "tensorflow": {
            "stack_163": {
                "variable": {
                    "value": "priors",
                    "possible_values": []
                },
                "values": {
                    "value": "priors",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(priors, axis=0)",
                            "Call"
                        ],
                        [
                            "labels2priors[predictions]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(priors, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(pred_sem, tf.uint8)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, p, p]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.py_func(label_to_priors, [predictions[i]], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(p, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(pred_sem, tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([p, p, p], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(value)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_224": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(value * 255)",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "colors",
                    "possible_values": []
                },
                "value": {
                    "value": "cm.colors",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "gather_229": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "params": {
                    "value": "colors",
                    "possible_values": [
                        [
                            "tf.constant(cm.colors, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.round(value * 255))",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_253": {
                "variable": {
                    "value": "(num_batch, height, width, _)",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(flow)",
                    "possible_values": []
                }
            },
            "unstack_255": {
                "variable": {
                    "value": "(flow_u, flow_v)",
                    "possible_values": []
                },
                "value": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, out_size, method=method, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, scale)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "sqrt_260": {
                "variable": {
                    "value": "mag",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(flow), 3)",
                    "possible_values": []
                }
            },
            "atan2_261": {
                "variable": {
                    "value": "angle",
                    "possible_values": []
                },
                "y": {
                    "value": "flow_v",
                    "possible_values": []
                },
                "x": {
                    "value": "flow_u",
                    "possible_values": []
                }
            },
            "mod_263": {
                "variable": {
                    "value": "im_h",
                    "possible_values": []
                },
                "x1": {
                    "value": "angle / (2 * np.pi) + 1.0",
                    "possible_values": []
                },
                "x2": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clip_by_value_264": {
                "variable": {
                    "value": "im_s",
                    "possible_values": []
                },
                "t": {
                    "value": "mag * n / max_flow",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_by_value_265": {
                "variable": {
                    "value": "im_v",
                    "possible_values": []
                },
                "t": {
                    "value": "n - im_s",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_266": {
                "variable": {
                    "value": "im_hsv",
                    "possible_values": []
                },
                "values": {
                    "value": "[im_h, im_s, im_v]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "hsv_to_rgb_267": {
                "variable": {
                    "value": "im",
                    "possible_values": []
                },
                "images": {
                    "value": "im_hsv",
                    "possible_values": [
                        [
                            "tf.stack([im_h, im_s, im_v], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_277": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": []
                }
            },
            "to_int32_278": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "x": {
                    "value": "s[1]",
                    "possible_values": []
                }
            },
            "to_int32_279": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "x": {
                    "value": "s[2]",
                    "possible_values": []
                }
            },
            "to_float_310": {
                "variable": {
                    "value": "flow_size",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(flow)[-3:-1]",
                    "possible_values": []
                }
            },
            "py_func_160": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "func": {
                    "value": "label_to_priors",
                    "possible_values": []
                },
                "inp": {
                    "value": "[predictions[i]]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "x": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.py_func(label_to_priors, [predictions[i]], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(p, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(pred_sem, tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([p, p, p], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "multiply_181": {
                "variable": {
                    "value": "mi",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(p)",
                    "possible_values": []
                },
                "y": {
                    "value": "dict_id2color[i]",
                    "possible_values": []
                }
            },
            "where_182": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(p, i)",
                    "possible_values": []
                },
                "x": {
                    "value": "mi",
                    "possible_values": [
                        [
                            "tf.multiply(tf.ones_like(p), dict_id2color[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "m",
                    "possible_values": [
                        [
                            "tf.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(p, i), mi, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_257": {
                "variable": {
                    "value": "max_flow",
                    "possible_values": []
                },
                "x": {
                    "value": "max_flow",
                    "possible_values": [
                        [
                            "tf.maximum(max_flow, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.abs(flow * mask))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_max_259": {
                "variable": {
                    "value": "max_flow",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(flow * mask)",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "values": {
                    "value": "[scale[1], scale[0]]",
                    "possible_values": []
                }
            },
            "multiply_316": {
                "variable": {
                    "value": "flow",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, out_size, method=method, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "tf.to_float(out_size) / flow_size",
                            "BinOp"
                        ],
                        [
                            "tf.stack([scale[1], scale[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_177": {
                "x": {
                    "value": "pred_sem",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "reduce_min_216": {
                "input_tensor": {
                    "value": "value",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(value)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_217": {
                "input_tensor": {
                    "value": "value",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(value)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_224": {
                "x": {
                    "value": "value * 255",
                    "possible_values": []
                }
            },
            "shape_253": {
                "input": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, out_size, method=method, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_254": {
                "shape": {
                    "value": "[num_batch, height, width, 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_260": {
                "input_tensor": {
                    "value": "tf.square(flow)",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "input": {
                    "value": "img[:, :, :, 0:1]",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "ones_like_181": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.py_func(label_to_priors, [predictions[i]], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(p, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(pred_sem, tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([p, p, p], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_182": {
                "x": {
                    "value": "p",
                    "possible_values": [
                        [
                            "tf.py_func(label_to_priors, [predictions[i]], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(p, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(pred_sem, tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([p, p, p], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(b)",
                            "Call"
                        ],
                        [
                            "range(0, len(dict_id2color))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_259": {
                "x": {
                    "value": "flow * mask",
                    "possible_values": []
                }
            },
            "square_260": {
                "x": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, out_size, method=method, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_310": {
                "input": {
                    "value": "flow",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, out_size, method=method, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_314": {
                "x": {
                    "value": "out_size",
                    "possible_values": []
                }
            }
        }
    },
    "networks/baseline.py": {
        "tensorflow": {
            "resize_bilinear_110": {
                "variable": {
                    "value": "normalized",
                    "possible_values": []
                },
                "images": {
                    "value": "self.disp_normalize(disp)",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.h, self.w]",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "depth",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "possible_values": [
                        [
                            "self.disp2depth(normalized)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(depth, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "resize_bilinear_125": {
                "variable": {
                    "value": "disp",
                    "possible_values": []
                },
                "images": {
                    "value": "self.disp_normalize(disp)",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.h, self.w]",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "disp_normalize",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "disp2depth",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "get_rigid_flow",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "prepare_depth",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "prepare_disp",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "upsample_semantic",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "build_baseline_outputs",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "get_network_params",
                    "possible_values": []
                }
            },
            "trainable_variables_179": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "all_variables_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "networks/complete_network.py": {
        "tensorflow": {
            "l2_normalize_132": {
                "variable": {
                    "value": "normalize_a",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "l2_normalize_133": {
                "variable": {
                    "value": "normalize_b",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "cos_similarity",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(normalize_a, normalize_b)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "semantic",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.image.resize_images(logits, [height, width])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "semantic",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(semantic, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "semantic",
                    "possible_values": []
                },
                "x": {
                    "value": "semantic",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(semantic, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "stop_gradient_146": {
                "variable": {
                    "value": "rigid_flow",
                    "possible_values": []
                },
                "input": {
                    "value": "rigid_flow",
                    "possible_values": [
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_150": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "t": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "bilinear_sampler.flow_warp(tf.ones([b, h, w, 1], dtype=tf.float32), rigid_flow)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mask, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "stop_gradient_160": {
                "variable": {
                    "value": "optical_flow",
                    "possible_values": []
                },
                "input": {
                    "value": "optical_flow",
                    "possible_values": [
                        [
                            "tf.stop_gradient(optical_flow)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_161": {
                "variable": {
                    "value": "rigid_flow",
                    "possible_values": []
                },
                "input": {
                    "value": "rigid_flow",
                    "possible_values": [
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_162": {
                "variable": {
                    "value": "normalized_optical_flow",
                    "possible_values": []
                },
                "tensor": {
                    "value": "optical_flow",
                    "possible_values": [
                        [
                            "tf.stop_gradient(optical_flow)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                },
                "name": {
                    "value": "optical_flow_norm",
                    "possible_values": []
                }
            },
            "norm_165": {
                "variable": {
                    "value": "normalized_rigid_flow",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rigid_flow",
                    "possible_values": [
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(rigid_flow)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                },
                "name": {
                    "value": "rigid_flow_norm",
                    "possible_values": []
                }
            },
            "maximum_173": {
                "variable": {
                    "value": "moving_probability",
                    "possible_values": []
                },
                "x": {
                    "value": "cosine_distance",
                    "possible_values": [
                        [
                            "self.tf_cosine_distance(optical_flow, rigid_flow)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ratio_distance",
                    "possible_values": [
                        [
                            "1.0 - ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_92": {
                "condition": {
                    "value": "moving_src2_tgt > self.params.tau",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(moving_src2_tgt)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(moving_src2_tgt)",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "prepare_semantic",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "build_outputs",
                    "possible_values": []
                }
            },
            "multiply_135": {
                "x": {
                    "value": "normalize_a",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "get_occlusion_mask_from_rigid_flow",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "build_moving_probability_mask",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "get_network_params",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "build_semantic_masks",
                    "possible_values": []
                }
            },
            "ones_like_94": {
                "input": {
                    "value": "moving_src2_tgt",
                    "possible_values": [
                        [
                            "self.build_moving_probability_mask(self.__optical_flow_src2_tgt, self.__sflow_src2_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_95": {
                "input": {
                    "value": "moving_src2_tgt",
                    "possible_values": [
                        [
                            "self.build_moving_probability_mask(self.__optical_flow_src2_tgt, self.__sflow_src2_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_148": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "minimum_170": {
                "x": {
                    "value": "normalized_optical_flow",
                    "possible_values": [
                        [
                            "tf.norm(optical_flow, axis=-1, keep_dims=True, name='optical_flow_norm')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalized_rigid_flow",
                    "possible_values": [
                        [
                            "tf.norm(rigid_flow, axis=-1, keep_dims=True, name='rigid_flow_norm')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_171": {
                "x": {
                    "value": "normalized_optical_flow",
                    "possible_values": [
                        [
                            "tf.norm(optical_flow, axis=-1, keep_dims=True, name='optical_flow_norm')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalized_rigid_flow",
                    "possible_values": [
                        [
                            "tf.norm(rigid_flow, axis=-1, keep_dims=True, name='rigid_flow_norm')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_183": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "networks/general_network.py": {
        "tensorflow": {}
    },
    "networks/ops.py": {
        "tensorflow": {
            "norm_106": {
                "variable": {
                    "value": "l2_norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.abs(x) + curr_offset",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_28": {
                "images": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "[h * ratio, w * ratio]",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [h_pad, h_pad], [w_pad, w_pad], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [h_pad, h_pad], [w_pad, w_pad], [0, 0]]",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [h_pad, h_pad], [w_pad, w_pad], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "possible_values": [
                        [
                            "slim.batch_norm",
                            "MethodArgument"
                        ],
                        [
                            "slim.batch_norm",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "weights_regularizer",
                    "possible_values": [
                        [
                            "slim.l2_regularizer(0.0001)",
                            "MethodArgument"
                        ],
                        [
                            "slim.l2_regularizer(0.0001)",
                            "MethodArgument"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "normalizer_params",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "disp_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tile_114": {
                "variable": {
                    "value": "disp_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "disp_mean",
                    "possible_values": [
                        [
                            "tf.reduce_mean(disp, axis=[1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(disp_mean, [1, curr_h, curr_w, curr_c])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, curr_h, curr_w, curr_c]",
                    "possible_values": []
                }
            },
            "maximum_131": {
                "variable": {
                    "value": "valid_points",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "maximum_138": {
                "variable": {
                    "value": "valid_points",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "spatial_normalizer",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "reduce_mean_masked",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "reduce_mean_masked",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "bilinear_upsampling_by_convolution",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "depth_upsampling",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "stop_features_gradient",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "couple_imgs_features",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "couple_feat",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_feat, src2_feat]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "abs_106": {
                "x": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "tensor * mask",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "tensor * mask * probability",
                    "possible_values": []
                }
            },
            "resize_bilinear_155": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.get_shape().as_list()[1] * 2 ** i, x.get_shape().as_list()[2] * 2 ** i]",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "'upsampler_pred_' + str(i)",
                    "possible_values": []
                }
            },
            "stop_gradient_172": {
                "input": {
                    "value": "feat",
                    "possible_values": [
                        [
                            "img_x_features",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "networks/selflow/selflow_network.py": {
        "tensorflow": {
            "concat_58": {
                "variable": {
                    "value": "x_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, flow]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "net_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[cost_volume, x1, flow]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "l2_normalize_131": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x1, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "l2_normalize_132": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "extract_image_patches_134": {
                "variable": {
                    "value": "x2_patches",
                    "possible_values": []
                },
                "images": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x2, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, d, d, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x2_patches",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x2_patches",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(x2, [1, d, d, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x2_patches, [-1, H, W, d, d, channel])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H, W, d, d, channel]",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x1_reshape",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x1, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H, W, 1, 1, channel]",
                    "possible_values": []
                }
            },
            "multiply_139": {
                "variable": {
                    "value": "x1_dot_x2",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_reshape",
                    "possible_values": [
                        [
                            "tf.reshape(x1, [-1, H, W, 1, 1, channel])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x2_patches",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(x2, [1, d, d, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x2_patches, [-1, H, W, d, d, channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "cost_volume",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x1_dot_x2",
                    "possible_values": [
                        [
                            "tf.multiply(x1_reshape, x2_patches)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "cost_volume",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost_volume",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x1_dot_x2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cost_volume, [-1, H, W, d * d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H, W, d * d]",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "cv_concat_fw",
                    "possible_values": []
                },
                "values": {
                    "value": "[cost_volume_fw, cost_volume_bw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "cv_concat_bw",
                    "possible_values": []
                },
                "values": {
                    "value": "[cost_volume_bw, cost_volume_fw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "flow_concat_fw",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_fw, -flow_bw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "flow_concat_bw",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_bw, -flow_fw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "shape_216": {
                "variable": {
                    "value": "x_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_features['conv6_2']",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "initial_flow_fw",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], x_shape[2], 2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_flow_fw",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "initial_flow_bw",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], x_shape[2], 2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_flow_bw",
                    "possible_values": []
                }
            },
            "concat_271": {
                "variable": {
                    "value": "flow_concat_fw",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_fw['level_2'], -flow_bw['level_2']]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_272": {
                "variable": {
                    "value": "flow_concat_bw",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_bw['level_2'], -flow_fw['level_2']]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_274": {
                "variable": {
                    "value": "x_feature",
                    "possible_values": []
                },
                "values": {
                    "value": "[net_fw['conv5'], net_bw['conv5']]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_287": {
                "variable": {
                    "value": "x_feature",
                    "possible_values": []
                },
                "values": {
                    "value": "[net_bw['conv5'], net_fw['conv5']]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "maximum_8": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "possible_values": []
                }
            },
            "shape_163": {
                "variable": {
                    "value": "x_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x1, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'leaky_relu'",
                            "MethodArgument"
                        ],
                        [
                            "'feature_extractor'",
                            "MethodArgument"
                        ],
                        [
                            "'context_network'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "net[conv1_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_1",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "net[conv1_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv1_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_2",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "net[conv2_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv1_2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_1",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "net[conv2_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv2_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_2",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "net[conv3_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv2_2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_1",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "net[conv3_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv3_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_2",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "net[conv4_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv3_2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4_1",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "net[conv4_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv4_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4_2",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "net[conv5_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv4_2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5_1",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "net[conv5_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv5_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5_2",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "net[conv6_1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv5_2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv6_1",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "net[conv6_2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv6_1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv6_2",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'leaky_relu'",
                            "MethodArgument"
                        ],
                        [
                            "'feature_extractor'",
                            "MethodArgument"
                        ],
                        [
                            "'context_network'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "net[dilated_conv1]",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "possible_values": [
                        [
                            "tf.concat([x, flow], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv1",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "net[dilated_conv2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "rate": {
                    "value": "2",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv2",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "net[dilated_conv3]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "rate": {
                    "value": "4",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv3",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "net[dilated_conv4]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv3']",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "possible_values": []
                },
                "rate": {
                    "value": "8",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv4",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "net[dilated_conv5]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv4']",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "rate": {
                    "value": "16",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv5",
                    "possible_values": []
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "net[dilated_conv6]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv5']",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv6",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "net[dilated_conv7]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['dilated_conv6']",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "possible_values": []
                },
                "scope": {
                    "value": "dilated_conv7",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'leaky_relu'",
                            "MethodArgument"
                        ],
                        [
                            "'feature_extractor'",
                            "MethodArgument"
                        ],
                        [
                            "'context_network'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ],
                        [
                            "'estimator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_118": {
                "variable": {
                    "value": "net[conv1]",
                    "possible_values": []
                },
                "input": {
                    "value": "net_input",
                    "possible_values": [
                        [
                            "tf.concat([cost_volume, x1, flow], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "net[conv2]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv1']",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "net[conv3]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv2']",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "net[conv4]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv3']",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "net[conv5]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv4']",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "net[conv6]",
                    "possible_values": []
                },
                "input": {
                    "value": "net['conv5']",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv6",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'flownet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_247": {
                "input": {
                    "value": "tgt_features[feature_name]",
                    "possible_values": []
                }
            }
        }
    },
    "networks/selflow/warp.py": {
        "tensorflow": {
            "shape_17": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "batch_idx",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_idx",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_idx, (batch_size, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1, 1)",
                    "possible_values": []
                }
            },
            "tile_24": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_idx",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_idx, (batch_size, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, height, width)",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y, x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "meshgrid_34": {
                "variable": {
                    "value": "(x, y)",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(W)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(H)",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "flows[:, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "max_y",
                    "possible_values": []
                },
                "x": {
                    "value": "H - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "max_x",
                    "possible_values": []
                },
                "x": {
                    "value": "W - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "zero",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "x0",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.cast(x0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "tf.cast(y0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "clip_by_value_61": {
                "variable": {
                    "value": "x0",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.cast(x0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "possible_values": [
                        [
                            "tf.cast(W - 1, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_62": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "possible_values": [
                        [
                            "tf.cast(W - 1, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_63": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "tf.cast(y0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "possible_values": [
                        [
                            "tf.cast(H - 1, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_64": {
                "variable": {
                    "value": "y1",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "possible_values": [
                        [
                            "tf.cast(H - 1, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_73": {
                "variable": {
                    "value": "x0",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.cast(x0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "y0",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "tf.cast(y0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "y1",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "wa",
                    "possible_values": []
                },
                "input": {
                    "value": "wa",
                    "possible_values": [
                        [
                            "(x1 - x) * (y1 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(wa, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "wb",
                    "possible_values": []
                },
                "input": {
                    "value": "wb",
                    "possible_values": [
                        [
                            "(x1 - x) * (y - y0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(wb, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "wc",
                    "possible_values": []
                },
                "input": {
                    "value": "wc",
                    "possible_values": [
                        [
                            "(x - x0) * (y1 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(wc, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "variable": {
                    "value": "wd",
                    "possible_values": []
                },
                "input": {
                    "value": "wd",
                    "possible_values": [
                        [
                            "(x - x0) * (y - y0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(wd, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "add_n_91": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "possible_values": []
                }
            },
            "gather_nd_28": {
                "params": {
                    "value": "img",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.stack([b, y, x], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_34": {}
        }
    },
    "single_inference.py": {
        "tensorflow": {
            "ConfigProto_166": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Session_167": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "training_flag",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "tensor_src1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, opts.height, opts.width, 3)",
                    "possible_values": []
                },
                "name": {
                    "value": "src1",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "tensor_tgt",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, opts.height, opts.width, 3)",
                    "possible_values": []
                },
                "name": {
                    "value": "tgt",
                    "possible_values": []
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "tensor_src2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, opts.height, opts.width, 3)",
                    "possible_values": []
                },
                "name": {
                    "value": "src2",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "possible_values": [
                        [
                            "network.get_network_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_192": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "possible_values": []
                }
            },
            "Coordinator_196": {
                "variable": {
                    "value": "coordinator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_197": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coordinator",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_293": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "placeholder_118": {
                "variable": {
                    "value": "training_flag",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "run_151": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "testers/factory.py": {
        "tensorflow": {}
    },
    "testers/kitti_depth.py": {
        "tensorflow": {
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_55": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "possible_values": [
                        [
                            "network.get_network_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_57": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "possible_values": []
                }
            },
            "Coordinator_62": {
                "variable": {
                    "value": "coordinator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_63": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coordinator",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "testers/kitti_flow.py": {
        "tensorflow": {
            "ConfigProto_47": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_52": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "possible_values": [
                        [
                            "network.get_network_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_54": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "possible_values": []
                }
            },
            "Coordinator_59": {
                "variable": {
                    "value": "coordinator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_60": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coordinator",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "testers/kitti_mask.py": {
        "tensorflow": {
            "ConfigProto_41": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Session_42": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_46": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "possible_values": [
                        [
                            "network.get_network_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_48": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "possible_values": []
                }
            },
            "Coordinator_53": {
                "variable": {
                    "value": "coordinator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_54": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coordinator",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "testers/kitti_semantic.py": {
        "tensorflow": {
            "ConfigProto_42": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_47": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "possible_values": [
                        [
                            "network.get_network_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_49": {
                "variable": {
                    "value": "init_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "possible_values": []
                }
            },
            "Coordinator_54": {
                "variable": {
                    "value": "coordinator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "start_queue_runners_55": {
                "variable": {
                    "value": "threads",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coordinator",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_64": {
                "input": {
                    "value": "prediction_semantic[0]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    }
}