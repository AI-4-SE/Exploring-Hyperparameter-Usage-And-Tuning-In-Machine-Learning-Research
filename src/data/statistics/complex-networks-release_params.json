{
    "complex_utils.py": {
        "tensorflow": {
            "real_15": {
                "variable": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_16": {
                "variable": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "complex_95": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "real_107": {
                "variable": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_108": {
                "variable": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "complex_183": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "real_196": {
                "variable": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_197": {
                "variable": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "complex_276": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ],
                        [
                            "tf_real_real - tf_imag_imag",
                            "BinOp"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ],
                        [
                            "tf_imag_real + tf_real_imag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "angle_282": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_285": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.angle(x)",
                            "Call"
                        ],
                        [
                            "tf.angle(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_289": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(phase, pi / 2)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_293": {
                "variable": {
                    "value": "ge",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.angle(x)",
                            "Call"
                        ],
                        [
                            "tf.angle(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_297": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(phase, 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_303": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_326": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_328": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.real(x) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.imag(x) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "angle_335": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_337": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.real(x) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.imag(x) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "tf_real_real",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "tf_imag_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "tf_real_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "tf_imag_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_transpose_111": {
                "variable": {
                    "value": "tf_real_real",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_128": {
                "variable": {
                    "value": "tf_imag_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_transpose_146": {
                "variable": {
                    "value": "tf_real_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_163": {
                "variable": {
                    "value": "tf_imag_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_200": {
                "variable": {
                    "value": "tf_real_real",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_218": {
                "variable": {
                    "value": "tf_imag_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "real_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_237": {
                "variable": {
                    "value": "tf_real_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.real(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_255": {
                "variable": {
                    "value": "tf_imag_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ],
                        [
                            "tf.imag(tf_input)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "imag_conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_321": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1, 1, shape_c)",
                            "Tuple"
                        ],
                        [
                            "(1, shape_c, 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "complex_conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "complex_conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "complex_conv1d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_316": {
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_327": {
                "features": {
                    "value": "norm + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_328": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_329": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_336": {
                "x": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.angle(x)",
                            "Call"
                        ],
                        [
                            "tf.angle(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_337": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_337": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(le, x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_323": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mri_data.py": {
        "tensorflow": {
            "constant_65": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(filenames)] + image_shape, dtype=np.complex64)",
                            "Call"
                        ],
                        [
                            "load_masks_cfl(mask_filenames_cfl)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_67": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(masks, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(mask_x)",
                            "Call"
                        ],
                        [
                            "tf.slice(mask_x, [0, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(mask_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "mask_x * (1 - mask_calib) + mask_calib",
                            "BinOp"
                        ],
                        [
                            "mask_x * mask_recon",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_up_down_69": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(masks, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(mask_x)",
                            "Call"
                        ],
                        [
                            "tf.slice(mask_x, [0, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(mask_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "mask_x * (1 - mask_calib) + mask_calib",
                            "BinOp"
                        ],
                        [
                            "mask_x * mask_recon",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_70": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(masks, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(mask_x)",
                            "Call"
                        ],
                        [
                            "tf.slice(mask_x, [0, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(mask_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "mask_x * (1 - mask_calib) + mask_calib",
                            "BinOp"
                        ],
                        [
                            "mask_x * mask_recon",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(masks, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(mask_x)",
                            "Call"
                        ],
                        [
                            "tf.slice(mask_x, [0, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(mask_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "mask_x * (1 - mask_calib) + mask_calib",
                            "BinOp"
                        ],
                        [
                            "mask_x * mask_recon",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(ks_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(ks_x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "ks_x * scale",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(ks_x, mask_x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(map_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(map_x)",
                            "Call"
                        ],
                        [
                            "tf.identity(map_x, name='sensemap_size_check')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(map_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, [out_shape[0], out_shape[1], num_emaps, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_up_down_77": {
                "variable": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(ks_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(ks_x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "ks_x * scale",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(ks_x, mask_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_up_down_78": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(map_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(map_x)",
                            "Call"
                        ],
                        [
                            "tf.identity(map_x, name='sensemap_size_check')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(map_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, [out_shape[0], out_shape[1], num_emaps, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_99": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_recon > 1e-07",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / tf.sqrt(scale)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_112": {
                "variable": {
                    "value": "map_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(map_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(map_x)",
                            "Call"
                        ],
                        [
                            "tf.identity(map_x, name='sensemap_size_check')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(map_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, [out_shape[0], out_shape[1], num_emaps, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_113": {
                "variable": {
                    "value": "map_shape_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "map_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(map_x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_114": {
                "variable": {
                    "value": "map_shape_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "map_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(map_x)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_115": {
                "variable": {
                    "value": "assert_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "map_shape_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(map_shape, [0], [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_116": {
                "variable": {
                    "value": "assert_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "map_shape_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(map_shape, [1], [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(map_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(map_x)",
                            "Call"
                        ],
                        [
                            "tf.identity(map_x, name='sensemap_size_check')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(map_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, [out_shape[0], out_shape[1], num_emaps, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_shape[0], out_shape[1], num_emaps, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_128": {
                "variable": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(ks_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(ks_x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "ks_x * scale",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(ks_x, mask_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(masks, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(mask_x)",
                            "Call"
                        ],
                        [
                            "tf.slice(mask_x, [0, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(mask_x, seed=random_seed)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(mask_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "mask_x * (1 - mask_calib) + mask_calib",
                            "BinOp"
                        ],
                        [
                            "mask_x * mask_recon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TFRecordDataset_161": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "train_filenames_tfrecord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_filenames(train_data_dir, search_str='/*.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_92": {
                "variable": {
                    "value": "mask_calib",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_cal, shape_cal, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_118": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(map_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(map_x)",
                            "Call"
                        ],
                        [
                            "tf.identity(map_x, name='sensemap_size_check')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(map_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, [out_shape[0], out_shape[1], num_emaps, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sensemap_size_check",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'prep_tfrecord'",
                            "str"
                        ],
                        [
                            "'create_dataset'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_15": {
                "filename": {
                    "value": "dir_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IsDirectory_15": {
                "dirname": {
                    "value": "dir_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "CalibRegion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_98": {
                "x": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(ks_x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(ks_x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, out_shape[0], out_shape[1])",
                            "Call"
                        ],
                        [
                            "ks_x * scale",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(ks_x, mask_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_98": {
                "input_tensor": {
                    "value": "tf.abs(ks_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(scale))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_117": {
                "control_inputs": {
                    "value": "[assert_z, assert_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_106": {
                "x": {
                    "value": "tf.abs(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_108": {
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, shape_sc, shape_sc)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(tf.abs(scale))) * (shape_sc * shape_sc / 100000.0)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(1.0 / tf.sqrt(scale), dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_106": {
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(ks_x, shape_sc, shape_sc)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(tf.abs(scale))) * (shape_sc * shape_sc / 100000.0)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(1.0 / tf.sqrt(scale), dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mri_model.py": {
        "tensorflow": {
            "set_verbosity_12": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_19": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else -1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_32": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf_input, axis=1 if data_format == 'channels_first' else -1, training=training, renorm=True, fused=True)",
                            "Call"
                        ],
                        [
                            "_batch_norm(tf_input, data_format=data_format, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.zrelu(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.modrelu(tf_output, data_format)",
                            "Call"
                        ],
                        [
                            "complex_utils.cardioid(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_input, tf.stack((shape_0, shape_axis, -1)))",
                            "Call"
                        ],
                        [
                            "tf.concat((tf_pre, tf_output, tf_post), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, shape_out)",
                            "Call"
                        ],
                        [
                            "tf_input",
                            "variable"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_z)",
                            "Call"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf_output, num_features, kernel_size, padding='same', use_bias=False, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.complex_conv(tf_output, num_features=num_features, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([real_out, imag_out], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_output[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, pad:shape_z + pad, pad:shape_y + pad, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, :, pad:shape_z + pad, pad:shape_y + pad]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_57": {
                "variable": {
                    "value": "shape_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "shape_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(shape_input[:axis])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack((shape_0, shape_axis, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf_pre, tf_output, tf_post)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(shape_input[:axis], [shape_axis + 2 * pad], shape_input[axis + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf_input, axis=1 if data_format == 'channels_first' else -1, training=training, renorm=True, fused=True)",
                            "Call"
                        ],
                        [
                            "_batch_norm(tf_input, data_format=data_format, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.zrelu(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.modrelu(tf_output, data_format)",
                            "Call"
                        ],
                        [
                            "complex_utils.cardioid(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_input, tf.stack((shape_0, shape_axis, -1)))",
                            "Call"
                        ],
                        [
                            "tf.concat((tf_pre, tf_output, tf_post), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, shape_out)",
                            "Call"
                        ],
                        [
                            "tf_input",
                            "variable"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_z)",
                            "Call"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf_output, num_features, kernel_size, padding='same', use_bias=False, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.complex_conv(tf_output, num_features=num_features, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([real_out, imag_out], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_output[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, pad:shape_z + pad, pad:shape_y + pad, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, :, pad:shape_z + pad, pad:shape_y + pad]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((shape_input[:axis], [shape_axis + 2 * pad], shape_input[axis + 1:]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_35": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf_input, axis=1 if data_format == 'channels_first' else -1, training=training, renorm=True, fused=True)",
                            "Call"
                        ],
                        [
                            "_batch_norm(tf_input, data_format=data_format, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.zrelu(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.modrelu(tf_output, data_format)",
                            "Call"
                        ],
                        [
                            "complex_utils.cardioid(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_input, tf.stack((shape_0, shape_axis, -1)))",
                            "Call"
                        ],
                        [
                            "tf.concat((tf_pre, tf_output, tf_post), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, shape_out)",
                            "Call"
                        ],
                        [
                            "tf_input",
                            "variable"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_z)",
                            "Call"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf_output, num_features, kernel_size, padding='same', use_bias=False, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.complex_conv(tf_output, num_features=num_features, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([real_out, imag_out], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_output[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, pad:shape_z + pad, pad:shape_y + pad, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, :, pad:shape_z + pad, pad:shape_y + pad]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf_input, axis=1 if data_format == 'channels_first' else -1, training=training, renorm=True, fused=True)",
                            "Call"
                        ],
                        [
                            "_batch_norm(tf_input, data_format=data_format, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.zrelu(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.modrelu(tf_output, data_format)",
                            "Call"
                        ],
                        [
                            "complex_utils.cardioid(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_input, tf.stack((shape_0, shape_axis, -1)))",
                            "Call"
                        ],
                        [
                            "tf.concat((tf_pre, tf_output, tf_post), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, shape_out)",
                            "Call"
                        ],
                        [
                            "tf_input",
                            "variable"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_z)",
                            "Call"
                        ],
                        [
                            "_circular_pad(tf_output, pad, axis_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf_output, num_features, kernel_size, padding='same', use_bias=False, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(tf_output)",
                            "Call"
                        ],
                        [
                            "complex_utils.complex_conv(tf_output, num_features=num_features, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([real_out, imag_out], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(tf_output)",
                            "Call"
                        ],
                        [
                            "tf_output[:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, pad:shape_z + pad, pad:shape_y + pad, :]",
                            "Subscript"
                        ],
                        [
                            "tf_output[:, :, pad:shape_z + pad, pad:shape_y + pad]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_features) // np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_140": {
                "variable": {
                    "value": "shape_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_438": {
                "variable": {
                    "value": "im_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.model_transpose(ks_0 * window, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.identity(im_0, name='input_image')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_498": {
                "variable": {
                    "value": "ks_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ks_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks_0",
                            "variable"
                        ],
                        [
                            "tf_util.model_forward(im_k, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.identity(ks_k, name='output_kspace')",
                            "Call"
                        ],
                        [
                            "tf_util.model_forward(im_k, sensemap)",
                            "Call"
                        ],
                        [
                            "mask * ks_k",
                            "BinOp"
                        ],
                        [
                            "mask * ks_0 + (1 - mask) * ks_k",
                            "BinOp"
                        ],
                        [
                            "ks_k * mask_output",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output_kspace",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_499": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_0",
                            "variable"
                        ],
                        [
                            "tf.identity(im_k, name='output_image')",
                            "Call"
                        ],
                        [
                            "tf_util.model_transpose(ks_k * window, sensemap)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(im_k - im_0)",
                            "Call"
                        ],
                        [
                            "im_k_orig + t_update * im_k",
                            "BinOp"
                        ],
                        [
                            "tf_util.model_transpose(ks_k * window, sensemap)",
                            "Call"
                        ],
                        [
                            "prior_grad_res_net(im_k, training=is_training, num_features=resblock_num_features, num_blocks=resblock_num_blocks, num_features_out=num_channels_out, data_format='channels_last', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(im_k)",
                            "Call"
                        ],
                        [
                            "tf.identity(im_k, name='image')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_prod_58": {
                "input_tensor": {
                    "value": "shape_input[:axis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_60": {
                "values": {
                    "value": "(shape_0, shape_axis, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[real_out, real_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "imag_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[imag_out, imag_conj]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[real_out, imag_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_185": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'res_block'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_simple'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_223": {
                "variable": {
                    "value": "shape_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_262": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'res_block'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_simple'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_332": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'res_block'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'prior_grad_simple'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_373": {
                "variable": {
                    "value": "shape_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MRI'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_502": {
                "name": {
                    "value": "iter/image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tf.concat((summary_iter, tmp), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "num_summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "circular_pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "circular_crop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "non_circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_476": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_0",
                            "variable"
                        ],
                        [
                            "tf.identity(im_k, name='output_image')",
                            "Call"
                        ],
                        [
                            "tf_util.model_transpose(ks_k * window, sensemap)",
                            "Call"
                        ],
                        [
                            "tf_util.complex_to_channels(im_k - im_0)",
                            "Call"
                        ],
                        [
                            "im_k_orig + t_update * im_k",
                            "BinOp"
                        ],
                        [
                            "tf_util.model_transpose(ks_k * window, sensemap)",
                            "Call"
                        ],
                        [
                            "prior_grad_res_net(im_k, training=is_training, num_features=resblock_num_features, num_blocks=resblock_num_blocks, num_features_out=num_channels_out, data_format='channels_last', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(im_k)",
                            "Call"
                        ],
                        [
                            "tf.identity(im_k, name='image')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_199": {
                "name": {
                    "value": "circular_pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_226": {
                "name": {
                    "value": "circular_crop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_336": {
                "name": {
                    "value": "circular_pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_377": {
                "name": {
                    "value": "circular_crop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "iter_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'iter_%02d' % i_step",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_458": {
                "variable": {
                    "value": "t_update",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant([-2.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_463": {
                "name_or_scope": {
                    "value": "prox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_478": {
                "name": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "summary_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(summary_iter, tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_485": {
                "name": {
                    "value": "'max/' + iter_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_459": {
                "value": {
                    "value": "[-2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_486": {
                "input_tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(im_k, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mri_prep.py": {
        "tensorflow": {
            "set_verbosity_14": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_261": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'name': _bytes_feature(str.encode(case_name)), 'xslice': _int64_feature(i_x), 'ks_shape_x': _int64_feature(kspace.shape[3]), 'ks_shape_y': _int64_feature(kspace.shape[2]), 'ks_shape_z': _int64_feature(kspace.shape[1]), 'ks_shape_c': _int64_feature(kspace.shape[0]), 'map_shape_x': _int64_feature(sensemap.shape[4]), 'map_shape_y': _int64_feature(sensemap.shape[3]), 'map_shape_z': _int64_feature(sensemap.shape[2]), 'map_shape_c': _int64_feature(sensemap.shape[1]), 'map_shape_m': _int64_feature(sensemap.shape[0]), 'ks': _bytes_feature(kspace_x.tostring()), 'map': _bytes_feature(sensemap_x.tostring())}))",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'name': tf.FixedLenFeature([], tf.string), 'xslice': tf.FixedLenFeature([], tf.int64), 'ks_shape_x': tf.FixedLenFeature([], tf.int64), 'ks_shape_y': tf.FixedLenFeature([], tf.int64), 'ks_shape_z': tf.FixedLenFeature([], tf.int64), 'ks_shape_c': tf.FixedLenFeature([], tf.int64), 'map_shape_x': tf.FixedLenFeature([], tf.int64), 'map_shape_y': tf.FixedLenFeature([], tf.int64), 'map_shape_z': tf.FixedLenFeature([], tf.int64), 'map_shape_c': tf.FixedLenFeature([], tf.int64), 'map_shape_m': tf.FixedLenFeature([], tf.int64), 'ks': tf.FixedLenFeature([], tf.string), 'map': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_281": {
                "variable": {
                    "value": "xslice",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['xslice']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_283": {
                "variable": {
                    "value": "ks_shape_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['ks_shape_y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_284": {
                "variable": {
                    "value": "ks_shape_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['ks_shape_z']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_289": {
                "variable": {
                    "value": "map_shape_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['map_shape_y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_290": {
                "variable": {
                    "value": "map_shape_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['map_shape_z']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_319": {
                "variable": {
                    "value": "tf_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_320": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename_tfrecord]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_323": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_324": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "tf_sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_334": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_336": {
                "variable": {
                    "value": "tf_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_114": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_118": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_286": {
                "variable": {
                    "value": "ks_shape_c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['ks_shape_c']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_292": {
                "variable": {
                    "value": "map_shape_c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['map_shape_c']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_296": {
                "variable": {
                    "value": "map_shape_m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['map_shape_m']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_301": {
                "variable": {
                    "value": "ks_record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['ks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ks_record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['ks'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape + [2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ks_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ks_record_bytes, image_shape + [2])",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(ks_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ks_x, image_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ks_shape_c, ks_shape_z, ks_shape_y]",
                            "List"
                        ]
                    ]
                }
            },
            "decode_raw_308": {
                "variable": {
                    "value": "map_record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['map']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "map_record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['map'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "map_shape + [2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(map_record_bytes, map_shape + [2])",
                            "Call"
                        ],
                        [
                            "tf_util.channels_to_complex(map_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(map_x, map_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "map_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[map_shape_m * map_shape_c, map_shape_z, map_shape_y]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_300": {
                "name": {
                    "value": "kspace",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_307": {
                "name": {
                    "value": "sensemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Int64List_114": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_118": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_234": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'name': _bytes_feature(str.encode(case_name)), 'xslice': _int64_feature(i_x), 'ks_shape_x': _int64_feature(kspace.shape[3]), 'ks_shape_y': _int64_feature(kspace.shape[2]), 'ks_shape_z': _int64_feature(kspace.shape[1]), 'ks_shape_c': _int64_feature(kspace.shape[0]), 'map_shape_x': _int64_feature(sensemap.shape[4]), 'map_shape_y': _int64_feature(sensemap.shape[3]), 'map_shape_z': _int64_feature(sensemap.shape[2]), 'map_shape_c': _int64_feature(sensemap.shape[1]), 'map_shape_m': _int64_feature(sensemap.shape[0]), 'ks': _bytes_feature(kspace_x.tostring()), 'map': _bytes_feature(sensemap_x.tostring())})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_254": {
                "variable": {
                    "value": "tf_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "file_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_out_i, '%s_x%03d.tfrecords' % (case_name, i_x))",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_264": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_265": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_266": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_267": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_268": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_269": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_270": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_271": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_272": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_273": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_274": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_275": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_276": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_235": {
                "feature": {
                    "value": "{'name': _bytes_feature(str.encode(case_name)), 'xslice': _int64_feature(i_x), 'ks_shape_x': _int64_feature(kspace.shape[3]), 'ks_shape_y': _int64_feature(kspace.shape[2]), 'ks_shape_z': _int64_feature(kspace.shape[1]), 'ks_shape_c': _int64_feature(kspace.shape[0]), 'map_shape_x': _int64_feature(sensemap.shape[4]), 'map_shape_y': _int64_feature(sensemap.shape[3]), 'map_shape_z': _int64_feature(sensemap.shape[2]), 'map_shape_c': _int64_feature(sensemap.shape[1]), 'map_shape_m': _int64_feature(sensemap.shape[0]), 'ks': _bytes_feature(kspace_x.tostring()), 'map': _bytes_feature(sensemap_x.tostring())}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "mri_util/tf_util.py": {
        "tensorflow": {
            "reduce_mean_10": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.abs(predictions - ground_truths))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, ndims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_13": {
                "variable": {
                    "value": "maxvals",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(ground_truths)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, ndims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_19": {
                "variable": {
                    "value": "psnrs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "psnrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20 * tf.log(maxvals / tf.sqrt(mse)) / tf.log(tf.constant(10, dtype=mse.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(psnrs, maxpsnr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxpsnr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_279": {
                "variable": {
                    "value": "tf_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(tf_shape_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_281": {
                "variable": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(tf_shape_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_284": {
                "variable": {
                    "value": "[tf_yg, tf_xg]",
                    "type": "List",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(tf_shape_y), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf_y / tf.cast(tf_shape_y, tf.float32) - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(tf_shape_x), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf_x / tf.cast(tf_shape_x, tf.float32) - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_285": {
                "variable": {
                    "value": "tf_yg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_yg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf_yg, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "tf_xg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_xg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf_xg, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_287": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf_yg, tf_xg)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_47": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([realOut, imagOut], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([realOut, imagOut], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[realOut, imagOut]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([realOut, imagOut], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([realOut, imagOut], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.shape(tf_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_54": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([realOut, imagOut], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([realOut, imagOut], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_58": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[realOut, imagOut]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([realOut, imagOut], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([realOut, imagOut], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_output, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tf_output)",
                            "Call"
                        ],
                        [
                            "tf.shape(tf_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_66": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.real(image), tf.imag(image)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(image)[:-1], [image.shape[-1] * 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(image)[:-1], [image.shape[-1] * 2]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(image)[:-1], [image.shape[-1] // 2]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "complex_77": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "image_out[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "image_out[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(image)[:-1], [image.shape[-1] // 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(image)[:-1], [image.shape[-1] * 2]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(image)[:-1], [image.shape[-1] // 2]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_89": {
                "variable": {
                    "value": "(split0, split1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_90": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(split1, split0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_103": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_131": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_154": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_159": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tpdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ],
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tpdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ],
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_184": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_189": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(1.0 * im_out.get_shape().as_list()[-2])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.cast(dims[1] * dims[2], dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(fftscale, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_196": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tpdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ],
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_205": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tpdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ],
                        [
                            "list(range(len(im_out.get_shape().as_list())))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keep_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_218": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_226": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_in",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_227": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_230": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, 1, image_in.get_shape().as_list()[-1]))",
                            "Call"
                        ],
                        [
                            "tf.constant(mod, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_231": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.real(image), tf.imag(image)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.complex(image_out[:, 0], image_out[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_out, shape_out)",
                            "Call"
                        ],
                        [
                            "tf.square(tf.abs(image_in))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.angle(image_in))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(image_out, keep_dims=keep_dims, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(image_out)",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_in, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reverse(image_out, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.multiply(image_out, mod)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(mask_x, image_orig), tf.multiply(1 - mask_x, image_cur))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, 1, image_in.get_shape().as_list()[-1]))",
                            "Call"
                        ],
                        [
                            "tf.constant(mod, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_240": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(mask_x, image_orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(1 - mask_x, image_cur)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_251": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_263": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(image_orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "threshhold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_264": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kspace_mask(image_orig)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(image_orig, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.abs(image_orig), threshhold)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_x, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_11": {
                "x": {
                    "value": "tf.abs(predictions - ground_truths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_13": {
                "x": {
                    "value": "ground_truths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "x": {
                    "value": "tf.constant(10, dtype=mse.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_25": {
                "input": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fft2c(im)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_25": {
                "input": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fft2c(im)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_100": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 * im_out.get_shape().as_list()[-2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_128": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 * im_out.get_shape().as_list()[-2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_136": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_152": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(dims[1] * dims[2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_182": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_186": {
                "variable": {
                    "value": "fftscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(dims[1] * dims[2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_214": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(image_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_216": {
                "variable": {
                    "value": "image_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.angle(image_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_253": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kspace_mask(image_orig)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(image_orig, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.abs(image_orig), threshhold)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_x, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_328": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.conj(sensemap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_331": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_332": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sensemap",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_333": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.arange(image_size[0], dtype=np.float32) / image_size[0] - 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.conj(sensemap), x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, sensemap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, axis=3)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=False)",
                            "Call"
                        ],
                        [
                            "fft2c(x)",
                            "Call"
                        ],
                        [
                            "ifft2c(x)",
                            "Call"
                        ],
                        [
                            "sensemap_model(x, sensemap, do_transpose=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_341": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'complex2channels'",
                            "Method Argument"
                        ],
                        [
                            "'channels2complex'",
                            "Method Argument"
                        ],
                        [
                            "'fftshift'",
                            "Method Argument"
                        ],
                        [
                            "'ifftc'",
                            "Method Argument"
                        ],
                        [
                            "'fftc'",
                            "Method Argument"
                        ],
                        [
                            "'ifft2c'",
                            "Method Argument"
                        ],
                        [
                            "'fft2c'",
                            "Method Argument"
                        ],
                        [
                            "'sumofsq'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_conj'",
                            "Method Argument"
                        ],
                        [
                            "'replace_kspace'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_mask'",
                            "Method Argument"
                        ],
                        [
                            "'kspace_threshhold'",
                            "Method Argument"
                        ],
                        [
                            "'sensemap_model'",
                            "Method Argument"
                        ],
                        [
                            "'model_forward'",
                            "Method Argument"
                        ],
                        [
                            "'model_transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "x": {
                    "value": "predictions - ground_truths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "x": {
                    "value": "maxvals / tf.sqrt(mse)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_16": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mse.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_110": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_138": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ifft2d_171": {
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft2d_201": {
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_241": {
                "x": {
                    "value": "1 - mask_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image_cur",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_263": {
                "x": {
                    "value": "image_orig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "tf_shape_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "tf_shape_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_66": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_66": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ifft_112": {
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft_139": {
                "input": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ifft(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.fft(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(im_out) * fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "im",
                            "variable"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.fft2d(im_out) / fftscale",
                            "BinOp"
                        ],
                        [
                            "fftshift(im_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "fftshift(im_out, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(im_out, tpdims)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_156": {
                "x": {
                    "value": "dims[1] * dims[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "dims[1] * dims[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_214": {
                "x": {
                    "value": "image_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "angle_216": {
                "input": {
                    "value": "image_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conj_328": {
                "x": {
                    "value": "sensemap",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "x": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(tf.abs(predictions - ground_truths)), axis=list(range(1, ndims)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mri_util/zReLU.py": {
        "tensorflow": {
            "complex_49": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_realpart(x)",
                            "Call"
                        ],
                        [
                            "self.get_realpart(x)",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(real[indices1], 0)",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(real[indices2], 0)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_imagpart(x)",
                            "Call"
                        ],
                        [
                            "self.get_imagpart(x)",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(imag[indices1], 0)",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(imag[indices2], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "angle_50": {
                "variable": {
                    "value": "ang",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.complex(real, imag)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_conv1d.py": {
        "tensorflow": {
            "ones_4": {
                "variable": {
                    "value": "tf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 256, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "test_images.py": {
        "tensorflow": {
            "DEFINE_float_27": {
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L1 regularizer for CS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "gpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "single",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Single or multi GPU Mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "complex",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Real or complex convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "feat_map",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of feature maps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "shape_y",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "shape_z",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "num_channels",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of channels for input datasets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "num_emaps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of eigen maps for input sensitivity maps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "print_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print out level.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "log_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory where logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for checkpoints and event logs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_summary_image",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images for summary output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Seed to initialize random number generators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "num_grad_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of grad steps for unrolled algorithms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU device to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_86": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_91": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "max_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "mask_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "masks",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where masks are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_98": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Sub directory where training data are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_109": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train_validate",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Train_validate, train, or predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_113": {
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The activation function used",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_116": {
                "name": {
                    "value": "num_cases",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of inference files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_119": {
                "name": {
                    "value": "layer_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number layer to plot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_141": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_383": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "ks_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ks_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "sense_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "sense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "im_truth_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_191": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_192": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, FLAGS.train_dir)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_198": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_199": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_221": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_478": {
                "variable": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_487": {
                "variable": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_truth_place",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "real_496": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_507": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.abs(sensemap)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_509": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_514": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "run_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_144": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_157": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_209": {
                "name": {
                    "value": "parameters/parameters",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_parameters + variable_parameters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_474": {
                "name": {
                    "value": "input-output-truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_482": {
                "name": {
                    "value": "kspace",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_490": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_493": {
                "name": {
                    "value": "truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_497": {
                "name": {
                    "value": "image_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_501": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_503": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(mask_input, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_506": {
                "name": {
                    "value": "sensemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_515": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_508": {
                "x": {
                    "value": "sensemap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sense_place",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_initializer_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_479": {
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_511": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_512": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_loop.py": {
        "tensorflow": {
            "DEFINE_string_23": {
                "name": {
                    "value": "gpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "single",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Single or multi GPU Mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "complex",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Real or complex convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "feat_map",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of feature maps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "shape_y",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "shape_z",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "num_channels",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of channels for input datasets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "num_emaps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of eigen maps for input sensitivity maps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "print_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print out level.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_39": {
                "name": {
                    "value": "log_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory where logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for checkpoints and event logs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_summary_image",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images for summary output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Seed to initialize random number generators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "num_grad_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of grad steps for unrolled algorithms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_76": {
                "name": {
                    "value": "device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU device to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_77": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_80": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_83": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_85": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "max_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_90": {
                "name": {
                    "value": "mask_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "masks",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where masks are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_92": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Sub directory where training data are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_95": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_103": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train_validate",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Train_validate, train, or predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_107": {
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The activation function used",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_110": {
                "name": {
                    "value": "num_cases",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of inference files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_113": {
                "name": {
                    "value": "layer_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number layer to plot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_132": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_316": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "ks_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ks_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "sense_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "sense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "im_truth_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_185": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, FLAGS.train_dir)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_191": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_192": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_212": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_391": {
                "variable": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_400": {
                "variable": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_407": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_truth_place",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "real_409": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_420": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.abs(sensemap)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_422": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "run_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_135": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_148": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_387": {
                "name": {
                    "value": "input-output-truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_395": {
                "name": {
                    "value": "kspace",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_403": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_406": {
                "name": {
                    "value": "truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_410": {
                "name": {
                    "value": "image_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_414": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_416": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(mask_input, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_419": {
                "name": {
                    "value": "sensemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_428": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_421": {
                "x": {
                    "value": "sensemap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sense_place",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_392": {
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_424": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_425": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_loop.py": {
        "tensorflow": {
            "set_verbosity_17": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "gpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "single",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Single or multi GPU Mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "real",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Real or complex convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "feat_map",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of feature maps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "shape_y",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "shape_z",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Image shape in Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "num_channels",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of channels for input datasets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "num_emaps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of eigen maps for input sensitivity maps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "print_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print out level.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "log_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory where logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for checkpoints and event logs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "num_summary_image",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images for summary output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved,  + in seconds.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Seed to initialize random number generators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "num_grad_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of grad steps for unrolled algorithms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_72": {
                "name": {
                    "value": "device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU device to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_76": {
                "name": {
                    "value": "adam_beta1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_79": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_82": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_84": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_85": {
                "name": {
                    "value": "max_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_89": {
                "name": {
                    "value": "mask_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "masks",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where masks are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_91": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Sub directory where training data are located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_94": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train_validate",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Train_validate, train, or predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The activation function used",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "num_cases",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of inference files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_112": {
                "name": {
                    "value": "layer_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number layer to plot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_125": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_274": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "ks_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ks_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "sense_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "sense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1, FLAGS.num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "im_truth_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, FLAGS.shape_z, FLAGS.shape_y, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(im_out_place - im_truth_place)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_187": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/l1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(im_out_place - im_truth_place), name='l1')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "opt",
                    "type": "str",
                    "possible_values": []
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_207": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_208": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, FLAGS.train_dir)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_214": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_215": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_240": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_300": {
                "variable": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "angle_316": {
                "variable": {
                    "value": "summary_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.model_transpose(ks_input, sensemap)",
                            "Call"
                        ]
                    ]
                }
            },
            "angle_317": {
                "variable": {
                    "value": "summary_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_out_place",
                            "variable"
                        ]
                    ]
                }
            },
            "angle_318": {
                "variable": {
                    "value": "summary_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_truth_place",
                            "variable"
                        ]
                    ]
                }
            },
            "concat_319": {
                "variable": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_330": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_truth_place",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "real_332": {
                "variable": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_343": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.abs(sensemap)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_345": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "variable": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "run_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_128": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_144": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_199": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "counter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_205": {
                "variable": {
                    "value": "update_counter",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('counter', shape=[1], initializer=tf.constant_initializer([0]), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.add(counter, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_225": {
                "name": {
                    "value": "parameters/parameters",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_parameters + variable_parameters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_296": {
                "name": {
                    "value": "input-output-truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_304": {
                "name": {
                    "value": "kspace",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.concat((summary_input, summary_output, summary_truth), axis=2) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_312": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_315": {
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_322": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((summary_input, summary_output, summary_truth), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_324": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(ks_input, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.sumofsq(image_input, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.angle(image_input)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_326": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(ks_output, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.sumofsq(image_output, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.angle(image_output)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_329": {
                "name": {
                    "value": "truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_333": {
                "name": {
                    "value": "image_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_truth_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(image_truth, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.real(summary_truth_real)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_337": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_339": {
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.sumofsq(mask_input, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_342": {
                "name": {
                    "value": "sensemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_351": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "FLAGS.num_summary_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_186": {
                "x": {
                    "value": "im_out_place - im_truth_place",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "counter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_344": {
                "x": {
                    "value": "sensemap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sense_place",
                            "variable"
                        ]
                    ]
                }
            },
            "ConfigProto_129": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_205": {
                "x": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('counter', shape=[1], initializer=tf.constant_initializer([0]), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_301": {
                "values": {
                    "value": "(summary_input, summary_output, summary_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_202": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_347": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "summary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.abs(sensemap), [0, 0, 0, 0, 0], [-1, -1, -1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(summary_map, [0, 1, 4, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(summary_map, [tf.shape(summary_map)[0], tf.shape(summary_map)[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(summary_map, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}