{
    "attention_gru_cell.py": {
        "tensorflow": {
            "get_variable_scope_105": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat(args, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(bias_start, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_121": {
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(args[0], weights)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat(args, 1), weights)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('biases', [output_size], dtype=dtype, initializer=init_ops.constant_initializer(bias_start, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "warn_37": {
                "msg": {
                    "value": "%s: The input_size parameter is deprecated.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "scope or 'attention_gru_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(inputs, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self._num_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear([inputs, state], self._num_units, True)",
                            "Call"
                        ],
                        [
                            "sigmoid(r)",
                            "Call"
                        ],
                        [
                            "r * _linear(state, self._num_units, False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "outer_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_112": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "memn2n.py": {
        "tensorflow": {
            "AdamOptimizer_58": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "self._encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(encoding(self._sentence_size, self._embedding_size), name='encoding')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_71": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(self._summary, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.cast(self._summary, tf.float32), name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_98": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states[0], hidden_states[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([hidden_states[0], hidden_states[1]], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "stories",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs * self._encoding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_118": {
                "variable": {
                    "value": "forward_gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_119": {
                "variable": {
                    "value": "backward_gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_120": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "forward_gru_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "backward_gru_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embeddings, stories)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(inputs * self._encoding, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "fact_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(attentions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.squeeze(self.get_attention(q_vec, memory, fv, bool(hop_index) or bool(i)), axis=1) for (i, fv) in enumerate(tf.unstack(fact_vecs, axis=1))]",
                            "ListComp"
                        ],
                        [
                            "tf.transpose(tf.stack(attentions))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attentions)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attentions, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_164": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.squeeze(self.get_attention(q_vec, memory, fv, bool(hop_index) or bool(i)), axis=1) for (i, fv) in enumerate(tf.unstack(fact_vecs, axis=1))]",
                            "ListComp"
                        ],
                        [
                            "tf.transpose(tf.stack(attentions))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attentions)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attentions, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "gru_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fact_vecs, attentions]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_35": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "fact_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fact_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fact_vecs, self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "feature_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fact_vec * prev_memory, fact_vec, prev_memory]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_172": {
                "variable": {
                    "value": "(_, episode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "AttentionGRUCell(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "gru_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fact_vecs, attentions], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.embeddings.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output[0], output[1], output[2], output[3], output[4]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_253": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([output[0], output[1], output[2], output[3], output[4]], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_254": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_layer, 70, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, 1, None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "squeeze_255": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_layer, 70, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, 1, None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "encoding(self._sentence_size, self._embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_128": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if hop_index > 0 else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "squeeze_157": {
                "input": {
                    "value": "self.get_attention(q_vec, memory, fv, bool(hop_index) or bool(i))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "values": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.squeeze(self.get_attention(q_vec, memory, fv, bool(hop_index) or bool(i)), axis=1) for (i, fv) in enumerate(tf.unstack(fact_vecs, axis=1))]",
                            "ListComp"
                        ],
                        [
                            "tf.transpose(tf.stack(attentions))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attentions)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attentions, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "attention_gru",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if hop_index > 0 else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_218": {
                "variable": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_233": {
                "variable": {
                    "value": "gru_fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_234": {
                "variable": {
                    "value": "gru_bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_243": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "gru_fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ],
                        [
                            "rnn.DropoutWrapper(gru_fw_cell, output_keep_prob=self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "gru_bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ],
                        [
                            "rnn.DropoutWrapper(gru_bw_cell, output_keep_prob=self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fact_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fact_vecs, self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "hop3_out[hopn]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "hop3_out[hopn]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "self._summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_86": {
                "name": {
                    "value": "var.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_norm_88": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self._max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "article",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "bidirectional_rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DropoutWrapper_236": {
                "variable": {
                    "value": "gru_fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "gru_fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ],
                        [
                            "rnn.DropoutWrapper(gru_fw_cell, output_keep_prob=self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_237": {
                "variable": {
                    "value": "gru_bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "gru_bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.hidden_size)",
                            "Call"
                        ],
                        [
                            "rnn.DropoutWrapper(gru_bw_cell, output_keep_prob=self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_250": {
                "variable": {
                    "value": "output[hopn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "output[hopn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_69": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_159": {
                "value": {
                    "value": "fact_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fact_vecs, self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_248": {
                "values": {
                    "value": "[outputs[hopn][0], outputs[hopn][1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "'hop_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "single.py": {
        "tensorflow": {
            "placeholder_156": {
                "variable": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_157": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "baseline",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "training directory (models and summaries are saved there periodically)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tfrecord/training/*.tfrecord",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "validation_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tfrecord/validation/*.tfrecord",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "validation_path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_21": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for SGD.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_22": {
                "name": {
                    "value": "anneal_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs between halving the learnign rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_23": {
                "name": {
                    "value": "anneal_stop_epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Epoch number to end annealed lr schedule.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_24": {
                "name": {
                    "value": "max_grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size for training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "hops",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hops in the Memory Network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train for.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "embedding_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Embedding size for embedding matrices.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "memory_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of memory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "random_state",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Random state.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_31": {
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "keep_prob.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "sentence_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "sentence_size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "print_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "how often to print current loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "record",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "evaluation_interval.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "l2.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_36": {
                "name": {
                    "value": "word2vec_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "word2vec_init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "vocab",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "FLAGS.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_123": {
                "variable": {
                    "value": "parsed",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'article': tf.FixedLenFeature([], tf.string), 'abstract': tf.FixedLenFeature([], tf.string), 'label_list': tf.FixedLenFeature([], tf.string), 'title': tf.FixedLenFeature([], tf.string), 'file_name': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_188": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_189": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_117": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_118": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_119": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_120": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_121": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_160": {
                "func": {
                    "value": "batcher",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[article, abstract, label_list, title, file_name]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int32, tf.int32, tf.float32, tf.int32, tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "story2TF.py": {
        "tensorflow": {
            "TFRecordWriter_68": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "join(tf_directory, outfile + '_' + str(fileindex) + '.tfrecord')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_74": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "placeholder_158": {
                "variable": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_159": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "test_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_20": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for SGD.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_21": {
                "name": {
                    "value": "max_grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size for training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "hops",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hops in the Memory Network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train for.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "embedding_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Embedding size for embedding matrices.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "memory_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of memory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "random_state",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Random state.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_28": {
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "keep_prob.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "sentence_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "sentence_size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "l2.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_31": {
                "name": {
                    "value": "word2vec_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "word2vec_init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "vocab",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "FLAGS.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_125": {
                "variable": {
                    "value": "parsed",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'article': tf.FixedLenFeature([], tf.string), 'abstract': tf.FixedLenFeature([], tf.string), 'label_list': tf.FixedLenFeature([], tf.string), 'title': tf.FixedLenFeature([], tf.string), 'file_name': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_119": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_120": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_121": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_122": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_123": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_162": {
                "func": {
                    "value": "batcher",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[article, abstract, label_list, title, file_name]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int32, tf.int32, tf.float32, tf.int32, tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}