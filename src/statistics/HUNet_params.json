{
    "datasets/simulated.py": {
        "sklearn": {
            "KFold_20": {
                "variable": {
                    "value": "cv",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "utils/construct_hypergraph.py": {
        "sklearn": {}
    },
    "models/layers.py": {
        "torch": {
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout_rate']",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.down_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.pools",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.up_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_ft, out_ft)",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "H",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([self.H[perm[i], perm.cpu().numpy()] for i in range(len(perm))]).reshape((len(perm), len(perm)))",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "possible_values": [
                        [
                            "xsaved[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_ft)",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "(res, up)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train_and_evaluate.py": {
        "torch": {
            "max_135": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(feats=fts)",
                            "Call"
                        ],
                        [
                            "model(feats=fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_161": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "Tensor_165": {
                "variable": {
                    "value": "fts",
                    "possible_values": []
                }
            },
            "Tensor_166": {
                "variable": {
                    "value": "lbls",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "lbls",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "possible_values": [
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ],
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "possible_values": [
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ],
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_190": {
                "variable": {
                    "value": "schedular",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=cfg['lr'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg['milestones']",
                    "possible_values": [
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ],
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "cfg['gamma']",
                    "possible_values": [
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ],
                        [
                            "get_config('config/config.yaml')",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_193": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "preds[idx_test] == lbls.data[idx_test]",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "preds[(min(idx_test) + lbls.data[idx_test].nonzero()).clone().detach().long()] == 1",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "preds[(min(idx_test) + (lbls.data[idx_test] != 1).nonzero()).clone().detach().long()] == 0",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(feats=fts)",
                            "Call"
                        ],
                        [
                            "model(feats=fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_86": {
                "input": {
                    "value": "preds[idx] == lbls.data[idx]",
                    "possible_values": []
                }
            },
            "set_grad_enabled_74": {
                "mode": {
                    "value": "phase == 'train'",
                    "possible_values": []
                }
            }
        }
    },
    "utils/topk_pool.py": {
        "torch": {
            "nonzero_15": {
                "variable": {
                    "value": "perm",
                    "possible_values": []
                },
                "input": {
                    "value": "x > scores_min",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "cum_num_nodes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[num_nodes.new_zeros(1), num_nodes.cumsum(dim=0)[:-1]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "arange_24": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "start": {
                    "value": "batch.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "[torch.arange(k[i], dtype=torch.long, device=x.device) + i * max_num_nodes for i in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, in_channels)",
                    "possible_values": []
                }
            },
            "arange_38": {
                "start": {
                    "value": "k[i]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            }
        }
    }
}