{
    "main.py": {
        "sklearn": {
            "check_random_state_147": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed + repeat)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_222": {
                "variable": {
                    "value": "m_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "is_mistake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([0 * np.ones(n_samples), 1 * np.ones(n_samples)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "margins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phat[rows, yhat] - phat[rows, y_noisy]",
                            "BinOp"
                        ],
                        [
                            "[get_margin(model, noisy_dataset.X_tr, noisy_dataset.y_tr, i) for i in selected]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "roc_auc_score_223": {
                "variable": {
                    "value": "g_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "is_mistake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([0 * np.ones(n_samples), 1 * np.ones(n_samples)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "fishervalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fisher_kernel(i, i, model, noisy_dataset.X_tr, noisy_dataset.y_tr) for i in selected]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "check_random_state_265": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed + repeat)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bunch_330": {
                "variable": {
                    "value": "stat",
                    "type": "variable",
                    "possible_values": []
                },
                "n_queried": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_mistakes_seen": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_cleaned": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_cleaned_ce": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_cleaned_ex": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "pr",
                    "type": "variable",
                    "possible_values": []
                },
                "recall": {
                    "value": "rc",
                    "type": "variable",
                    "possible_values": []
                },
                "f1": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "ece": {
                    "value": "ece",
                    "type": "variable",
                    "possible_values": []
                },
                "zs_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "noisy_ce": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "suspiciousnesses": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case2": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case3": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case4": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case5": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case6": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case7": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case8": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case9": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case10": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case11": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case12": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case13": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "case14": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ce_pr_at_5": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ce_pr_at_10": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ce_pr_at_25": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_633": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (len(kn) * 1)",
                            "BinOp"
                        ]
                    ]
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_24": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.max(phat, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y == yhat",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_72": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "dataset.X_tr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_293": {
                "variable": {
                    "value": "X_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "dataset.X_ts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EarlyStopping_298": {
                "variable": {
                    "value": "callback",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                },
                "baseline": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7 if args.model == 'logreg' else 0.9",
                            "IfExp"
                        ]
                    ]
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_846": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "negsup/datasets.py": {
        "sklearn": {
            "make_classification_56": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_repeated": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "flip_y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_66": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "np.array([[-4, 4], [4, 4], [-4, -4], [4, -4]])",
                    "type": "Call",
                    "possible_values": []
                },
                "cluster_std": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_73": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_iris_87": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_88": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_92": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_breast_cancer_102": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_103": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_107": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_wine_117": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_118": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_122": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MinMaxScaler_171": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_206": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_209": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_275": {
                "variable": {
                    "value": "(X_tr, X_ts, y_tr, y_ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_random_state_324": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BallTree_417": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr.reshape(dataset.X_tr.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MinMaxScaler_38": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SimpleImputer_46": {
                "variable": {
                    "value": "imputer",
                    "type": "variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "most_frequent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneHotEncoder_48": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "drop": {
                    "value": "if_binary",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Bunch_77": {
                "X_tr": {
                    "value": "X_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:n_tr, :]",
                            "Subscript"
                        ],
                        [
                            "X_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "X_ts": {
                    "value": "X_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[n_tr:, :]",
                            "Subscript"
                        ],
                        [
                            "X_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "['red', 'blue', 'green', 'yellow']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bunch_93": {
                "X_tr": {
                    "value": "scaler.transform(X_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "scaler.transform(X_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "len(dataset.target_names)",
                    "type": "Call",
                    "possible_values": []
                },
                "class_names": {
                    "value": "dataset.target_names",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bunch_108": {
                "X_tr": {
                    "value": "scaler.transform(X_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "scaler.transform(X_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "len(dataset.target_names)",
                    "type": "Call",
                    "possible_values": []
                },
                "class_names": {
                    "value": "dataset.target_names",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bunch_123": {
                "X_tr": {
                    "value": "scaler.transform(X_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "scaler.transform(X_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "len(dataset.target_names)",
                    "type": "Call",
                    "possible_values": []
                },
                "class_names": {
                    "value": "dataset.target_names",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bunch_172": {
                "X_tr": {
                    "value": "scaler.transform(X_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "scaler.transform(X_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y[:n_tr])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y[n_tr:])",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "['<=50K', '>50K']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bunch_210": {
                "X_tr": {
                    "value": "scaler.transform(X_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "scaler.transform(X_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "['negative', 'positive']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bunch_230": {
                "X_tr": {
                    "value": "X_tr.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "X_ts.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "['4', '9']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bunch_240": {
                "X_tr": {
                    "value": "X_tr.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "X_ts.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "list(map(str, range(10)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_250": {
                "X_tr": {
                    "value": "X_tr.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "X_ts.reshape(-1, 28, 28, 1) / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "list(map(str, range(10)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_264": {
                "X_tr": {
                    "value": "X_tr / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "X_ts": {
                    "value": "X_ts / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_tr": {
                    "value": "keras.utils.to_categorical(y_tr)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "keras.utils.to_categorical(y_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "class_names": {
                    "value": "class_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']",
                            "List"
                        ]
                    ]
                }
            },
            "Bunch_279": {
                "X_tr": {
                    "value": "X_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:n_tr, :]",
                            "Subscript"
                        ],
                        [
                            "X_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "X_ts": {
                    "value": "X_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[n_tr:, :]",
                            "Subscript"
                        ],
                        [
                            "X_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_tr": {
                    "value": "y_tr.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_ts": {
                    "value": "y_ts.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "len(dataset['target_names'])",
                    "type": "Call",
                    "possible_values": []
                },
                "class_names": {
                    "value": "dataset['target_names']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_iris()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer()",
                            "Call"
                        ],
                        [
                            "load_wine()",
                            "Call"
                        ],
                        [
                            "load(dataset_path)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "load_data_219": {
                "variable": {
                    "value": "((X_tr, y_tr), (X_ts, y_ts))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_239": {
                "variable": {
                    "value": "((X_tr, y_tr), (X_ts, y_ts))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_249": {
                "variable": {
                    "value": "((X_tr, y_tr), (X_ts, y_ts))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_259": {
                "variable": {
                    "value": "((X_tr, y_tr), (X_ts, y_ts))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_79": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_80": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_95": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_96": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_110": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_111": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_125": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_126": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_174": {
                "y": {
                    "value": "y[:n_tr]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_categorical_175": {
                "y": {
                    "value": "y[n_tr:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_categorical_212": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_213": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_232": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_233": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_242": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_243": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_252": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_253": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_266": {
                "y": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_tr[tr_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_categorical_267": {
                "y": {
                    "value": "y_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_ts[ts_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "negsup/fisher.py": {
        "sklearn": {
            "check_random_state_165": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_191": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "argmax_90": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_94": {
                "variable": {
                    "value": "conditional_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x[None, :])[0, label]",
                            "Subscript"
                        ],
                        [
                            "model(x[None, :])[0, label]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_123": {
                "variable": {
                    "value": "conditional_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x[None, :])[0, label]",
                            "Subscript"
                        ],
                        [
                            "model(x[None, :])[0, label]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientTape_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(t1, np.reshape(t2, [-1]))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "t + 1",
                            "BinOp"
                        ],
                        [
                            "block_fi",
                            "variable"
                        ],
                        [
                            "np.array(t, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(t, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(t1, np.reshape(t2, [-1]))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "t + 1",
                            "BinOp"
                        ],
                        [
                            "block_fi",
                            "variable"
                        ],
                        [
                            "np.array(t, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(t, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "negsup/negotiation.py": {
        "sklearn": {
            "check_random_state_139": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BallTree_161": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[candidates].reshape(n_candidates, -1)",
                            "Call"
                        ],
                        [
                            "dataset.X_tr[candidates].reshape(n_candidates, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BallTree_192": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[candidates].reshape(n_candidates, -1)",
                            "Call"
                        ],
                        [
                            "dataset.X_tr[candidates].reshape(n_candidates, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BallTree_219": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "dataset.X_tr[candidates].reshape(len(candidates), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "log_273": {
                "variable": {
                    "value": "conditional_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_label[0, label_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientTape_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_270": {
                "variable": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_tr[example_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_272": {
                "variable": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "negsup/models.py": {
        "tensorflow": {
            "CategoricalCrossentropy_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "from_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_16": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=fn, elems=inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "layers": {
                    "value": "[layers.Flatten(input_shape=input_shape), layers.Dense(dataset.n_classes, activation=out_activation, name='hack')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "layers": {
                    "value": "[layers.Flatten(input_shape=input_shape), layers.Dense(64, activation='relu'), layers.Dropout(0.2), layers.Dense(32, activation='relu'), layers.Dropout(0.2), layers.Dense(dataset.n_classes, activation=out_activation, name='hack')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "layers": {
                    "value": "[layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape), layers.MaxPooling2D((2, 2)), layers.Conv2D(64, (3, 3), activation='relu'), layers.Flatten(), layers.Dense(64, activation='relu'), layers.Dropout(0.2), layers.Dense(dataset.n_classes, activation=out_activation, name='hack')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_111": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "tensor": {
                    "value": "tf.matmul(xi[:, tf.newaxis], xi[tf.newaxis, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Flatten_33": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "(dataset.X_tr[0].shape[0] ** 2,)",
                            "Tuple"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dense_34": {
                "units": {
                    "value": "dataset.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "hack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_43": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "(dataset.X_tr[0].shape[0] ** 2,)",
                            "Tuple"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dense_44": {
                "units": {
                    "value": "dataset.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "hack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "(dataset.X_tr[0].shape[0] ** 2,)",
                            "Tuple"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dense_54": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_58": {
                "units": {
                    "value": "dataset.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "hack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_67": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "(dataset.X_tr[0].shape[0] ** 2,)",
                            "Tuple"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ],
                        [
                            "dataset.X_tr[0].shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MaxPooling2D_68": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_69": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_71": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_73": {
                "units": {
                    "value": "dataset.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax if to_proba else None",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "hack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "a": {
                    "value": "xi[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "xi[tf.newaxis, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "negsup/utils.py": {
        "tensorflow": {
            "set_floatx_8": {
                "value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_floatx_11": {
                "value": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}