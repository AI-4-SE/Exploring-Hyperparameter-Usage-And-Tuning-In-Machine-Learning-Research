{
    "helper.py": {
        "sklearn": {
            "KFold_347": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lstms/LSTMModel.py": {
        "sklearn": {
            "KFold_24": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "svrs/aspect_finsvr.py": {
        "sklearn": {
            "Pipeline_48": {
                "variable": {
                    "value": "union_pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('union', FeatureUnion([('ngrams', Pipeline([('text_extract', FeatureExtractor()), ('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))])), ('target_extract', Pipeline([('aspect', FeatureExtractor()), ('aspect_list', ToList()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))]))])), ('clf', svm.LinearSVR())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_68": {
                "variable": {
                    "value": "grid_search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "union_pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('union', FeatureUnion([('ngrams', Pipeline([('text_extract', FeatureExtractor()), ('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))])), ('target_extract', Pipeline([('aspect', FeatureExtractor()), ('aspect_list', ToList()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))]))])), ('clf', svm.LinearSVR())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "union_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'union__ngrams__tokeniser__ngram_range': [(1, 2)], 'union__ngrams__tokeniser__tokeniser_func': [helper.unitok_tokens], 'union__ngrams__text_extract__feature': ['text'], 'union__ngrams__compextract__words_replace': [train_comp_names], 'union__ngrams__compextract__replacement': ['companyname'], 'union__ngrams__compextract__expand': [None], 'union__ngrams__posextract__words_replace': [pos_word], 'union__ngrams__posextract__replacement': ['posword'], 'union__ngrams__posextract__expand': [fin_word2vec_model], 'union__ngrams__posextract__expand_top_n': [10], 'union__ngrams__negextract__words_replace': [neg_word], 'union__ngrams__negextract__replacement': ['negword'], 'union__ngrams__negextract__expand': [fin_word2vec_model], 'union__ngrams__negextract__expand_top_n': [10], 'union__ngrams__count_grams__binary': [True], 'union__target_extract__aspect__feature': ['aspects'], 'union__target_extract__count_grams__binary': [True], 'clf__C': [0.1], 'clf__epsilon': [0.01]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "n_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scorer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_scorer(helper.cosine_score)",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_scorer_17": {
                "score_func": {
                    "value": "helper.cosine_score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FeatureUnion_49": {
                "transformer_list": {
                    "value": "[('ngrams', Pipeline([('text_extract', FeatureExtractor()), ('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))])), ('target_extract', Pipeline([('aspect', FeatureExtractor()), ('aspect_list', ToList()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LinearSVR_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Pipeline_50": {
                "steps": {
                    "value": "[('text_extract', FeatureExtractor()), ('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_58": {
                "steps": {
                    "value": "[('aspect', FeatureExtractor()), ('aspect_list', ToList()), ('count_grams', CountVectorizer(analyzer=helper.analyzer))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CountVectorizer_56": {
                "analyzer": {
                    "value": "helper.analyzer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CountVectorizer_61": {
                "analyzer": {
                    "value": "helper.analyzer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "svrs/feature_extractors/FeatureExtractor.py": {
        "sklearn": {}
    },
    "svrs/feature_extractors/ToList.py": {
        "sklearn": {}
    },
    "svrs/feature_extractors/Tokeniser.py": {
        "sklearn": {}
    },
    "svrs/feature_extractors/WordReplacement.py": {
        "sklearn": {}
    },
    "svrs/finsvr.py": {
        "sklearn": {
            "Pipeline_44": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer)), ('clf', svm.LinearSVR())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_55": {
                "variable": {
                    "value": "grid_search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('tokeniser', Tokeniser()), ('compextract', WordReplacement()), ('posextract', WordReplacement()), ('negextract', WordReplacement()), ('count_grams', CountVectorizer(analyzer=helper.analyzer)), ('clf', svm.LinearSVR())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'tokeniser__ngram_range': [(1, 2)], 'tokeniser__tokeniser_func': [helper.unitok_tokens], 'compextract__words_replace': [train_comp_names], 'compextract__replacement': ['companyname'], 'compextract__expand': [None], 'posextract__words_replace': [pos_word], 'posextract__replacement': ['posword'], 'posextract__expand': [fin_word2vec_model], 'posextract__expand_top_n': [10], 'negextract__words_replace': [neg_word], 'negextract__replacement': ['negword'], 'negextract__expand': [fin_word2vec_model], 'negextract__expand_top_n': [10], 'count_grams__binary': [True], 'clf__C': [0.1], 'clf__epsilon': [0.01]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "n_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scorer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_scorer(helper.cosine_score)",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_scorer_14": {
                "score_func": {
                    "value": "helper.cosine_score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CountVectorizer_49": {
                "analyzer": {
                    "value": "helper.analyzer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LinearSVR_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}