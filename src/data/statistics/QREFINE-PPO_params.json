{
    "PPO/Network.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_255": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_264": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_276": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_277": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.encoder_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, 768)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "_char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "_char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.char_num, self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "_char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='_char_embeddings', dtype=tf.float32, shape=[self.char_num, self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_85": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1], s[-2], self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "word_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_91": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_93": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_95": {
                "variable": {
                    "value": "_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.char_embeddings, shape=[s[0] * s[1], s[-2], self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "word_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.encoder_char_len, shape=[s[0] * s[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([output_fw, output_bw], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[s[0], s[1], 2 * self.char_hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0], s[1], 2 * self.char_hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "self.word_embeddings_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.encoder_inputs_embedded, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.word_embeddings_cat, self.encoder_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_141": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_168": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_183": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_184": {
                "variable": {
                    "value": "self.seq_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_226": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_247": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicting_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "self.returns_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "return",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_302": {
                "variable": {
                    "value": "self.advantages_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "self.old_log_probs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_policy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_329": {
                "variable": {
                    "value": "network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_355": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "network_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, self.scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_356": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, network_vars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_359": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_112": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_113": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "self.model_name + 'decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_263": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_344": {
                "variable": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_prob - self.old_log_probs_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_349": {
                "variable": {
                    "value": "self.surr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.surr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.surr2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.surr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_121": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_122": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_124": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "self.encoder_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_135": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_274": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "policy_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_64": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_217": {
                "dims": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_225": {
                "x": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_232": {
                "dims": {
                    "value": "[tf.shape(self.encoder_inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_242": {
                "x": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_275": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "input_tensor": {
                    "value": "tf.exp(self.predicting_scores) * self.predicting_scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_347": {
                "t": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_275": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_275": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_341": {
                "x": {
                    "value": "self.predicting_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PPO/Network2.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_256": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_281": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.encoder_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, 768)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "_char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "_char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.char_num, self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "_char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='_char_embeddings', dtype=tf.float32, shape=[self.char_num, self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_85": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1], s[-2], self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "word_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_91": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_93": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_95": {
                "variable": {
                    "value": "_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.char_embeddings, shape=[s[0] * s[1], s[-2], self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "word_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.encoder_char_len, shape=[s[0] * s[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([output_fw, output_bw], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[s[0], s[1], 2 * self.char_hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0], s[1], 2 * self.char_hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "self.word_embeddings_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.encoder_inputs_embedded, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.word_embeddings_cat, self.encoder_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_141": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_168": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_183": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_184": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_226": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_230": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicting_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_305": {
                "variable": {
                    "value": "self.returns_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "return",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_306": {
                "variable": {
                    "value": "self.advantages_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "self.old_log_probs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_policy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_310": {
                "variable": {
                    "value": "network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_336": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "network_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, self.scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_337": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, network_vars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_112": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_113": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "self.model_name + 'decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "self.value_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(returns - self.value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_326": {
                "variable": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_prob - self.old_log_probs_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_331": {
                "variable": {
                    "value": "self.surr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.surr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.surr2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_332": {
                "variable": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.surr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_121": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_122": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_124": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_emb_whole",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "self.encoder_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_135": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_278": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "value_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "policy_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_64": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_217": {
                "dims": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_222": {
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_225": {
                "x": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_233": {
                "dims": {
                    "value": "[tf.shape(self.encoder_inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_243": {
                "x": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_279": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_319": {
                "x": {
                    "value": "returns - self.value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "input_tensor": {
                    "value": "tf.exp(self.predicting_scores) * self.predicting_scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_329": {
                "t": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_279": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_279": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_322": {
                "x": {
                    "value": "self.predicting_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PPO/PARA.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "PPO/QA_similiarity.py": {
        "sklearn": {},
        "tensorflow": {
            "Saver_200": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "sharded": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.answer_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "answer_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.answer_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "answer_length_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_25": {
                "variable": {
                    "value": "self.answer_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.answer_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.question1_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "question_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.question1_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "question_length_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.question1_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.question1_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.question1_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, 768)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "clean_bert_emd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "self.clean_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.question1_embedded, self.question1_emd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.question2_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "question2_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.question2_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "question2_length_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_44": {
                "variable": {
                    "value": "self.question2_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.question2_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.question2_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, 768)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "noisy_bert_emd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "self.noisy_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.question2_embedded, self.question2_emd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.eye(self.num_units, dtype=float)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_60": {
                "variable": {
                    "value": "answer_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_61": {
                "variable": {
                    "value": "(self.answer_outputs, self.answer_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "answer_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.answer_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.answer_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_74": {
                "variable": {
                    "value": "question_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_75": {
                "variable": {
                    "value": "(self.question1_outputs, self.question1_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "question_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.clean_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.question1_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_81": {
                "variable": {
                    "value": "(self.question2_outputs, self.question2_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "question_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.noisy_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.question2_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_89": {
                "variable": {
                    "value": "norm_question1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.question1_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_90": {
                "variable": {
                    "value": "norm_question2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.question2_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_91": {
                "variable": {
                    "value": "norm_answer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.answer_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "self.cosine_simi1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(tf.matmul(norm_question1, self.W), tf.transpose(norm_answer))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "self.cosine_simi2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(tf.matmul(norm_question2, self.W), tf.transpose(norm_answer))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_97": {
                "variable": {
                    "value": "self.norm_cosine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cosine_simi1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_98": {
                "variable": {
                    "value": "self.norm_cosine2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cosine_simi2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "answer_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "question_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "answer_lstm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "question_lstm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "cosin_similarity",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_102": {
                "variable": {
                    "value": "self.loss_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 + self.two_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "self.loss_score_cm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_105": {
                "variable": {
                    "value": "self.train_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_224": {
                "variable": {
                    "value": "a_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "a_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[answer_Id[i] for i in idx_n]",
                            "ListComp"
                        ],
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(a_shuffle, maxlen=None, padding='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_231": {
                "variable": {
                    "value": "c_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "c_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[clean_Id[i] for i in idx_n]",
                            "ListComp"
                        ],
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(c_shuffle, maxlen=None, padding='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_239": {
                "variable": {
                    "value": "n_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "n_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[noisy_Id[i] for i in idx_n]",
                            "ListComp"
                        ],
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(n_shuffle, maxlen=None, padding='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "norm_question1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.question1_state.h, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "norm_question2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.question2_state.h, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "a": {
                    "value": "norm_answer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.answer_state.h, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_96": {
                "a": {
                    "value": "norm_answer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.answer_state.h, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PPO/SeqBA.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Huawei/BeamSearch_Seq2seq.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_186": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_195": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_205": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_89": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_129": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_130": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_60": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_61": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "self.model_name + 'decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMCell_69": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_72": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_83": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_202": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_45": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_165": {
                "dims": {
                    "value": "[tf.shape(self.encoder_inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sequence_mask_203": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_175": {
                "input_tensor": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_203": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_165": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Question_Reform_Huawei/Bi_Atten_Seq2Seq.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Huawei/CharacterBA.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Huawei/Data_loading.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Huawei/seq_char_list.py": {
        "sklearn": {},
        "tensorflow": {
            "log_194": {
                "variable": {
                    "value": "self.word_log_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_206": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_216": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_217": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_char_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.initial_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "infer_initial_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_59": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "_char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "_char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.char_num, self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "_char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='_char_embeddings', dtype=tf.float32, shape=[self.char_num, self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.encoder_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_67": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_78": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "char_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1], s[-2], self.char_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "word_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.encoder_char_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0] * s[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_84": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_86": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.char_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_88": {
                "variable": {
                    "value": "_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.char_hidden_units, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "char_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.char_embeddings, shape=[s[0] * s[1], s[-2], self.char_dim])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "word_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.encoder_char_len, shape=[s[0] * s[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([output_fw, output_bw], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[s[0], s[1], 2 * self.char_hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0], s[1], 2 * self.char_hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_99": {
                "variable": {
                    "value": "self.word_embeddings_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.encoder_inputs_embedded, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_132": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_154": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_164": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_165": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_172": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(tf.reduce_sum(self.decoder_length) == 1, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : s2s_final_state",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.initial_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "identity_183": {
                "variable": {
                    "value": "self.RL_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_184": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_186": {
                "variable": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_102": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_103": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "self.model_name + 'decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_204": {
                "x": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMCell_111": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_112": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_114": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_125": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_172": {
                "x": {
                    "value": "tf.reduce_sum(self.decoder_length) == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_57": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_214": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_214": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_182": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_215": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_214": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Question_Reform_Huawei/seq_last.py": {
        "sklearn": {},
        "tensorflow": {
            "log_154": {
                "variable": {
                    "value": "self.word_log_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_175": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.initial_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "infer_initial_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_91": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_113": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_123": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_124": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_131": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(tf.reduce_sum(self.decoder_length) == 1, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : s2s_final_state",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.initial_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "identity_142": {
                "variable": {
                    "value": "self.RL_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_143": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_145": {
                "variable": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_61": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_62": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.model_name + 'Seq2Seq_decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_71": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_73": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_84": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_131": {
                "x": {
                    "value": "tf.reduce_sum(self.decoder_length) == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_172": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_172": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Question_Reform_Yahoo/Answer_LSTM.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Yahoo/BA_Seq2Seq.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Yahoo/BeamSearch_Seq2seq.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_186": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_195": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_205": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_89": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_129": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_130": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_60": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_61": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "self.model_name + 'decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMCell_69": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_72": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_83": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_202": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_45": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_165": {
                "dims": {
                    "value": "[tf.shape(self.encoder_inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sequence_mask_203": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_175": {
                "input_tensor": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_203": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_165": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Question_Reform_Yahoo/Bi_Atten_Seq2Seq.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Yahoo/Data_loading.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "Question_Reform_Yahoo/seq_last.py": {
        "sklearn": {},
        "tensorflow": {
            "log_154": {
                "variable": {
                    "value": "self.word_log_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.dis_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "self.RL_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "variable": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_seq2seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_175": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.initial_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "infer_initial_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.embedding.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.embd_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "self.decoder_outputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_91": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_113": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_123": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_124": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "self.softmax_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_131": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(tf.reduce_sum(self.decoder_length) == 1, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : s2s_final_state",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.initial_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "identity_142": {
                "variable": {
                    "value": "self.RL_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_143": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_145": {
                "variable": {
                    "value": "self.max_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.softmax_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "self.model_name + 'model_inputs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "self.model_name + 'embeddings'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "self.model_name + 'encoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_61": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_62": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.model_name + 'Seq2Seq_decoder_model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_log_prob * self.dis_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_71": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_73": {
                "variable": {
                    "value": "((encoder_fw_outputs, encoder_bw_outputs), (encoder_fw_final_state, encoder_bw_final_state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LSTMCell(self.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_outputs, encoder_bw_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "encoder_final_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.c, encoder_bw_final_state.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "encoder_final_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(encoder_fw_final_state.h, encoder_bw_final_state.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_84": {
                "variable": {
                    "value": "self.encoder_final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_final_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.c, encoder_bw_final_state.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_final_state_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((encoder_fw_final_state.h, encoder_bw_final_state.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_131": {
                "x": {
                    "value": "tf.reduce_sum(self.decoder_length) == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "tf.sequence_mask(tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1]), tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_172": {
                "lengths": {
                    "value": "tf.fill([tf.shape(self.logits)[0]], tf.shape(self.logits)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "self.decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_172": {
                "dims": {
                    "value": "[tf.shape(self.logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(self.logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PPO/Build_model.py": {
        "tensorflow": {
            "placeholder_36": {
                "variable": {
                    "value": "returns_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, lenth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "return",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "advantages_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, lenth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "actions_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, lenth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "old_log_probs_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, lenth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_policy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_44": {
                "variable": {
                    "value": "network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.scope",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "advantages",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "advantages_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, lenth], name='advantage')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "returns_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, lenth], name='return')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_68": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "value_loss - policy_loss - entropy",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "network_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_69": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(loss, network_vars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.grad_clip",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.scope",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "value_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(returns - train_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_dist.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_58": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_prob - old_log_probs_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ratio",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(log_prob - old_log_probs_ph)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ratio, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_63": {
                "variable": {
                    "value": "surr",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "surr1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * advantages",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - epsilon, 1.0 + epsilon) * advantages",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "surr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(surr1, surr2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "value_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "policy_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_51": {
                "x": {
                    "value": "returns - train_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_61": {
                "t": {
                    "value": "ratio",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(log_prob - old_log_probs_ph)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ratio, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PPO/CharacterBA.py": {
        "tensorflow": {}
    },
    "PPO/Data_loading.py": {
        "tensorflow": {}
    },
    "PPO/Train.py": {
        "tensorflow": {
            "NewCheckpointReader_71": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.seq2seq_ckp_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Graph_79": {
                "variable": {
                    "value": "G_BeamSearch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_85": {
                "graph": {
                    "value": "G_BeamSearch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_124": {
                "variable": {
                    "value": "source_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "source_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(source_shuffle, maxlen=max_word, padding='post', truncating='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_132": {
                "variable": {
                    "value": "target_shuffle_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "target_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "seq2seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "L",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_140": {
                "variable": {
                    "value": "train_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(train_shuffle, maxlen=seq2seq_len, padding='post', truncating='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "seq2seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "L",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_504": {
                "variable": {
                    "value": "network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "config.PPoscope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_506": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "sharded": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequences_386": {
                "variable": {
                    "value": "test_source_shuffle_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_source_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "PPO/main_fuc.py": {
        "tensorflow": {}
    },
    "PPO/reward.py": {
        "tensorflow": {
            "ConfigProto_5": {
                "variable": {
                    "value": "config_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_56": {
                "variable": {
                    "value": "G_Seq2Seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_57": {
                "variable": {
                    "value": "sess_word_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "G_Seq2Seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_66": {
                "variable": {
                    "value": "G_QA_similiarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "sess_QA_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "G_QA_similiarity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_91": {
                "variable": {
                    "value": "answer_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "answer_shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(answer_shuffle, maxlen=None, padding='post', value=EOS)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "EOS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Saver_61": {
                "variable": {
                    "value": "saver_word_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_70": {
                "variable": {
                    "value": "saver_sen_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Question_Reform_Huawei/AQA.py": {
        "tensorflow": {}
    },
    "Question_Reform_Huawei/Answer_LSTM.py": {
        "tensorflow": {}
    },
    "Question_Reform_Huawei/BA_Seq2Seq.py": {
        "tensorflow": {}
    }
}