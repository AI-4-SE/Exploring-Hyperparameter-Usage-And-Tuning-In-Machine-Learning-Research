{
    "Utils/util.py": {
        "sklearn": {
            "StratifiedKFold_140": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "transpose_106": {
                "variable": {
                    "value": "g.edge_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "g.node_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(g.node_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(g.g.node[0]['att'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/pytorchtools.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./Saved_models/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main_Inception.py": {
        "torch": {
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_136": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_graph, A)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pass_data_iteratively(model, train_graphs, A)",
                            "Call"
                        ],
                        [
                            "pass_data_iteratively(model, test_graphs, A)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_all_119": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_175": {
                "f": {
                    "value": "./Saved_models/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_Inception_learning_adj_pool.py": {
        "torch": {
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Threshold_17": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_165": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "(pred_Pool - torch.zeros_like(pred_Pool)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pass_data_iteratively(model, test_graphs)",
                            "Call"
                        ],
                        [
                            "test(args, model, device, train_graphs, test_graphs, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_134": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_all_136": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_196": {
                "f": {
                    "value": "./Saved_models/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_19": {
                "input": {
                    "value": "(pred_Adj - torch.zeros_like(pred_Adj)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_44": {
                "size": {
                    "value": "[len(batch_graph[0].g)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_19": {
                "input": {
                    "value": "pred_Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(pred_Adj)",
                            "Call"
                        ],
                        [
                            "pred_Adj",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "input": {
                    "value": "pred_Pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_Pool",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "pred_Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(pred_Adj)",
                            "Call"
                        ],
                        [
                            "pred_Adj",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/graphcnn.py": {
        "torch": {
            "nonzero_25": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_layers - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.linears_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_mat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_137": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Adj_block_idx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "h_with_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, dummy.reshape((1, -1)).to(self.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_236": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.node_features for graph in batch_graph]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_22": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_144": {
                "variable": {
                    "value": "elem",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ],
                        [
                            "start_idx[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_145": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Adj_block_idx, self_loop_edge]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Adj_block_elem, elem]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "self.num_layers - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_185": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "h_with_dummy[padded_neighbor_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_270": {
                "input": {
                    "value": "self.linears_prediction[layer](pooled_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_202": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_227": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphcnn_Inception.py": {
        "torch": {
            "nonzero_26": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "agg_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repeated_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.repeat(b, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchnorm(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "h_with_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, dummy.reshape((1, -1)).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_1, out_2, out_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.Inceptions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_129": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((c + input_dim) * 3, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.node_features.view(1, -1, 136) for graph in batch_graph]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mean_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(max_pool, min_pool, mean_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_23": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_77": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "h_with_dummy[padded_neighbor_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "(c + input_dim) * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_136": {
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_181": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_182": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphcnn_Inception_learning_adj_pool.py": {
        "torch": {
            "nonzero_27": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_36": {
                "variable": {
                    "value": "out_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Adj)",
                            "Call"
                        ],
                        [
                            "np.zeros([90, 90])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(A).to(self.device)",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "in_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Adj)",
                            "Call"
                        ],
                        [
                            "np.zeros([90, 90])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(A).to(self.device)",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_39": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "input": {
                    "value": "frac_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(fractional_matrix_power(deg_mat.cpu(), -0.5)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A + torch.eye(n).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_80": {
                "variable": {
                    "value": "agg_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repeated_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_hat.repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "A.repeat(b, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_106": {
                "variable": {
                    "value": "agg_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repeated_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_hat.repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "A.repeat(b, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchnorm(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "h_with_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, dummy.reshape((1, -1)).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_1, out_2, out_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "self.Adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand([num_nodes, num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.Pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(size=[num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.Inceptions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_182": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((c + input_dim) * 3, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.node_features.view(1, -1, graph.node_features.shape[1]) for graph in batch_graph]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_235": {
                "variable": {
                    "value": "(max_pool, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_237": {
                "variable": {
                    "value": "mean_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "weighted_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repeated_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Pool.repeat(h.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "self.Pool.repeat(h.shape[0], 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_240": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(max_pool, weighted_pool, mean_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_271": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_layers - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_276": {
                "variable": {
                    "value": "self.Adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand([90, 90])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.Pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(size=[90])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_288": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "136",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1 * 128, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.node_features.view(1, -1, 136) for graph in batch_graph]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_1(X_concat, A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_321": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_2(h, A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_327": {
                "variable": {
                    "value": "weighted_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repeated_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Pool.repeat(h.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "self.Pool.repeat(h.shape[0], 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_24": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diagflat_41": {
                "input": {
                    "value": "torch.diagonal(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_41": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.Adj)",
                            "Call"
                        ],
                        [
                            "np.zeros([90, 90])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(A).to(self.device)",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_68": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_127": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "h_with_dummy[padded_neighbor_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_167": {
                "*size": {
                    "value": "[num_nodes, num_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_171": {
                "size": {
                    "value": "[num_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "(c + input_dim) * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_188": {
                "p": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_189": {
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_236": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "layer(A, h, padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "F.relu(self.GCN_1(X_concat, A))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.GCN_2(h, A))",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "*size": {
                    "value": "self.num_layers - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_276": {
                "*size": {
                    "value": "[90, 90]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_279": {
                "size": {
                    "value": "[90]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "1 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "p": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_295": {
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norms[layer](self.linears[layer](h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}